//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.18444
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace Queue.Operator.Silverlight.QueueRemoteService {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DayOfWeek", Namespace="http://schemas.datacontract.org/2004/07/System")]
    public enum DayOfWeek : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Sunday = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Monday = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Tuesday = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Wednesday = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Thursday = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Friday = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Saturday = 6,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.TerminalConfig))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.Config))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.Entity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.DesignConfig))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.DefaultConfig))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.NotificationConfig))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.QueuePlanMetric))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.Metric))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.IdentifiedEntity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.QueuePlanServiceMetric))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.Service))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.ServiceGroup))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.Operator))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.User))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.Manager))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.Administrator))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.Workplace))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.Client))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Queue.Services.DTO.Client>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.ClientRequestFilter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Queue.Services.DTO.ClientRequest>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.ClientRequest))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Queue.Services.DTO.ClientRequestParameter>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.ClientRequestParameter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Queue.Services.DTO.ClientRequestEvent>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.ClientRequestEvent))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.Event))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.UserEvent))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Queue.Services.DTO.ClientRequestPlan>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.ClientRequestPlan))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.QueuePlan.ClientRequest))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.QueuePlan))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Queue.Services.DTO.NotDistributedClientRequest>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.NotDistributedClientRequest))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Queue.Services.DTO.OperatorPlan>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.OperatorPlan))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.OperatorPlanMetrics))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.QueuePlan.Operator))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.ServiceFreeTime))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.Schedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Queue.Services.DTO.ServiceRendering>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.ServiceRendering))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.ServiceExceptionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.DefaultWeekdaySchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.DefaultExceptionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.ServiceWeekdaySchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Queue.Services.DTO.ServiceGroup>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Queue.Services.DTO.User>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Queue.Services.DTO.Office>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.Office))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Queue.Services.DTO.Workplace>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Queue.Services.DTO.Service>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Queue.Services.DTO.ServiceParameter>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.ServiceParameter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.ServiceParameterOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.ServiceParameterNumber))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.ServiceParameterText))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.CouponConfig))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.SMTPConfig))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.PortalConfig))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.MediaConfig))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Queue.Services.DTO.MediaConfigFile>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.DTO.MediaConfigFile))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Model.Common.ConfigType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Model.Common.ClientRequestRegistrator))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Model.Common.ServiceType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Queue.Model.Common.ConfigType>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Model.Common.WorkplaceModificator))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Model.Common.WorkplaceType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Model.Common.ClientRequestState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Model.Common.ClientRequestType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Model.Common.EventType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Model.Common.ServiceRenderingMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Model.Common.UserRole))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Model.Common.ServiceParameterType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Model.Common.ServiceRatingReportDetailLavel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Model.Common.ServiceRatingReportSettings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ServerServiceEventType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ServerSubscribtionArgs))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, object>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<string>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<System.TimeSpan>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, string>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, Queue.Model.Common.ServiceRenderingMode>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<System.Guid>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek))]
    public partial class ObjectNotFoundFault : object, System.ComponentModel.INotifyPropertyChanged {
        
        private object ObjectIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object ObjectId {
            get {
                return this.ObjectIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ObjectIdField, value) != true)) {
                    this.ObjectIdField = value;
                    this.RaisePropertyChanged("ObjectId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerServiceEventType", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
    public enum ServerServiceEventType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CallClient = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ClientRequestUpdated = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CurrentClientRequestUpdated = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OperatorPlanMetricsUpdated = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ConfigUpdated = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Event = 5,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerSubscribtionArgs", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
    public partial class ServerSubscribtionArgs : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.Generic.List<Queue.Model.Common.ConfigType> ConfigTypesField;
        
        private Queue.Services.DTO.Operator OperatorField;
        
        private Queue.Services.DTO.Workplace WorkplaceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Queue.Model.Common.ConfigType> ConfigTypes {
            get {
                return this.ConfigTypesField;
            }
            set {
                if ((object.ReferenceEquals(this.ConfigTypesField, value) != true)) {
                    this.ConfigTypesField = value;
                    this.RaisePropertyChanged("ConfigTypes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.DTO.Operator Operator {
            get {
                return this.OperatorField;
            }
            set {
                if ((object.ReferenceEquals(this.OperatorField, value) != true)) {
                    this.OperatorField = value;
                    this.RaisePropertyChanged("Operator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.DTO.Workplace Workplace {
            get {
                return this.WorkplaceField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkplaceField, value) != true)) {
                    this.WorkplaceField = value;
                    this.RaisePropertyChanged("Workplace");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="QueueRemoteService.IServerService", CallbackContract=typeof(Queue.Operator.Silverlight.QueueRemoteService.IServerServiceCallback))]
    public interface IServerService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/EditTerminalConfig", ReplyAction="http://tempuri.org/IServerService/EditTerminalConfigResponse")]
        System.IAsyncResult BeginEditTerminalConfig(int PIN, bool currentDayRecording, int columns, int rows, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.TerminalConfig EndEditTerminalConfig(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetNotificationConfig", ReplyAction="http://tempuri.org/IServerService/GetNotificationConfigResponse")]
        System.IAsyncResult BeginGetNotificationConfig(System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.NotificationConfig EndGetNotificationConfig(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/EditNotificationConfig", ReplyAction="http://tempuri.org/IServerService/EditNotificationConfigResponse")]
        System.IAsyncResult BeginEditNotificationConfig(int clientRequestsLength, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.NotificationConfig EndEditNotificationConfig(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetQueuePlanMetric", ReplyAction="http://tempuri.org/IServerService/GetQueuePlanMetricResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/GetQueuePlanMetricObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginGetQueuePlanMetric(int year, int month, int day, int hours, int minutes, int seconds, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.QueuePlanMetric EndGetQueuePlanMetric(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetQueuePlanServiceMetric", ReplyAction="http://tempuri.org/IServerService/GetQueuePlanServiceMetricResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/GetQueuePlanServiceMetricObjectNotFoundFaultFau" +
            "lt", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginGetQueuePlanServiceMetric(int year, int month, int day, int hours, int minutes, int seconds, System.Guid serviceId, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.QueuePlanServiceMetric EndGetQueuePlanServiceMetric(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetDateTime", ReplyAction="http://tempuri.org/IServerService/GetDateTimeResponse")]
        System.IAsyncResult BeginGetDateTime(System.AsyncCallback callback, object asyncState);
        
        System.DateTime EndGetDateTime(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/IsSubscribed", ReplyAction="http://tempuri.org/IServerService/IsSubscribedResponse")]
        System.IAsyncResult BeginIsSubscribed(Queue.Operator.Silverlight.QueueRemoteService.ServerServiceEventType eventType, System.AsyncCallback callback, object asyncState);
        
        bool EndIsSubscribed(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/Subscribe", ReplyAction="http://tempuri.org/IServerService/SubscribeResponse")]
        System.IAsyncResult BeginSubscribe(Queue.Operator.Silverlight.QueueRemoteService.ServerServiceEventType eventType, Queue.Operator.Silverlight.QueueRemoteService.ServerSubscribtionArgs args, System.AsyncCallback callback, object asyncState);
        
        void EndSubscribe(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/UnSubscribe", ReplyAction="http://tempuri.org/IServerService/UnSubscribeResponse")]
        System.IAsyncResult BeginUnSubscribe(Queue.Operator.Silverlight.QueueRemoteService.ServerServiceEventType eventType, System.AsyncCallback callback, object asyncState);
        
        void EndUnSubscribe(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetClient", ReplyAction="http://tempuri.org/IServerService/GetClientResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/GetClientObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginGetClient(System.Guid clientId, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.Client EndGetClient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/OpenClientSession", ReplyAction="http://tempuri.org/IServerService/OpenClientSessionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/OpenClientSessionObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginOpenClientSession(System.Guid sessionId, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.Client EndOpenClientSession(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetClientByIdentity", ReplyAction="http://tempuri.org/IServerService/GetClientByIdentityResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/GetClientByIdentityObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginGetClientByIdentity(string identity, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.Client EndGetClientByIdentity(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/FindClients", ReplyAction="http://tempuri.org/IServerService/FindClientsResponse")]
        System.IAsyncResult BeginFindClients(int startIndex, int maxResults, string filter, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Queue.Services.DTO.Client> EndFindClients(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/AddClient", ReplyAction="http://tempuri.org/IServerService/AddClientResponse")]
        System.IAsyncResult BeginAddClient(string surname, string name, string patronymic, string email, string mobile, string identity, string password, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.Client EndAddClient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/ClientLogin", ReplyAction="http://tempuri.org/IServerService/ClientLoginResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/ClientLoginObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginClientLogin(string email, string password, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.Client EndClientLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/ClientRestorePassword", ReplyAction="http://tempuri.org/IServerService/ClientRestorePasswordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/ClientRestorePasswordObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginClientRestorePassword(string email, System.AsyncCallback callback, object asyncState);
        
        void EndClientRestorePassword(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/EditClient", ReplyAction="http://tempuri.org/IServerService/EditClientResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/EditClientObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginEditClient(System.Guid clientId, string surname, string name, string patronymic, string email, string mobile, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.Client EndEditClient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/ChangeClientPassword", ReplyAction="http://tempuri.org/IServerService/ChangeClientPasswordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/ChangeClientPasswordObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginChangeClientPassword(System.Guid clientId, string password, System.AsyncCallback callback, object asyncState);
        
        void EndChangeClientPassword(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/DeleteClient", ReplyAction="http://tempuri.org/IServerService/DeleteClientResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/DeleteClientObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginDeleteClient(System.Guid clientId, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteClient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/SendPINToEmail", ReplyAction="http://tempuri.org/IServerService/SendPINToEmailResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/SendPINToEmailObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginSendPINToEmail(string email, System.AsyncCallback callback, object asyncState);
        
        void EndSendPINToEmail(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/CheckPIN", ReplyAction="http://tempuri.org/IServerService/CheckPINResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/CheckPINObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginCheckPIN(string email, int source, System.AsyncCallback callback, object asyncState);
        
        void EndCheckPIN(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/FindClientRequests", ReplyAction="http://tempuri.org/IServerService/FindClientRequestsResponse")]
        System.IAsyncResult BeginFindClientRequests(int startIndex, int maxResults, Queue.Services.DTO.ClientRequestFilter filter, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Queue.Services.DTO.ClientRequest> EndFindClientRequests(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetClientRequest", ReplyAction="http://tempuri.org/IServerService/GetClientRequestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/GetClientRequestObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginGetClientRequest(System.Guid clientRequestId, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.ClientRequest EndGetClientRequest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetClientRequestEvents", ReplyAction="http://tempuri.org/IServerService/GetClientRequestEventsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/GetClientRequestEventsObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginGetClientRequestEvents(System.Guid clientRequestId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Queue.Services.DTO.ClientRequestEvent> EndGetClientRequestEvents(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/AddEarlyClientRequest", ReplyAction="http://tempuri.org/IServerService/AddEarlyClientRequestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/AddEarlyClientRequestObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginAddEarlyClientRequest(System.Guid clientId, System.Guid serviceId, System.DateTime requestDate, System.TimeSpan requestTime, System.Collections.Generic.Dictionary<System.Guid, object> parameters, int subjects, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.ClientRequest EndAddEarlyClientRequest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/AddLiveClientRequest", ReplyAction="http://tempuri.org/IServerService/AddLiveClientRequestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/AddLiveClientRequestObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginAddLiveClientRequest(System.Guid clientId, System.Guid serviceId, bool isPriority, System.Collections.Generic.Dictionary<System.Guid, object> parameters, int subjects, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.ClientRequest EndAddLiveClientRequest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetClientRequestCoupon", ReplyAction="http://tempuri.org/IServerService/GetClientRequestCouponResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/GetClientRequestCouponObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginGetClientRequestCoupon(System.Guid clientRequestId, System.AsyncCallback callback, object asyncState);
        
        string EndGetClientRequestCoupon(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/ChangeClientRequestPriority", ReplyAction="http://tempuri.org/IServerService/ChangeClientRequestPriorityResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/ChangeClientRequestPriorityObjectNotFoundFaultF" +
            "ault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginChangeClientRequestPriority(System.Guid clientRequestId, bool isPriority, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.ClientRequest EndChangeClientRequestPriority(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/ChangeClientRequestSubjects", ReplyAction="http://tempuri.org/IServerService/ChangeClientRequestSubjectsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/ChangeClientRequestSubjectsObjectNotFoundFaultF" +
            "ault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginChangeClientRequestSubjects(System.Guid clientRequestId, int subjects, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.ClientRequest EndChangeClientRequestSubjects(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/ChangeClientRequestService", ReplyAction="http://tempuri.org/IServerService/ChangeClientRequestServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/ChangeClientRequestServiceObjectNotFoundFaultFa" +
            "ult", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginChangeClientRequestService(System.Guid clientRequestId, System.Guid serviceId, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.ClientRequest EndChangeClientRequestService(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/ChangeClientRequestOperator", ReplyAction="http://tempuri.org/IServerService/ChangeClientRequestOperatorResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/ChangeClientRequestOperatorObjectNotFoundFaultF" +
            "ault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginChangeClientRequestOperator(System.Guid clientRequestId, System.Guid operatorId, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.ClientRequest EndChangeClientRequestOperator(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/CancelClientRequest", ReplyAction="http://tempuri.org/IServerService/CancelClientRequestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/CancelClientRequestObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginCancelClientRequest(System.Guid clientRequestId, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.ClientRequest EndCancelClientRequest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/RestoreClientRequest", ReplyAction="http://tempuri.org/IServerService/RestoreClientRequestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/RestoreClientRequestObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginRestoreClientRequest(System.Guid clientRequestId, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.ClientRequest EndRestoreClientRequest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/PostponeClientRequest", ReplyAction="http://tempuri.org/IServerService/PostponeClientRequestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/PostponeClientRequestObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginPostponeClientRequest(System.Guid clientRequestId, System.TimeSpan postponeTime, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.ClientRequest EndPostponeClientRequest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetOperatorClientRequestPlans", ReplyAction="http://tempuri.org/IServerService/GetOperatorClientRequestPlansResponse")]
        System.IAsyncResult BeginGetOperatorClientRequestPlans(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Queue.Services.DTO.ClientRequestPlan> EndGetOperatorClientRequestPlans(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetCurrentClientRequests", ReplyAction="http://tempuri.org/IServerService/GetCurrentClientRequestsResponse")]
        System.IAsyncResult BeginGetCurrentClientRequests(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Queue.Services.DTO.ClientRequest> EndGetCurrentClientRequests(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetCurrentClientRequest", ReplyAction="http://tempuri.org/IServerService/GetCurrentClientRequestResponse")]
        System.IAsyncResult BeginGetCurrentClientRequest(System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.ClientRequest EndGetCurrentClientRequest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/UpdateCurrentClientRequest", ReplyAction="http://tempuri.org/IServerService/UpdateCurrentClientRequestResponse")]
        System.IAsyncResult BeginUpdateCurrentClientRequest(Queue.Model.Common.ClientRequestState state, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateCurrentClientRequest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/PostponeCurrentClientRequest", ReplyAction="http://tempuri.org/IServerService/PostponeCurrentClientRequestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/PostponeCurrentClientRequestObjectNotFoundFault" +
            "Fault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginPostponeCurrentClientRequest(System.TimeSpan postponeTime, System.AsyncCallback callback, object asyncState);
        
        void EndPostponeCurrentClientRequest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/ReturnCurrentClientRequest", ReplyAction="http://tempuri.org/IServerService/ReturnCurrentClientRequestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/ReturnCurrentClientRequestObjectNotFoundFaultFa" +
            "ult", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginReturnCurrentClientRequest(System.AsyncCallback callback, object asyncState);
        
        void EndReturnCurrentClientRequest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/ChangeCurrentClientRequestService", ReplyAction="http://tempuri.org/IServerService/ChangeCurrentClientRequestServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/ChangeCurrentClientRequestServiceObjectNotFound" +
            "FaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginChangeCurrentClientRequestService(System.Guid serviceId, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.ClientRequest EndChangeCurrentClientRequestService(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/ChangeCurrentClientRequestServiceType", ReplyAction="http://tempuri.org/IServerService/ChangeCurrentClientRequestServiceTypeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/ChangeCurrentClientRequestServiceTypeObjectNotF" +
            "oundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginChangeCurrentClientRequestServiceType(Queue.Model.Common.ServiceType serviceType, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.ClientRequest EndChangeCurrentClientRequestServiceType(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/CallCurrentClient", ReplyAction="http://tempuri.org/IServerService/CallCurrentClientResponse")]
        System.IAsyncResult BeginCallCurrentClient(System.AsyncCallback callback, object asyncState);
        
        void EndCallCurrentClient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetQueuePlan", ReplyAction="http://tempuri.org/IServerService/GetQueuePlanResponse")]
        System.IAsyncResult BeginGetQueuePlan(System.DateTime planDate, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.QueuePlan EndGetQueuePlan(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetFreeTime", ReplyAction="http://tempuri.org/IServerService/GetFreeTimeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/GetFreeTimeObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.ServiceExceptionSchedule))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.DefaultWeekdaySchedule))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.DefaultExceptionSchedule))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.ServiceWeekdaySchedule))]
        System.IAsyncResult BeginGetFreeTime(System.Guid serviceId, System.DateTime planDate, Queue.Model.Common.ClientRequestType queueType, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.ServiceFreeTime EndGetFreeTime(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/RefreshTodayQueuePlan", ReplyAction="http://tempuri.org/IServerService/RefreshTodayQueuePlanResponse")]
        System.IAsyncResult BeginRefreshTodayQueuePlan(System.AsyncCallback callback, object asyncState);
        
        void EndRefreshTodayQueuePlan(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetRootServiceGroups", ReplyAction="http://tempuri.org/IServerService/GetRootServiceGroupsResponse")]
        System.IAsyncResult BeginGetRootServiceGroups(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Queue.Services.DTO.ServiceGroup> EndGetRootServiceGroups(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetServiceGroups", ReplyAction="http://tempuri.org/IServerService/GetServiceGroupsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/GetServiceGroupsObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginGetServiceGroups(System.Guid parentServiceGroupId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Queue.Services.DTO.ServiceGroup> EndGetServiceGroups(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetServiceGroup", ReplyAction="http://tempuri.org/IServerService/GetServiceGroupResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/GetServiceGroupObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginGetServiceGroup(System.Guid serviceGroupId, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.ServiceGroup EndGetServiceGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/AddRootServiceGroup", ReplyAction="http://tempuri.org/IServerService/AddRootServiceGroupResponse")]
        System.IAsyncResult BeginAddRootServiceGroup(System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.ServiceGroup EndAddRootServiceGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/AddServiceGroup", ReplyAction="http://tempuri.org/IServerService/AddServiceGroupResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/AddServiceGroupObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginAddServiceGroup(System.Guid parentServiceGroupId, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.ServiceGroup EndAddServiceGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/EditServiceGroup", ReplyAction="http://tempuri.org/IServerService/EditServiceGroupResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/EditServiceGroupObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginEditServiceGroup(System.Guid serviceGroupId, string code, string name, string comment, string description, int columns, int rows, string color, byte[] icon, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.ServiceGroup EndEditServiceGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/MoveServiceGroup", ReplyAction="http://tempuri.org/IServerService/MoveServiceGroupResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/MoveServiceGroupObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginMoveServiceGroup(System.Guid sourceGroupId, System.Guid targetGroupId, System.AsyncCallback callback, object asyncState);
        
        void EndMoveServiceGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/MoveServiceGroupToRoot", ReplyAction="http://tempuri.org/IServerService/MoveServiceGroupToRootResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/MoveServiceGroupToRootObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginMoveServiceGroupToRoot(System.Guid sourceGroupId, System.AsyncCallback callback, object asyncState);
        
        void EndMoveServiceGroupToRoot(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/ServiceGroupUp", ReplyAction="http://tempuri.org/IServerService/ServiceGroupUpResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/ServiceGroupUpObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginServiceGroupUp(System.Guid serviceGroupId, System.AsyncCallback callback, object asyncState);
        
        bool EndServiceGroupUp(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/ServiceGroupDown", ReplyAction="http://tempuri.org/IServerService/ServiceGroupDownResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/ServiceGroupDownObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginServiceGroupDown(System.Guid serviceGroupId, System.AsyncCallback callback, object asyncState);
        
        bool EndServiceGroupDown(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/ServiceGroupActivate", ReplyAction="http://tempuri.org/IServerService/ServiceGroupActivateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/ServiceGroupActivateObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginServiceGroupActivate(System.Guid serviceGroupId, System.AsyncCallback callback, object asyncState);
        
        bool EndServiceGroupActivate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/ServiceGroupDeactivate", ReplyAction="http://tempuri.org/IServerService/ServiceGroupDeactivateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/ServiceGroupDeactivateObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginServiceGroupDeactivate(System.Guid serviceGroupId, System.AsyncCallback callback, object asyncState);
        
        bool EndServiceGroupDeactivate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/DeleteServiceGroup", ReplyAction="http://tempuri.org/IServerService/DeleteServiceGroupResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/DeleteServiceGroupObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginDeleteServiceGroup(System.Guid serviceGroupId, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteServiceGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/OpenUserSession", ReplyAction="http://tempuri.org/IServerService/OpenUserSessionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/OpenUserSessionObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.Operator))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.Manager))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.Administrator))]
        System.IAsyncResult BeginOpenUserSession(System.Guid sessionId, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.User EndOpenUserSession(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/UserHeartbeat", ReplyAction="http://tempuri.org/IServerService/UserHeartbeatResponse")]
        System.IAsyncResult BeginUserHeartbeat(System.AsyncCallback callback, object asyncState);
        
        void EndUserHeartbeat(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetUsers", ReplyAction="http://tempuri.org/IServerService/GetUsersResponse")]
        System.IAsyncResult BeginGetUsers(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Queue.Services.DTO.User> EndGetUsers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetUser", ReplyAction="http://tempuri.org/IServerService/GetUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/GetUserObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.Operator))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.Manager))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.Administrator))]
        System.IAsyncResult BeginGetUser(System.Guid userId, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.User EndGetUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetUserList", ReplyAction="http://tempuri.org/IServerService/GetUserListResponse")]
        System.IAsyncResult BeginGetUserList(Queue.Model.Common.UserRole userRole, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<System.Guid, string> EndGetUserList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/UserLogin", ReplyAction="http://tempuri.org/IServerService/UserLoginResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/UserLoginObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.Operator))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.Manager))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.Administrator))]
        System.IAsyncResult BeginUserLogin(System.Guid userId, string password, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.User EndUserLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/AddUser", ReplyAction="http://tempuri.org/IServerService/AddUserResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.Operator))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.Manager))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.Administrator))]
        System.IAsyncResult BeginAddUser(Queue.Model.Common.UserRole role, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.User EndAddUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/EditUser", ReplyAction="http://tempuri.org/IServerService/EditUserResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.Operator))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.Manager))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.Administrator))]
        System.IAsyncResult BeginEditUser(System.Guid userId, string surname, string name, string patronymic, string email, string mobile, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.User EndEditUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/DeleteUser", ReplyAction="http://tempuri.org/IServerService/DeleteUserResponse")]
        System.IAsyncResult BeginDeleteUser(System.Guid userId, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/ChangeUserPassword", ReplyAction="http://tempuri.org/IServerService/ChangeUserPasswordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/ChangeUserPasswordObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginChangeUserPassword(System.Guid userId, string password, System.AsyncCallback callback, object asyncState);
        
        void EndChangeUserPassword(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/EditOperator", ReplyAction="http://tempuri.org/IServerService/EditOperatorResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/EditOperatorObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginEditOperator(System.Guid operatorId, System.Guid workplaceId, bool isInterruption, System.TimeSpan interruptionStartTime, System.TimeSpan interruptionFinishTime, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.Operator EndEditOperator(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetOffices", ReplyAction="http://tempuri.org/IServerService/GetOfficesResponse")]
        System.IAsyncResult BeginGetOffices(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Queue.Services.DTO.Office> EndGetOffices(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetOffice", ReplyAction="http://tempuri.org/IServerService/GetOfficeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/GetOfficeObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginGetOffice(System.Guid officeId, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.Office EndGetOffice(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/AddOffice", ReplyAction="http://tempuri.org/IServerService/AddOfficeResponse")]
        System.IAsyncResult BeginAddOffice(System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.Office EndAddOffice(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/EditOffice", ReplyAction="http://tempuri.org/IServerService/EditOfficeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/EditOfficeObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginEditOffice(System.Guid officeId, string name, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.Office EndEditOffice(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/EditOfficeLogin", ReplyAction="http://tempuri.org/IServerService/EditOfficeLoginResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/EditOfficeLoginObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginEditOfficeLogin(System.Guid officeId, string endpoint, System.Guid sessionId, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.Office EndEditOfficeLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/DeleteOffice", ReplyAction="http://tempuri.org/IServerService/DeleteOfficeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/DeleteOfficeObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginDeleteOffice(System.Guid officeId, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteOffice(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetWorkplacesList", ReplyAction="http://tempuri.org/IServerService/GetWorkplacesListResponse")]
        System.IAsyncResult BeginGetWorkplacesList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<System.Guid, string> EndGetWorkplacesList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetWorkplaces", ReplyAction="http://tempuri.org/IServerService/GetWorkplacesResponse")]
        System.IAsyncResult BeginGetWorkplaces(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Queue.Services.DTO.Workplace> EndGetWorkplaces(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetWorkplace", ReplyAction="http://tempuri.org/IServerService/GetWorkplaceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/GetWorkplaceObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginGetWorkplace(System.Guid workplaceId, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.Workplace EndGetWorkplace(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/AddWorkplace", ReplyAction="http://tempuri.org/IServerService/AddWorkplaceResponse")]
        System.IAsyncResult BeginAddWorkplace(System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.Workplace EndAddWorkplace(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/EditWorkplace", ReplyAction="http://tempuri.org/IServerService/EditWorkplaceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/EditWorkplaceObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginEditWorkplace(System.Guid workplaceId, Queue.Model.Common.WorkplaceType type, int number, Queue.Model.Common.WorkplaceModificator modificator, string comment, byte display, byte sections, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.Workplace EndEditWorkplace(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/DeleteWorkplace", ReplyAction="http://tempuri.org/IServerService/DeleteWorkplaceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/DeleteWorkplaceObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginDeleteWorkplace(System.Guid workplaceId, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteWorkplace(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetServiceList", ReplyAction="http://tempuri.org/IServerService/GetServiceListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/GetServiceListObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginGetServiceList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<System.Guid, string> EndGetServiceList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetRootServices", ReplyAction="http://tempuri.org/IServerService/GetRootServicesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/GetRootServicesObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginGetRootServices(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Queue.Services.DTO.Service> EndGetRootServices(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetServices", ReplyAction="http://tempuri.org/IServerService/GetServicesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/GetServicesObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginGetServices(System.Guid serviceGroupId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Queue.Services.DTO.Service> EndGetServices(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetService", ReplyAction="http://tempuri.org/IServerService/GetServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/GetServiceObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginGetService(System.Guid serviceId, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.Service EndGetService(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/FindServices", ReplyAction="http://tempuri.org/IServerService/FindServicesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/FindServicesObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginFindServices(int startIndex, int maxResults, string filter, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Queue.Services.DTO.Service> EndFindServices(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/AddRootService", ReplyAction="http://tempuri.org/IServerService/AddRootServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/AddRootServiceObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginAddRootService(System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.Service EndAddRootService(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/AddService", ReplyAction="http://tempuri.org/IServerService/AddServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/AddServiceObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginAddService(System.Guid serviceGroupId, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.Service EndAddService(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/EditService", ReplyAction="http://tempuri.org/IServerService/EditServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/EditServiceObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginEditService(
                    System.Guid serviceId, 
                    string code, 
                    int priority, 
                    string name, 
                    string comment, 
                    string tags, 
                    string description, 
                    string link, 
                    int maxSubjects, 
                    int maxEarlyDays, 
                    bool clientRequire, 
                    Queue.Model.Common.ServiceType type, 
                    Queue.Model.Common.ClientRequestRegistrator liveRegistrator, 
                    Queue.Model.Common.ClientRequestRegistrator earlyRegistrator, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        Queue.Services.DTO.Service EndEditService(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/MoveService", ReplyAction="http://tempuri.org/IServerService/MoveServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/MoveServiceObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginMoveService(System.Guid serviceId, System.Guid serviceGroupId, System.AsyncCallback callback, object asyncState);
        
        void EndMoveService(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/DeleteService", ReplyAction="http://tempuri.org/IServerService/DeleteServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/DeleteServiceObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginDeleteService(System.Guid serviceId, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteService(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/ServiceUp", ReplyAction="http://tempuri.org/IServerService/ServiceUpResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/ServiceUpObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginServiceUp(System.Guid serviceId, System.AsyncCallback callback, object asyncState);
        
        bool EndServiceUp(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/ServiceDown", ReplyAction="http://tempuri.org/IServerService/ServiceDownResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/ServiceDownObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginServiceDown(System.Guid serviceId, System.AsyncCallback callback, object asyncState);
        
        bool EndServiceDown(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/ChangeServiceActivity", ReplyAction="http://tempuri.org/IServerService/ChangeServiceActivityResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/ChangeServiceActivityObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginChangeServiceActivity(System.Guid serviceId, bool isActive, System.AsyncCallback callback, object asyncState);
        
        void EndChangeServiceActivity(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetServiceCurrentSchedule", ReplyAction="http://tempuri.org/IServerService/GetServiceCurrentScheduleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/GetServiceCurrentScheduleObjectNotFoundFaultFau" +
            "lt", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.ServiceExceptionSchedule))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.DefaultWeekdaySchedule))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.DefaultExceptionSchedule))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.ServiceWeekdaySchedule))]
        System.IAsyncResult BeginGetServiceCurrentSchedule(System.Guid serviceId, System.DateTime planDate, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.Schedule EndGetServiceCurrentSchedule(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetServiceWeekdaySchedule", ReplyAction="http://tempuri.org/IServerService/GetServiceWeekdayScheduleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/GetServiceWeekdayScheduleObjectNotFoundFaultFau" +
            "lt", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginGetServiceWeekdaySchedule(System.Guid serviceId, Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek dayOfWeek, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.ServiceWeekdaySchedule EndGetServiceWeekdaySchedule(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/EditServiceWeekdaySchedule", ReplyAction="http://tempuri.org/IServerService/EditServiceWeekdayScheduleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/EditServiceWeekdayScheduleObjectNotFoundFaultFa" +
            "ult", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginEditServiceWeekdaySchedule(
                    System.Guid serviceId, 
                    Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek dayOfWeek, 
                    System.TimeSpan startTime, 
                    System.TimeSpan finishTime, 
                    bool isWorked, 
                    bool isInterruption, 
                    System.TimeSpan interruptionStartTime, 
                    System.TimeSpan interruptionFinishTime, 
                    System.TimeSpan clientInterval, 
                    System.TimeSpan intersection, 
                    Queue.Model.Common.ServiceRenderingMode renderingMode, 
                    System.TimeSpan earlyStartTime, 
                    System.TimeSpan earlyFinishTime, 
                    int earlyReservation, 
                    int maxClientRequests, 
                    System.Collections.Generic.Dictionary<System.Guid, Queue.Model.Common.ServiceRenderingMode> renderings, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        Queue.Services.DTO.ServiceWeekdaySchedule EndEditServiceWeekdaySchedule(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/DeleteServiceWeekdaySchedule", ReplyAction="http://tempuri.org/IServerService/DeleteServiceWeekdayScheduleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/DeleteServiceWeekdayScheduleObjectNotFoundFault" +
            "Fault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginDeleteServiceWeekdaySchedule(System.Guid serviceId, Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek dayOfWeek, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteServiceWeekdaySchedule(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetServiceExceptionSchedule", ReplyAction="http://tempuri.org/IServerService/GetServiceExceptionScheduleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/GetServiceExceptionScheduleObjectNotFoundFaultF" +
            "ault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginGetServiceExceptionSchedule(System.Guid serviceId, System.DateTime scheduleDate, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.ServiceExceptionSchedule EndGetServiceExceptionSchedule(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/EditServiceExceptionSchedule", ReplyAction="http://tempuri.org/IServerService/EditServiceExceptionScheduleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/EditServiceExceptionScheduleObjectNotFoundFault" +
            "Fault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginEditServiceExceptionSchedule(
                    System.Guid serviceId, 
                    System.DateTime scheduleDate, 
                    System.TimeSpan startTime, 
                    System.TimeSpan finishTime, 
                    bool isWorked, 
                    bool isInterruption, 
                    System.TimeSpan interruptionStartTime, 
                    System.TimeSpan interruptionFinishTime, 
                    System.TimeSpan clientInterval, 
                    System.TimeSpan intersection, 
                    Queue.Model.Common.ServiceRenderingMode renderingMode, 
                    System.TimeSpan earlyStartTime, 
                    System.TimeSpan earlyFinishTime, 
                    int earlyReservation, 
                    int maxClientRequests, 
                    System.Collections.Generic.Dictionary<System.Guid, Queue.Model.Common.ServiceRenderingMode> renderings, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        Queue.Services.DTO.ServiceExceptionSchedule EndEditServiceExceptionSchedule(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/DeleteServiceExceptionSchedule", ReplyAction="http://tempuri.org/IServerService/DeleteServiceExceptionScheduleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/DeleteServiceExceptionScheduleObjectNotFoundFau" +
            "ltFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginDeleteServiceExceptionSchedule(System.Guid serviceId, System.DateTime scheduleDate, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteServiceExceptionSchedule(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetDefaultWeekdaySchedule", ReplyAction="http://tempuri.org/IServerService/GetDefaultWeekdayScheduleResponse")]
        System.IAsyncResult BeginGetDefaultWeekdaySchedule(Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek dayOfWeek, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.DefaultWeekdaySchedule EndGetDefaultWeekdaySchedule(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/EditDefaultWeekdaySchedule", ReplyAction="http://tempuri.org/IServerService/EditDefaultWeekdayScheduleResponse")]
        System.IAsyncResult BeginEditDefaultWeekdaySchedule(
                    Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek dayOfWeek, 
                    System.TimeSpan startTime, 
                    System.TimeSpan finishTime, 
                    bool isWorked, 
                    bool isInterruption, 
                    System.TimeSpan interruptionStartTime, 
                    System.TimeSpan interruptionFinishTime, 
                    System.TimeSpan clientInterval, 
                    System.TimeSpan intersection, 
                    Queue.Model.Common.ServiceRenderingMode renderingMode, 
                    System.TimeSpan earlyStartTime, 
                    System.TimeSpan earlyFinishTime, 
                    int earlyReservation, 
                    int maxClientRequests, 
                    System.Collections.Generic.Dictionary<System.Guid, Queue.Model.Common.ServiceRenderingMode> renderings, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        Queue.Services.DTO.DefaultWeekdaySchedule EndEditDefaultWeekdaySchedule(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetDefaultExceptionSchedule", ReplyAction="http://tempuri.org/IServerService/GetDefaultExceptionScheduleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/GetDefaultExceptionScheduleObjectNotFoundFaultF" +
            "ault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginGetDefaultExceptionSchedule(System.DateTime scheduleDate, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.DefaultExceptionSchedule EndGetDefaultExceptionSchedule(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/EditDefaultExceptionSchedule", ReplyAction="http://tempuri.org/IServerService/EditDefaultExceptionScheduleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/EditDefaultExceptionScheduleObjectNotFoundFault" +
            "Fault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginEditDefaultExceptionSchedule(
                    System.DateTime scheduleDate, 
                    System.TimeSpan startTime, 
                    System.TimeSpan finishTime, 
                    bool isWorked, 
                    bool isInterruption, 
                    System.TimeSpan interruptionStartTime, 
                    System.TimeSpan interruptionFinishTime, 
                    System.TimeSpan clientInterval, 
                    System.TimeSpan intersection, 
                    Queue.Model.Common.ServiceRenderingMode renderingMode, 
                    System.TimeSpan earlyStartTime, 
                    System.TimeSpan earlyFinishTime, 
                    int earlyReservation, 
                    int maxClientRequests, 
                    System.Collections.Generic.Dictionary<System.Guid, Queue.Model.Common.ServiceRenderingMode> renderings, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        Queue.Services.DTO.DefaultExceptionSchedule EndEditDefaultExceptionSchedule(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/DeleteDefaultExceptionSchedule", ReplyAction="http://tempuri.org/IServerService/DeleteDefaultExceptionScheduleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/DeleteDefaultExceptionScheduleObjectNotFoundFau" +
            "ltFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginDeleteDefaultExceptionSchedule(System.DateTime scheduleDate, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteDefaultExceptionSchedule(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetServiceParameters", ReplyAction="http://tempuri.org/IServerService/GetServiceParametersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/GetServiceParametersObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginGetServiceParameters(System.Guid serviceId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Queue.Services.DTO.ServiceParameter> EndGetServiceParameters(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/AddServiceParameter", ReplyAction="http://tempuri.org/IServerService/AddServiceParameterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/AddServiceParameterObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.ServiceParameterOptions))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.ServiceParameterNumber))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.ServiceParameterText))]
        System.IAsyncResult BeginAddServiceParameter(System.Guid serviceId, Queue.Model.Common.ServiceParameterType type, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.ServiceParameter EndAddServiceParameter(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/EditNumberServiceParameter", ReplyAction="http://tempuri.org/IServerService/EditNumberServiceParameterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/EditNumberServiceParameterObjectNotFoundFaultFa" +
            "ult", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.ServiceParameterOptions))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.ServiceParameterNumber))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.ServiceParameterText))]
        System.IAsyncResult BeginEditNumberServiceParameter(System.Guid parameterId, string name, string tooltip, bool isRequire, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.ServiceParameter EndEditNumberServiceParameter(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/EditTextServiceParameter", ReplyAction="http://tempuri.org/IServerService/EditTextServiceParameterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/EditTextServiceParameterObjectNotFoundFaultFaul" +
            "t", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.ServiceParameterOptions))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.ServiceParameterNumber))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.ServiceParameterText))]
        System.IAsyncResult BeginEditTextServiceParameter(System.Guid parameterId, string name, string tooltip, bool isRequire, int minLength, int maxLength, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.ServiceParameter EndEditTextServiceParameter(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/EditOptionsServiceParameter", ReplyAction="http://tempuri.org/IServerService/EditOptionsServiceParameterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/EditOptionsServiceParameterObjectNotFoundFaultF" +
            "ault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.ServiceParameterOptions))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.ServiceParameterNumber))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.ServiceParameterText))]
        System.IAsyncResult BeginEditOptionsServiceParameter(System.Guid parameterId, string name, string tooltip, bool isRequire, string options, bool isMultiple, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.ServiceParameter EndEditOptionsServiceParameter(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/DeleteServiceParameter", ReplyAction="http://tempuri.org/IServerService/DeleteServiceParameterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/DeleteServiceParameterObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginDeleteServiceParameter(System.Guid serviceParameterId, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteServiceParameter(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetServiceRatingReport", ReplyAction="http://tempuri.org/IServerService/GetServiceRatingReportResponse")]
        System.IAsyncResult BeginGetServiceRatingReport(System.Collections.Generic.List<System.Guid> servicesIds, Queue.Model.Common.ServiceRatingReportDetailLavel detailLavel, Queue.Model.Common.ServiceRatingReportSettings settings, System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetServiceRatingReport(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetExceptionScheduleReport", ReplyAction="http://tempuri.org/IServerService/GetExceptionScheduleReportResponse")]
        System.IAsyncResult BeginGetExceptionScheduleReport(System.DateTime fromDate, System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetExceptionScheduleReport(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetClientRequestReport", ReplyAction="http://tempuri.org/IServerService/GetClientRequestReportResponse")]
        System.IAsyncResult BeginGetClientRequestReport(System.Guid clientRequestId, System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetClientRequestReport(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetDefaultConfig", ReplyAction="http://tempuri.org/IServerService/GetDefaultConfigResponse")]
        System.IAsyncResult BeginGetDefaultConfig(System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.DefaultConfig EndGetDefaultConfig(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/EditDefaultConfig", ReplyAction="http://tempuri.org/IServerService/EditDefaultConfigResponse")]
        System.IAsyncResult BeginEditDefaultConfig(string queueName, System.TimeSpan workStartTime, System.TimeSpan workFinishTime, int maxClientRequests, int maxRenderingTime, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.DefaultConfig EndEditDefaultConfig(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetDesignConfig", ReplyAction="http://tempuri.org/IServerService/GetDesignConfigResponse")]
        System.IAsyncResult BeginGetDesignConfig(System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.DesignConfig EndGetDesignConfig(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/EditDesignConfig", ReplyAction="http://tempuri.org/IServerService/EditDesignConfigResponse")]
        System.IAsyncResult BeginEditDesignConfig(byte[] logoSmall, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.DesignConfig EndEditDesignConfig(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetCouponConfig", ReplyAction="http://tempuri.org/IServerService/GetCouponConfigResponse")]
        System.IAsyncResult BeginGetCouponConfig(System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.CouponConfig EndGetCouponConfig(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetCouponTemplate", ReplyAction="http://tempuri.org/IServerService/GetCouponTemplateResponse")]
        System.IAsyncResult BeginGetCouponTemplate(System.AsyncCallback callback, object asyncState);
        
        string EndGetCouponTemplate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/EditCouponConfig", ReplyAction="http://tempuri.org/IServerService/EditCouponConfigResponse")]
        System.IAsyncResult BeginEditCouponConfig(string template, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.CouponConfig EndEditCouponConfig(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetSMTPConfig", ReplyAction="http://tempuri.org/IServerService/GetSMTPConfigResponse")]
        System.IAsyncResult BeginGetSMTPConfig(System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.SMTPConfig EndGetSMTPConfig(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/EditSMTPConfig", ReplyAction="http://tempuri.org/IServerService/EditSMTPConfigResponse")]
        System.IAsyncResult BeginEditSMTPConfig(string server, string user, string password, string from, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.SMTPConfig EndEditSMTPConfig(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetPortalConfig", ReplyAction="http://tempuri.org/IServerService/GetPortalConfigResponse")]
        System.IAsyncResult BeginGetPortalConfig(System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.PortalConfig EndGetPortalConfig(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/EditPortalConfig", ReplyAction="http://tempuri.org/IServerService/EditPortalConfigResponse")]
        System.IAsyncResult BeginEditPortalConfig(string header, string footer, bool currentDayRecording, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.PortalConfig EndEditPortalConfig(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetMediaConfig", ReplyAction="http://tempuri.org/IServerService/GetMediaConfigResponse")]
        System.IAsyncResult BeginGetMediaConfig(System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.MediaConfig EndGetMediaConfig(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/EditMediaConfig", ReplyAction="http://tempuri.org/IServerService/EditMediaConfigResponse")]
        System.IAsyncResult BeginEditMediaConfig(string serviceUrl, string ticker, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.MediaConfig EndEditMediaConfig(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/AddMediaConfigFile", ReplyAction="http://tempuri.org/IServerService/AddMediaConfigFileResponse")]
        System.IAsyncResult BeginAddMediaConfigFile(System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.MediaConfigFile EndAddMediaConfigFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/EditMediaConfigFile", ReplyAction="http://tempuri.org/IServerService/EditMediaConfigFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/EditMediaConfigFileObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginEditMediaConfigFile(System.Guid mediaConfigFileId, string name, System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.MediaConfigFile EndEditMediaConfigFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/DeleteMediaConfigFile", ReplyAction="http://tempuri.org/IServerService/DeleteMediaConfigFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Operator.Silverlight.QueueRemoteService.ObjectNotFoundFault), Action="http://tempuri.org/IServerService/DeleteMediaConfigFileObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        System.IAsyncResult BeginDeleteMediaConfigFile(System.Guid mediaConfigFileId, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteMediaConfigFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServerService/GetTerminalConfig", ReplyAction="http://tempuri.org/IServerService/GetTerminalConfigResponse")]
        System.IAsyncResult BeginGetTerminalConfig(System.AsyncCallback callback, object asyncState);
        
        Queue.Services.DTO.TerminalConfig EndGetTerminalConfig(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServerServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/CallClient")]
        void CallClient(Queue.Services.DTO.ClientRequest clientRequest);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/ClientRequestUpdated")]
        void ClientRequestUpdated(Queue.Services.DTO.ClientRequest clientRequest);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/CurrentClientRequestUpdated")]
        void CurrentClientRequestUpdated(Queue.Services.DTO.ClientRequest clientRequest, Queue.Services.DTO.Operator queueOperator);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/OperatorPlanMetricsUpdated")]
        void OperatorPlanMetricsUpdated(Queue.Services.DTO.OperatorPlanMetrics operatorPlanMetrics);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/ConfigUpdated")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.DesignConfig))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.DefaultConfig))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.NotificationConfig))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.CouponConfig))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.SMTPConfig))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.PortalConfig))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.MediaConfig))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.TerminalConfig))]
        void ConfigUpdated(Queue.Services.DTO.Config config);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/Event")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.ClientRequestEvent))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Queue.Services.DTO.UserEvent))]
        void Event(Queue.Services.DTO.Event queueEvent);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServerServiceChannel : Queue.Operator.Silverlight.QueueRemoteService.IServerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditTerminalConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditTerminalConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.TerminalConfig Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.TerminalConfig)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNotificationConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNotificationConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.NotificationConfig Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.NotificationConfig)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditNotificationConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditNotificationConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.NotificationConfig Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.NotificationConfig)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetQueuePlanMetricCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetQueuePlanMetricCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.QueuePlanMetric Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.QueuePlanMetric)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetQueuePlanServiceMetricCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetQueuePlanServiceMetricCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.QueuePlanServiceMetric Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.QueuePlanServiceMetric)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDateTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDateTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.DateTime Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsSubscribedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsSubscribedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.Client Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.Client)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OpenClientSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public OpenClientSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.Client Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.Client)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetClientByIdentityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetClientByIdentityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.Client Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.Client)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FindClientsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindClientsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Queue.Services.DTO.Client> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Queue.Services.DTO.Client>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.Client Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.Client)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClientLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ClientLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.Client Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.Client)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.Client Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.Client)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FindClientRequestsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindClientRequestsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Queue.Services.DTO.ClientRequest> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Queue.Services.DTO.ClientRequest>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetClientRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetClientRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.ClientRequest Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.ClientRequest)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetClientRequestEventsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetClientRequestEventsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Queue.Services.DTO.ClientRequestEvent> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Queue.Services.DTO.ClientRequestEvent>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddEarlyClientRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddEarlyClientRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.ClientRequest Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.ClientRequest)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddLiveClientRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddLiveClientRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.ClientRequest Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.ClientRequest)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetClientRequestCouponCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetClientRequestCouponCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangeClientRequestPriorityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChangeClientRequestPriorityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.ClientRequest Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.ClientRequest)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangeClientRequestSubjectsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChangeClientRequestSubjectsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.ClientRequest Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.ClientRequest)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangeClientRequestServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChangeClientRequestServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.ClientRequest Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.ClientRequest)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangeClientRequestOperatorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChangeClientRequestOperatorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.ClientRequest Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.ClientRequest)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CancelClientRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CancelClientRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.ClientRequest Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.ClientRequest)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RestoreClientRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RestoreClientRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.ClientRequest Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.ClientRequest)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PostponeClientRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PostponeClientRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.ClientRequest Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.ClientRequest)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOperatorClientRequestPlansCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOperatorClientRequestPlansCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Queue.Services.DTO.ClientRequestPlan> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Queue.Services.DTO.ClientRequestPlan>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCurrentClientRequestsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCurrentClientRequestsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Queue.Services.DTO.ClientRequest> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Queue.Services.DTO.ClientRequest>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCurrentClientRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCurrentClientRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.ClientRequest Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.ClientRequest)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangeCurrentClientRequestServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChangeCurrentClientRequestServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.ClientRequest Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.ClientRequest)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangeCurrentClientRequestServiceTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChangeCurrentClientRequestServiceTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.ClientRequest Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.ClientRequest)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetQueuePlanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetQueuePlanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.QueuePlan Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.QueuePlan)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFreeTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFreeTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.ServiceFreeTime Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.ServiceFreeTime)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRootServiceGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRootServiceGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Queue.Services.DTO.ServiceGroup> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Queue.Services.DTO.ServiceGroup>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetServiceGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetServiceGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Queue.Services.DTO.ServiceGroup> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Queue.Services.DTO.ServiceGroup>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetServiceGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetServiceGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.ServiceGroup Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.ServiceGroup)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddRootServiceGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddRootServiceGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.ServiceGroup Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.ServiceGroup)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddServiceGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddServiceGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.ServiceGroup Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.ServiceGroup)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditServiceGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditServiceGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.ServiceGroup Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.ServiceGroup)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceGroupUpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ServiceGroupUpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceGroupDownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ServiceGroupDownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceGroupActivateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ServiceGroupActivateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceGroupDeactivateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ServiceGroupDeactivateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OpenUserSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public OpenUserSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.User Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.User)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Queue.Services.DTO.User> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Queue.Services.DTO.User>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.User Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.User)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<System.Guid, string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<System.Guid, string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UserLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.User Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.User)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.User Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.User)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.User Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.User)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditOperatorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditOperatorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.Operator Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.Operator)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOfficesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOfficesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Queue.Services.DTO.Office> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Queue.Services.DTO.Office>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOfficeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOfficeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.Office Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.Office)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddOfficeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddOfficeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.Office Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.Office)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditOfficeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditOfficeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.Office Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.Office)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditOfficeLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditOfficeLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.Office Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.Office)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetWorkplacesListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWorkplacesListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<System.Guid, string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<System.Guid, string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetWorkplacesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWorkplacesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Queue.Services.DTO.Workplace> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Queue.Services.DTO.Workplace>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetWorkplaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWorkplaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.Workplace Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.Workplace)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddWorkplaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddWorkplaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.Workplace Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.Workplace)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditWorkplaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditWorkplaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.Workplace Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.Workplace)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetServiceListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetServiceListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<System.Guid, string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<System.Guid, string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRootServicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRootServicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Queue.Services.DTO.Service> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Queue.Services.DTO.Service>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetServicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetServicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Queue.Services.DTO.Service> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Queue.Services.DTO.Service>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.Service Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.Service)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FindServicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindServicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Queue.Services.DTO.Service> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Queue.Services.DTO.Service>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddRootServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddRootServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.Service Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.Service)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.Service Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.Service)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.Service Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.Service)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceUpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ServiceUpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceDownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ServiceDownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetServiceCurrentScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetServiceCurrentScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.Schedule Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.Schedule)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetServiceWeekdayScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetServiceWeekdayScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.ServiceWeekdaySchedule Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.ServiceWeekdaySchedule)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditServiceWeekdayScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditServiceWeekdayScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.ServiceWeekdaySchedule Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.ServiceWeekdaySchedule)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetServiceExceptionScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetServiceExceptionScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.ServiceExceptionSchedule Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.ServiceExceptionSchedule)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditServiceExceptionScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditServiceExceptionScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.ServiceExceptionSchedule Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.ServiceExceptionSchedule)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDefaultWeekdayScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDefaultWeekdayScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.DefaultWeekdaySchedule Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.DefaultWeekdaySchedule)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditDefaultWeekdayScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditDefaultWeekdayScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.DefaultWeekdaySchedule Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.DefaultWeekdaySchedule)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDefaultExceptionScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDefaultExceptionScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.DefaultExceptionSchedule Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.DefaultExceptionSchedule)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditDefaultExceptionScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditDefaultExceptionScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.DefaultExceptionSchedule Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.DefaultExceptionSchedule)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetServiceParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetServiceParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Queue.Services.DTO.ServiceParameter> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Queue.Services.DTO.ServiceParameter>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddServiceParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddServiceParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.ServiceParameter Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.ServiceParameter)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditNumberServiceParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditNumberServiceParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.ServiceParameter Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.ServiceParameter)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditTextServiceParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditTextServiceParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.ServiceParameter Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.ServiceParameter)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditOptionsServiceParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditOptionsServiceParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.ServiceParameter Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.ServiceParameter)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetServiceRatingReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetServiceRatingReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetExceptionScheduleReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetExceptionScheduleReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetClientRequestReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetClientRequestReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDefaultConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDefaultConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.DefaultConfig Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.DefaultConfig)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditDefaultConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditDefaultConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.DefaultConfig Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.DefaultConfig)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDesignConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDesignConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.DesignConfig Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.DesignConfig)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditDesignConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditDesignConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.DesignConfig Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.DesignConfig)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCouponConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCouponConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.CouponConfig Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.CouponConfig)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCouponTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCouponTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditCouponConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditCouponConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.CouponConfig Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.CouponConfig)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSMTPConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSMTPConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.SMTPConfig Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.SMTPConfig)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditSMTPConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditSMTPConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.SMTPConfig Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.SMTPConfig)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPortalConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPortalConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.PortalConfig Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.PortalConfig)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditPortalConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditPortalConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.PortalConfig Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.PortalConfig)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMediaConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMediaConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.MediaConfig Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.MediaConfig)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditMediaConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditMediaConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.MediaConfig Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.MediaConfig)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddMediaConfigFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddMediaConfigFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.MediaConfigFile Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.MediaConfigFile)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditMediaConfigFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditMediaConfigFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.MediaConfigFile Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.MediaConfigFile)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTerminalConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTerminalConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.TerminalConfig Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.TerminalConfig)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServerServiceClient : System.ServiceModel.DuplexClientBase<Queue.Operator.Silverlight.QueueRemoteService.IServerService>, Queue.Operator.Silverlight.QueueRemoteService.IServerService {
        
        private BeginOperationDelegate onBeginEditTerminalConfigDelegate;
        
        private EndOperationDelegate onEndEditTerminalConfigDelegate;
        
        private System.Threading.SendOrPostCallback onEditTerminalConfigCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNotificationConfigDelegate;
        
        private EndOperationDelegate onEndGetNotificationConfigDelegate;
        
        private System.Threading.SendOrPostCallback onGetNotificationConfigCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditNotificationConfigDelegate;
        
        private EndOperationDelegate onEndEditNotificationConfigDelegate;
        
        private System.Threading.SendOrPostCallback onEditNotificationConfigCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetQueuePlanMetricDelegate;
        
        private EndOperationDelegate onEndGetQueuePlanMetricDelegate;
        
        private System.Threading.SendOrPostCallback onGetQueuePlanMetricCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetQueuePlanServiceMetricDelegate;
        
        private EndOperationDelegate onEndGetQueuePlanServiceMetricDelegate;
        
        private System.Threading.SendOrPostCallback onGetQueuePlanServiceMetricCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDateTimeDelegate;
        
        private EndOperationDelegate onEndGetDateTimeDelegate;
        
        private System.Threading.SendOrPostCallback onGetDateTimeCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsSubscribedDelegate;
        
        private EndOperationDelegate onEndIsSubscribedDelegate;
        
        private System.Threading.SendOrPostCallback onIsSubscribedCompletedDelegate;
        
        private BeginOperationDelegate onBeginSubscribeDelegate;
        
        private EndOperationDelegate onEndSubscribeDelegate;
        
        private System.Threading.SendOrPostCallback onSubscribeCompletedDelegate;
        
        private BeginOperationDelegate onBeginUnSubscribeDelegate;
        
        private EndOperationDelegate onEndUnSubscribeDelegate;
        
        private System.Threading.SendOrPostCallback onUnSubscribeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetClientDelegate;
        
        private EndOperationDelegate onEndGetClientDelegate;
        
        private System.Threading.SendOrPostCallback onGetClientCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenClientSessionDelegate;
        
        private EndOperationDelegate onEndOpenClientSessionDelegate;
        
        private System.Threading.SendOrPostCallback onOpenClientSessionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetClientByIdentityDelegate;
        
        private EndOperationDelegate onEndGetClientByIdentityDelegate;
        
        private System.Threading.SendOrPostCallback onGetClientByIdentityCompletedDelegate;
        
        private BeginOperationDelegate onBeginFindClientsDelegate;
        
        private EndOperationDelegate onEndFindClientsDelegate;
        
        private System.Threading.SendOrPostCallback onFindClientsCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddClientDelegate;
        
        private EndOperationDelegate onEndAddClientDelegate;
        
        private System.Threading.SendOrPostCallback onAddClientCompletedDelegate;
        
        private BeginOperationDelegate onBeginClientLoginDelegate;
        
        private EndOperationDelegate onEndClientLoginDelegate;
        
        private System.Threading.SendOrPostCallback onClientLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginClientRestorePasswordDelegate;
        
        private EndOperationDelegate onEndClientRestorePasswordDelegate;
        
        private System.Threading.SendOrPostCallback onClientRestorePasswordCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditClientDelegate;
        
        private EndOperationDelegate onEndEditClientDelegate;
        
        private System.Threading.SendOrPostCallback onEditClientCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangeClientPasswordDelegate;
        
        private EndOperationDelegate onEndChangeClientPasswordDelegate;
        
        private System.Threading.SendOrPostCallback onChangeClientPasswordCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteClientDelegate;
        
        private EndOperationDelegate onEndDeleteClientDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteClientCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendPINToEmailDelegate;
        
        private EndOperationDelegate onEndSendPINToEmailDelegate;
        
        private System.Threading.SendOrPostCallback onSendPINToEmailCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckPINDelegate;
        
        private EndOperationDelegate onEndCheckPINDelegate;
        
        private System.Threading.SendOrPostCallback onCheckPINCompletedDelegate;
        
        private BeginOperationDelegate onBeginFindClientRequestsDelegate;
        
        private EndOperationDelegate onEndFindClientRequestsDelegate;
        
        private System.Threading.SendOrPostCallback onFindClientRequestsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetClientRequestDelegate;
        
        private EndOperationDelegate onEndGetClientRequestDelegate;
        
        private System.Threading.SendOrPostCallback onGetClientRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetClientRequestEventsDelegate;
        
        private EndOperationDelegate onEndGetClientRequestEventsDelegate;
        
        private System.Threading.SendOrPostCallback onGetClientRequestEventsCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddEarlyClientRequestDelegate;
        
        private EndOperationDelegate onEndAddEarlyClientRequestDelegate;
        
        private System.Threading.SendOrPostCallback onAddEarlyClientRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddLiveClientRequestDelegate;
        
        private EndOperationDelegate onEndAddLiveClientRequestDelegate;
        
        private System.Threading.SendOrPostCallback onAddLiveClientRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetClientRequestCouponDelegate;
        
        private EndOperationDelegate onEndGetClientRequestCouponDelegate;
        
        private System.Threading.SendOrPostCallback onGetClientRequestCouponCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangeClientRequestPriorityDelegate;
        
        private EndOperationDelegate onEndChangeClientRequestPriorityDelegate;
        
        private System.Threading.SendOrPostCallback onChangeClientRequestPriorityCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangeClientRequestSubjectsDelegate;
        
        private EndOperationDelegate onEndChangeClientRequestSubjectsDelegate;
        
        private System.Threading.SendOrPostCallback onChangeClientRequestSubjectsCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangeClientRequestServiceDelegate;
        
        private EndOperationDelegate onEndChangeClientRequestServiceDelegate;
        
        private System.Threading.SendOrPostCallback onChangeClientRequestServiceCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangeClientRequestOperatorDelegate;
        
        private EndOperationDelegate onEndChangeClientRequestOperatorDelegate;
        
        private System.Threading.SendOrPostCallback onChangeClientRequestOperatorCompletedDelegate;
        
        private BeginOperationDelegate onBeginCancelClientRequestDelegate;
        
        private EndOperationDelegate onEndCancelClientRequestDelegate;
        
        private System.Threading.SendOrPostCallback onCancelClientRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginRestoreClientRequestDelegate;
        
        private EndOperationDelegate onEndRestoreClientRequestDelegate;
        
        private System.Threading.SendOrPostCallback onRestoreClientRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginPostponeClientRequestDelegate;
        
        private EndOperationDelegate onEndPostponeClientRequestDelegate;
        
        private System.Threading.SendOrPostCallback onPostponeClientRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOperatorClientRequestPlansDelegate;
        
        private EndOperationDelegate onEndGetOperatorClientRequestPlansDelegate;
        
        private System.Threading.SendOrPostCallback onGetOperatorClientRequestPlansCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCurrentClientRequestsDelegate;
        
        private EndOperationDelegate onEndGetCurrentClientRequestsDelegate;
        
        private System.Threading.SendOrPostCallback onGetCurrentClientRequestsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCurrentClientRequestDelegate;
        
        private EndOperationDelegate onEndGetCurrentClientRequestDelegate;
        
        private System.Threading.SendOrPostCallback onGetCurrentClientRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateCurrentClientRequestDelegate;
        
        private EndOperationDelegate onEndUpdateCurrentClientRequestDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateCurrentClientRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginPostponeCurrentClientRequestDelegate;
        
        private EndOperationDelegate onEndPostponeCurrentClientRequestDelegate;
        
        private System.Threading.SendOrPostCallback onPostponeCurrentClientRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginReturnCurrentClientRequestDelegate;
        
        private EndOperationDelegate onEndReturnCurrentClientRequestDelegate;
        
        private System.Threading.SendOrPostCallback onReturnCurrentClientRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangeCurrentClientRequestServiceDelegate;
        
        private EndOperationDelegate onEndChangeCurrentClientRequestServiceDelegate;
        
        private System.Threading.SendOrPostCallback onChangeCurrentClientRequestServiceCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangeCurrentClientRequestServiceTypeDelegate;
        
        private EndOperationDelegate onEndChangeCurrentClientRequestServiceTypeDelegate;
        
        private System.Threading.SendOrPostCallback onChangeCurrentClientRequestServiceTypeCompletedDelegate;
        
        private BeginOperationDelegate onBeginCallCurrentClientDelegate;
        
        private EndOperationDelegate onEndCallCurrentClientDelegate;
        
        private System.Threading.SendOrPostCallback onCallCurrentClientCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetQueuePlanDelegate;
        
        private EndOperationDelegate onEndGetQueuePlanDelegate;
        
        private System.Threading.SendOrPostCallback onGetQueuePlanCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFreeTimeDelegate;
        
        private EndOperationDelegate onEndGetFreeTimeDelegate;
        
        private System.Threading.SendOrPostCallback onGetFreeTimeCompletedDelegate;
        
        private BeginOperationDelegate onBeginRefreshTodayQueuePlanDelegate;
        
        private EndOperationDelegate onEndRefreshTodayQueuePlanDelegate;
        
        private System.Threading.SendOrPostCallback onRefreshTodayQueuePlanCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRootServiceGroupsDelegate;
        
        private EndOperationDelegate onEndGetRootServiceGroupsDelegate;
        
        private System.Threading.SendOrPostCallback onGetRootServiceGroupsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetServiceGroupsDelegate;
        
        private EndOperationDelegate onEndGetServiceGroupsDelegate;
        
        private System.Threading.SendOrPostCallback onGetServiceGroupsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetServiceGroupDelegate;
        
        private EndOperationDelegate onEndGetServiceGroupDelegate;
        
        private System.Threading.SendOrPostCallback onGetServiceGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddRootServiceGroupDelegate;
        
        private EndOperationDelegate onEndAddRootServiceGroupDelegate;
        
        private System.Threading.SendOrPostCallback onAddRootServiceGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddServiceGroupDelegate;
        
        private EndOperationDelegate onEndAddServiceGroupDelegate;
        
        private System.Threading.SendOrPostCallback onAddServiceGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditServiceGroupDelegate;
        
        private EndOperationDelegate onEndEditServiceGroupDelegate;
        
        private System.Threading.SendOrPostCallback onEditServiceGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginMoveServiceGroupDelegate;
        
        private EndOperationDelegate onEndMoveServiceGroupDelegate;
        
        private System.Threading.SendOrPostCallback onMoveServiceGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginMoveServiceGroupToRootDelegate;
        
        private EndOperationDelegate onEndMoveServiceGroupToRootDelegate;
        
        private System.Threading.SendOrPostCallback onMoveServiceGroupToRootCompletedDelegate;
        
        private BeginOperationDelegate onBeginServiceGroupUpDelegate;
        
        private EndOperationDelegate onEndServiceGroupUpDelegate;
        
        private System.Threading.SendOrPostCallback onServiceGroupUpCompletedDelegate;
        
        private BeginOperationDelegate onBeginServiceGroupDownDelegate;
        
        private EndOperationDelegate onEndServiceGroupDownDelegate;
        
        private System.Threading.SendOrPostCallback onServiceGroupDownCompletedDelegate;
        
        private BeginOperationDelegate onBeginServiceGroupActivateDelegate;
        
        private EndOperationDelegate onEndServiceGroupActivateDelegate;
        
        private System.Threading.SendOrPostCallback onServiceGroupActivateCompletedDelegate;
        
        private BeginOperationDelegate onBeginServiceGroupDeactivateDelegate;
        
        private EndOperationDelegate onEndServiceGroupDeactivateDelegate;
        
        private System.Threading.SendOrPostCallback onServiceGroupDeactivateCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteServiceGroupDelegate;
        
        private EndOperationDelegate onEndDeleteServiceGroupDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteServiceGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenUserSessionDelegate;
        
        private EndOperationDelegate onEndOpenUserSessionDelegate;
        
        private System.Threading.SendOrPostCallback onOpenUserSessionCompletedDelegate;
        
        private BeginOperationDelegate onBeginUserHeartbeatDelegate;
        
        private EndOperationDelegate onEndUserHeartbeatDelegate;
        
        private System.Threading.SendOrPostCallback onUserHeartbeatCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUsersDelegate;
        
        private EndOperationDelegate onEndGetUsersDelegate;
        
        private System.Threading.SendOrPostCallback onGetUsersCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserDelegate;
        
        private EndOperationDelegate onEndGetUserDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserListDelegate;
        
        private EndOperationDelegate onEndGetUserListDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserListCompletedDelegate;
        
        private BeginOperationDelegate onBeginUserLoginDelegate;
        
        private EndOperationDelegate onEndUserLoginDelegate;
        
        private System.Threading.SendOrPostCallback onUserLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddUserDelegate;
        
        private EndOperationDelegate onEndAddUserDelegate;
        
        private System.Threading.SendOrPostCallback onAddUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditUserDelegate;
        
        private EndOperationDelegate onEndEditUserDelegate;
        
        private System.Threading.SendOrPostCallback onEditUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteUserDelegate;
        
        private EndOperationDelegate onEndDeleteUserDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangeUserPasswordDelegate;
        
        private EndOperationDelegate onEndChangeUserPasswordDelegate;
        
        private System.Threading.SendOrPostCallback onChangeUserPasswordCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditOperatorDelegate;
        
        private EndOperationDelegate onEndEditOperatorDelegate;
        
        private System.Threading.SendOrPostCallback onEditOperatorCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOfficesDelegate;
        
        private EndOperationDelegate onEndGetOfficesDelegate;
        
        private System.Threading.SendOrPostCallback onGetOfficesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOfficeDelegate;
        
        private EndOperationDelegate onEndGetOfficeDelegate;
        
        private System.Threading.SendOrPostCallback onGetOfficeCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddOfficeDelegate;
        
        private EndOperationDelegate onEndAddOfficeDelegate;
        
        private System.Threading.SendOrPostCallback onAddOfficeCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditOfficeDelegate;
        
        private EndOperationDelegate onEndEditOfficeDelegate;
        
        private System.Threading.SendOrPostCallback onEditOfficeCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditOfficeLoginDelegate;
        
        private EndOperationDelegate onEndEditOfficeLoginDelegate;
        
        private System.Threading.SendOrPostCallback onEditOfficeLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteOfficeDelegate;
        
        private EndOperationDelegate onEndDeleteOfficeDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteOfficeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetWorkplacesListDelegate;
        
        private EndOperationDelegate onEndGetWorkplacesListDelegate;
        
        private System.Threading.SendOrPostCallback onGetWorkplacesListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetWorkplacesDelegate;
        
        private EndOperationDelegate onEndGetWorkplacesDelegate;
        
        private System.Threading.SendOrPostCallback onGetWorkplacesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetWorkplaceDelegate;
        
        private EndOperationDelegate onEndGetWorkplaceDelegate;
        
        private System.Threading.SendOrPostCallback onGetWorkplaceCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddWorkplaceDelegate;
        
        private EndOperationDelegate onEndAddWorkplaceDelegate;
        
        private System.Threading.SendOrPostCallback onAddWorkplaceCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditWorkplaceDelegate;
        
        private EndOperationDelegate onEndEditWorkplaceDelegate;
        
        private System.Threading.SendOrPostCallback onEditWorkplaceCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteWorkplaceDelegate;
        
        private EndOperationDelegate onEndDeleteWorkplaceDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteWorkplaceCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetServiceListDelegate;
        
        private EndOperationDelegate onEndGetServiceListDelegate;
        
        private System.Threading.SendOrPostCallback onGetServiceListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRootServicesDelegate;
        
        private EndOperationDelegate onEndGetRootServicesDelegate;
        
        private System.Threading.SendOrPostCallback onGetRootServicesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetServicesDelegate;
        
        private EndOperationDelegate onEndGetServicesDelegate;
        
        private System.Threading.SendOrPostCallback onGetServicesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetServiceDelegate;
        
        private EndOperationDelegate onEndGetServiceDelegate;
        
        private System.Threading.SendOrPostCallback onGetServiceCompletedDelegate;
        
        private BeginOperationDelegate onBeginFindServicesDelegate;
        
        private EndOperationDelegate onEndFindServicesDelegate;
        
        private System.Threading.SendOrPostCallback onFindServicesCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddRootServiceDelegate;
        
        private EndOperationDelegate onEndAddRootServiceDelegate;
        
        private System.Threading.SendOrPostCallback onAddRootServiceCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddServiceDelegate;
        
        private EndOperationDelegate onEndAddServiceDelegate;
        
        private System.Threading.SendOrPostCallback onAddServiceCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditServiceDelegate;
        
        private EndOperationDelegate onEndEditServiceDelegate;
        
        private System.Threading.SendOrPostCallback onEditServiceCompletedDelegate;
        
        private BeginOperationDelegate onBeginMoveServiceDelegate;
        
        private EndOperationDelegate onEndMoveServiceDelegate;
        
        private System.Threading.SendOrPostCallback onMoveServiceCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteServiceDelegate;
        
        private EndOperationDelegate onEndDeleteServiceDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteServiceCompletedDelegate;
        
        private BeginOperationDelegate onBeginServiceUpDelegate;
        
        private EndOperationDelegate onEndServiceUpDelegate;
        
        private System.Threading.SendOrPostCallback onServiceUpCompletedDelegate;
        
        private BeginOperationDelegate onBeginServiceDownDelegate;
        
        private EndOperationDelegate onEndServiceDownDelegate;
        
        private System.Threading.SendOrPostCallback onServiceDownCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangeServiceActivityDelegate;
        
        private EndOperationDelegate onEndChangeServiceActivityDelegate;
        
        private System.Threading.SendOrPostCallback onChangeServiceActivityCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetServiceCurrentScheduleDelegate;
        
        private EndOperationDelegate onEndGetServiceCurrentScheduleDelegate;
        
        private System.Threading.SendOrPostCallback onGetServiceCurrentScheduleCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetServiceWeekdayScheduleDelegate;
        
        private EndOperationDelegate onEndGetServiceWeekdayScheduleDelegate;
        
        private System.Threading.SendOrPostCallback onGetServiceWeekdayScheduleCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditServiceWeekdayScheduleDelegate;
        
        private EndOperationDelegate onEndEditServiceWeekdayScheduleDelegate;
        
        private System.Threading.SendOrPostCallback onEditServiceWeekdayScheduleCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteServiceWeekdayScheduleDelegate;
        
        private EndOperationDelegate onEndDeleteServiceWeekdayScheduleDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteServiceWeekdayScheduleCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetServiceExceptionScheduleDelegate;
        
        private EndOperationDelegate onEndGetServiceExceptionScheduleDelegate;
        
        private System.Threading.SendOrPostCallback onGetServiceExceptionScheduleCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditServiceExceptionScheduleDelegate;
        
        private EndOperationDelegate onEndEditServiceExceptionScheduleDelegate;
        
        private System.Threading.SendOrPostCallback onEditServiceExceptionScheduleCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteServiceExceptionScheduleDelegate;
        
        private EndOperationDelegate onEndDeleteServiceExceptionScheduleDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteServiceExceptionScheduleCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDefaultWeekdayScheduleDelegate;
        
        private EndOperationDelegate onEndGetDefaultWeekdayScheduleDelegate;
        
        private System.Threading.SendOrPostCallback onGetDefaultWeekdayScheduleCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditDefaultWeekdayScheduleDelegate;
        
        private EndOperationDelegate onEndEditDefaultWeekdayScheduleDelegate;
        
        private System.Threading.SendOrPostCallback onEditDefaultWeekdayScheduleCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDefaultExceptionScheduleDelegate;
        
        private EndOperationDelegate onEndGetDefaultExceptionScheduleDelegate;
        
        private System.Threading.SendOrPostCallback onGetDefaultExceptionScheduleCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditDefaultExceptionScheduleDelegate;
        
        private EndOperationDelegate onEndEditDefaultExceptionScheduleDelegate;
        
        private System.Threading.SendOrPostCallback onEditDefaultExceptionScheduleCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteDefaultExceptionScheduleDelegate;
        
        private EndOperationDelegate onEndDeleteDefaultExceptionScheduleDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteDefaultExceptionScheduleCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetServiceParametersDelegate;
        
        private EndOperationDelegate onEndGetServiceParametersDelegate;
        
        private System.Threading.SendOrPostCallback onGetServiceParametersCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddServiceParameterDelegate;
        
        private EndOperationDelegate onEndAddServiceParameterDelegate;
        
        private System.Threading.SendOrPostCallback onAddServiceParameterCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditNumberServiceParameterDelegate;
        
        private EndOperationDelegate onEndEditNumberServiceParameterDelegate;
        
        private System.Threading.SendOrPostCallback onEditNumberServiceParameterCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditTextServiceParameterDelegate;
        
        private EndOperationDelegate onEndEditTextServiceParameterDelegate;
        
        private System.Threading.SendOrPostCallback onEditTextServiceParameterCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditOptionsServiceParameterDelegate;
        
        private EndOperationDelegate onEndEditOptionsServiceParameterDelegate;
        
        private System.Threading.SendOrPostCallback onEditOptionsServiceParameterCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteServiceParameterDelegate;
        
        private EndOperationDelegate onEndDeleteServiceParameterDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteServiceParameterCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetServiceRatingReportDelegate;
        
        private EndOperationDelegate onEndGetServiceRatingReportDelegate;
        
        private System.Threading.SendOrPostCallback onGetServiceRatingReportCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetExceptionScheduleReportDelegate;
        
        private EndOperationDelegate onEndGetExceptionScheduleReportDelegate;
        
        private System.Threading.SendOrPostCallback onGetExceptionScheduleReportCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetClientRequestReportDelegate;
        
        private EndOperationDelegate onEndGetClientRequestReportDelegate;
        
        private System.Threading.SendOrPostCallback onGetClientRequestReportCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDefaultConfigDelegate;
        
        private EndOperationDelegate onEndGetDefaultConfigDelegate;
        
        private System.Threading.SendOrPostCallback onGetDefaultConfigCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditDefaultConfigDelegate;
        
        private EndOperationDelegate onEndEditDefaultConfigDelegate;
        
        private System.Threading.SendOrPostCallback onEditDefaultConfigCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDesignConfigDelegate;
        
        private EndOperationDelegate onEndGetDesignConfigDelegate;
        
        private System.Threading.SendOrPostCallback onGetDesignConfigCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditDesignConfigDelegate;
        
        private EndOperationDelegate onEndEditDesignConfigDelegate;
        
        private System.Threading.SendOrPostCallback onEditDesignConfigCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCouponConfigDelegate;
        
        private EndOperationDelegate onEndGetCouponConfigDelegate;
        
        private System.Threading.SendOrPostCallback onGetCouponConfigCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCouponTemplateDelegate;
        
        private EndOperationDelegate onEndGetCouponTemplateDelegate;
        
        private System.Threading.SendOrPostCallback onGetCouponTemplateCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditCouponConfigDelegate;
        
        private EndOperationDelegate onEndEditCouponConfigDelegate;
        
        private System.Threading.SendOrPostCallback onEditCouponConfigCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSMTPConfigDelegate;
        
        private EndOperationDelegate onEndGetSMTPConfigDelegate;
        
        private System.Threading.SendOrPostCallback onGetSMTPConfigCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditSMTPConfigDelegate;
        
        private EndOperationDelegate onEndEditSMTPConfigDelegate;
        
        private System.Threading.SendOrPostCallback onEditSMTPConfigCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPortalConfigDelegate;
        
        private EndOperationDelegate onEndGetPortalConfigDelegate;
        
        private System.Threading.SendOrPostCallback onGetPortalConfigCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditPortalConfigDelegate;
        
        private EndOperationDelegate onEndEditPortalConfigDelegate;
        
        private System.Threading.SendOrPostCallback onEditPortalConfigCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMediaConfigDelegate;
        
        private EndOperationDelegate onEndGetMediaConfigDelegate;
        
        private System.Threading.SendOrPostCallback onGetMediaConfigCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditMediaConfigDelegate;
        
        private EndOperationDelegate onEndEditMediaConfigDelegate;
        
        private System.Threading.SendOrPostCallback onEditMediaConfigCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddMediaConfigFileDelegate;
        
        private EndOperationDelegate onEndAddMediaConfigFileDelegate;
        
        private System.Threading.SendOrPostCallback onAddMediaConfigFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditMediaConfigFileDelegate;
        
        private EndOperationDelegate onEndEditMediaConfigFileDelegate;
        
        private System.Threading.SendOrPostCallback onEditMediaConfigFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteMediaConfigFileDelegate;
        
        private EndOperationDelegate onEndDeleteMediaConfigFileDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteMediaConfigFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTerminalConfigDelegate;
        
        private EndOperationDelegate onEndGetTerminalConfigDelegate;
        
        private System.Threading.SendOrPostCallback onGetTerminalConfigCompletedDelegate;
        
        private bool useGeneratedCallback;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ServerServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServerServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public ServerServiceClient(string endpointConfigurationName) : 
                this(new ServerServiceClientCallback(), endpointConfigurationName) {
        }
        
        private ServerServiceClient(ServerServiceClientCallback callbackImpl, string endpointConfigurationName) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), endpointConfigurationName) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public ServerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new ServerServiceClientCallback(), binding, remoteAddress) {
        }
        
        private ServerServiceClient(ServerServiceClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public ServerServiceClient() : 
                this(new ServerServiceClientCallback()) {
        }
        
        private ServerServiceClient(ServerServiceClientCallback callbackImpl) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl)) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Не удалось установить CookieContainer. Убедитесь, что привязка содержит HttpCooki" +
                            "eContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<EditTerminalConfigCompletedEventArgs> EditTerminalConfigCompleted;
        
        public event System.EventHandler<GetNotificationConfigCompletedEventArgs> GetNotificationConfigCompleted;
        
        public event System.EventHandler<EditNotificationConfigCompletedEventArgs> EditNotificationConfigCompleted;
        
        public event System.EventHandler<GetQueuePlanMetricCompletedEventArgs> GetQueuePlanMetricCompleted;
        
        public event System.EventHandler<GetQueuePlanServiceMetricCompletedEventArgs> GetQueuePlanServiceMetricCompleted;
        
        public event System.EventHandler<GetDateTimeCompletedEventArgs> GetDateTimeCompleted;
        
        public event System.EventHandler<IsSubscribedCompletedEventArgs> IsSubscribedCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SubscribeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UnSubscribeCompleted;
        
        public event System.EventHandler<GetClientCompletedEventArgs> GetClientCompleted;
        
        public event System.EventHandler<OpenClientSessionCompletedEventArgs> OpenClientSessionCompleted;
        
        public event System.EventHandler<GetClientByIdentityCompletedEventArgs> GetClientByIdentityCompleted;
        
        public event System.EventHandler<FindClientsCompletedEventArgs> FindClientsCompleted;
        
        public event System.EventHandler<AddClientCompletedEventArgs> AddClientCompleted;
        
        public event System.EventHandler<ClientLoginCompletedEventArgs> ClientLoginCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ClientRestorePasswordCompleted;
        
        public event System.EventHandler<EditClientCompletedEventArgs> EditClientCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ChangeClientPasswordCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteClientCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SendPINToEmailCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CheckPINCompleted;
        
        public event System.EventHandler<FindClientRequestsCompletedEventArgs> FindClientRequestsCompleted;
        
        public event System.EventHandler<GetClientRequestCompletedEventArgs> GetClientRequestCompleted;
        
        public event System.EventHandler<GetClientRequestEventsCompletedEventArgs> GetClientRequestEventsCompleted;
        
        public event System.EventHandler<AddEarlyClientRequestCompletedEventArgs> AddEarlyClientRequestCompleted;
        
        public event System.EventHandler<AddLiveClientRequestCompletedEventArgs> AddLiveClientRequestCompleted;
        
        public event System.EventHandler<GetClientRequestCouponCompletedEventArgs> GetClientRequestCouponCompleted;
        
        public event System.EventHandler<ChangeClientRequestPriorityCompletedEventArgs> ChangeClientRequestPriorityCompleted;
        
        public event System.EventHandler<ChangeClientRequestSubjectsCompletedEventArgs> ChangeClientRequestSubjectsCompleted;
        
        public event System.EventHandler<ChangeClientRequestServiceCompletedEventArgs> ChangeClientRequestServiceCompleted;
        
        public event System.EventHandler<ChangeClientRequestOperatorCompletedEventArgs> ChangeClientRequestOperatorCompleted;
        
        public event System.EventHandler<CancelClientRequestCompletedEventArgs> CancelClientRequestCompleted;
        
        public event System.EventHandler<RestoreClientRequestCompletedEventArgs> RestoreClientRequestCompleted;
        
        public event System.EventHandler<PostponeClientRequestCompletedEventArgs> PostponeClientRequestCompleted;
        
        public event System.EventHandler<GetOperatorClientRequestPlansCompletedEventArgs> GetOperatorClientRequestPlansCompleted;
        
        public event System.EventHandler<GetCurrentClientRequestsCompletedEventArgs> GetCurrentClientRequestsCompleted;
        
        public event System.EventHandler<GetCurrentClientRequestCompletedEventArgs> GetCurrentClientRequestCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateCurrentClientRequestCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PostponeCurrentClientRequestCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ReturnCurrentClientRequestCompleted;
        
        public event System.EventHandler<ChangeCurrentClientRequestServiceCompletedEventArgs> ChangeCurrentClientRequestServiceCompleted;
        
        public event System.EventHandler<ChangeCurrentClientRequestServiceTypeCompletedEventArgs> ChangeCurrentClientRequestServiceTypeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CallCurrentClientCompleted;
        
        public event System.EventHandler<GetQueuePlanCompletedEventArgs> GetQueuePlanCompleted;
        
        public event System.EventHandler<GetFreeTimeCompletedEventArgs> GetFreeTimeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RefreshTodayQueuePlanCompleted;
        
        public event System.EventHandler<GetRootServiceGroupsCompletedEventArgs> GetRootServiceGroupsCompleted;
        
        public event System.EventHandler<GetServiceGroupsCompletedEventArgs> GetServiceGroupsCompleted;
        
        public event System.EventHandler<GetServiceGroupCompletedEventArgs> GetServiceGroupCompleted;
        
        public event System.EventHandler<AddRootServiceGroupCompletedEventArgs> AddRootServiceGroupCompleted;
        
        public event System.EventHandler<AddServiceGroupCompletedEventArgs> AddServiceGroupCompleted;
        
        public event System.EventHandler<EditServiceGroupCompletedEventArgs> EditServiceGroupCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> MoveServiceGroupCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> MoveServiceGroupToRootCompleted;
        
        public event System.EventHandler<ServiceGroupUpCompletedEventArgs> ServiceGroupUpCompleted;
        
        public event System.EventHandler<ServiceGroupDownCompletedEventArgs> ServiceGroupDownCompleted;
        
        public event System.EventHandler<ServiceGroupActivateCompletedEventArgs> ServiceGroupActivateCompleted;
        
        public event System.EventHandler<ServiceGroupDeactivateCompletedEventArgs> ServiceGroupDeactivateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteServiceGroupCompleted;
        
        public event System.EventHandler<OpenUserSessionCompletedEventArgs> OpenUserSessionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UserHeartbeatCompleted;
        
        public event System.EventHandler<GetUsersCompletedEventArgs> GetUsersCompleted;
        
        public event System.EventHandler<GetUserCompletedEventArgs> GetUserCompleted;
        
        public event System.EventHandler<GetUserListCompletedEventArgs> GetUserListCompleted;
        
        public event System.EventHandler<UserLoginCompletedEventArgs> UserLoginCompleted;
        
        public event System.EventHandler<AddUserCompletedEventArgs> AddUserCompleted;
        
        public event System.EventHandler<EditUserCompletedEventArgs> EditUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ChangeUserPasswordCompleted;
        
        public event System.EventHandler<EditOperatorCompletedEventArgs> EditOperatorCompleted;
        
        public event System.EventHandler<GetOfficesCompletedEventArgs> GetOfficesCompleted;
        
        public event System.EventHandler<GetOfficeCompletedEventArgs> GetOfficeCompleted;
        
        public event System.EventHandler<AddOfficeCompletedEventArgs> AddOfficeCompleted;
        
        public event System.EventHandler<EditOfficeCompletedEventArgs> EditOfficeCompleted;
        
        public event System.EventHandler<EditOfficeLoginCompletedEventArgs> EditOfficeLoginCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteOfficeCompleted;
        
        public event System.EventHandler<GetWorkplacesListCompletedEventArgs> GetWorkplacesListCompleted;
        
        public event System.EventHandler<GetWorkplacesCompletedEventArgs> GetWorkplacesCompleted;
        
        public event System.EventHandler<GetWorkplaceCompletedEventArgs> GetWorkplaceCompleted;
        
        public event System.EventHandler<AddWorkplaceCompletedEventArgs> AddWorkplaceCompleted;
        
        public event System.EventHandler<EditWorkplaceCompletedEventArgs> EditWorkplaceCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteWorkplaceCompleted;
        
        public event System.EventHandler<GetServiceListCompletedEventArgs> GetServiceListCompleted;
        
        public event System.EventHandler<GetRootServicesCompletedEventArgs> GetRootServicesCompleted;
        
        public event System.EventHandler<GetServicesCompletedEventArgs> GetServicesCompleted;
        
        public event System.EventHandler<GetServiceCompletedEventArgs> GetServiceCompleted;
        
        public event System.EventHandler<FindServicesCompletedEventArgs> FindServicesCompleted;
        
        public event System.EventHandler<AddRootServiceCompletedEventArgs> AddRootServiceCompleted;
        
        public event System.EventHandler<AddServiceCompletedEventArgs> AddServiceCompleted;
        
        public event System.EventHandler<EditServiceCompletedEventArgs> EditServiceCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> MoveServiceCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteServiceCompleted;
        
        public event System.EventHandler<ServiceUpCompletedEventArgs> ServiceUpCompleted;
        
        public event System.EventHandler<ServiceDownCompletedEventArgs> ServiceDownCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ChangeServiceActivityCompleted;
        
        public event System.EventHandler<GetServiceCurrentScheduleCompletedEventArgs> GetServiceCurrentScheduleCompleted;
        
        public event System.EventHandler<GetServiceWeekdayScheduleCompletedEventArgs> GetServiceWeekdayScheduleCompleted;
        
        public event System.EventHandler<EditServiceWeekdayScheduleCompletedEventArgs> EditServiceWeekdayScheduleCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteServiceWeekdayScheduleCompleted;
        
        public event System.EventHandler<GetServiceExceptionScheduleCompletedEventArgs> GetServiceExceptionScheduleCompleted;
        
        public event System.EventHandler<EditServiceExceptionScheduleCompletedEventArgs> EditServiceExceptionScheduleCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteServiceExceptionScheduleCompleted;
        
        public event System.EventHandler<GetDefaultWeekdayScheduleCompletedEventArgs> GetDefaultWeekdayScheduleCompleted;
        
        public event System.EventHandler<EditDefaultWeekdayScheduleCompletedEventArgs> EditDefaultWeekdayScheduleCompleted;
        
        public event System.EventHandler<GetDefaultExceptionScheduleCompletedEventArgs> GetDefaultExceptionScheduleCompleted;
        
        public event System.EventHandler<EditDefaultExceptionScheduleCompletedEventArgs> EditDefaultExceptionScheduleCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteDefaultExceptionScheduleCompleted;
        
        public event System.EventHandler<GetServiceParametersCompletedEventArgs> GetServiceParametersCompleted;
        
        public event System.EventHandler<AddServiceParameterCompletedEventArgs> AddServiceParameterCompleted;
        
        public event System.EventHandler<EditNumberServiceParameterCompletedEventArgs> EditNumberServiceParameterCompleted;
        
        public event System.EventHandler<EditTextServiceParameterCompletedEventArgs> EditTextServiceParameterCompleted;
        
        public event System.EventHandler<EditOptionsServiceParameterCompletedEventArgs> EditOptionsServiceParameterCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteServiceParameterCompleted;
        
        public event System.EventHandler<GetServiceRatingReportCompletedEventArgs> GetServiceRatingReportCompleted;
        
        public event System.EventHandler<GetExceptionScheduleReportCompletedEventArgs> GetExceptionScheduleReportCompleted;
        
        public event System.EventHandler<GetClientRequestReportCompletedEventArgs> GetClientRequestReportCompleted;
        
        public event System.EventHandler<GetDefaultConfigCompletedEventArgs> GetDefaultConfigCompleted;
        
        public event System.EventHandler<EditDefaultConfigCompletedEventArgs> EditDefaultConfigCompleted;
        
        public event System.EventHandler<GetDesignConfigCompletedEventArgs> GetDesignConfigCompleted;
        
        public event System.EventHandler<EditDesignConfigCompletedEventArgs> EditDesignConfigCompleted;
        
        public event System.EventHandler<GetCouponConfigCompletedEventArgs> GetCouponConfigCompleted;
        
        public event System.EventHandler<GetCouponTemplateCompletedEventArgs> GetCouponTemplateCompleted;
        
        public event System.EventHandler<EditCouponConfigCompletedEventArgs> EditCouponConfigCompleted;
        
        public event System.EventHandler<GetSMTPConfigCompletedEventArgs> GetSMTPConfigCompleted;
        
        public event System.EventHandler<EditSMTPConfigCompletedEventArgs> EditSMTPConfigCompleted;
        
        public event System.EventHandler<GetPortalConfigCompletedEventArgs> GetPortalConfigCompleted;
        
        public event System.EventHandler<EditPortalConfigCompletedEventArgs> EditPortalConfigCompleted;
        
        public event System.EventHandler<GetMediaConfigCompletedEventArgs> GetMediaConfigCompleted;
        
        public event System.EventHandler<EditMediaConfigCompletedEventArgs> EditMediaConfigCompleted;
        
        public event System.EventHandler<AddMediaConfigFileCompletedEventArgs> AddMediaConfigFileCompleted;
        
        public event System.EventHandler<EditMediaConfigFileCompletedEventArgs> EditMediaConfigFileCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteMediaConfigFileCompleted;
        
        public event System.EventHandler<GetTerminalConfigCompletedEventArgs> GetTerminalConfigCompleted;
        
        public event System.EventHandler<CallClientReceivedEventArgs> CallClientReceived;
        
        public event System.EventHandler<ClientRequestUpdatedReceivedEventArgs> ClientRequestUpdatedReceived;
        
        public event System.EventHandler<CurrentClientRequestUpdatedReceivedEventArgs> CurrentClientRequestUpdatedReceived;
        
        public event System.EventHandler<OperatorPlanMetricsUpdatedReceivedEventArgs> OperatorPlanMetricsUpdatedReceived;
        
        public event System.EventHandler<ConfigUpdatedReceivedEventArgs> ConfigUpdatedReceived;
        
        public event System.EventHandler<EventReceivedEventArgs> EventReceived;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginEditTerminalConfig(int PIN, bool currentDayRecording, int columns, int rows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditTerminalConfig(PIN, currentDayRecording, columns, rows, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.TerminalConfig Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndEditTerminalConfig(System.IAsyncResult result) {
            return base.Channel.EndEditTerminalConfig(result);
        }
        
        private System.IAsyncResult OnBeginEditTerminalConfig(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            int PIN = ((int)(inValues[0]));
            bool currentDayRecording = ((bool)(inValues[1]));
            int columns = ((int)(inValues[2]));
            int rows = ((int)(inValues[3]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginEditTerminalConfig(PIN, currentDayRecording, columns, rows, callback, asyncState);
        }
        
        private object[] OnEndEditTerminalConfig(System.IAsyncResult result) {
            Queue.Services.DTO.TerminalConfig retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndEditTerminalConfig(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditTerminalConfigCompleted(object state) {
            if ((this.EditTerminalConfigCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditTerminalConfigCompleted(this, new EditTerminalConfigCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditTerminalConfigAsync(int PIN, bool currentDayRecording, int columns, int rows) {
            this.EditTerminalConfigAsync(PIN, currentDayRecording, columns, rows, null);
        }
        
        public void EditTerminalConfigAsync(int PIN, bool currentDayRecording, int columns, int rows, object userState) {
            if ((this.onBeginEditTerminalConfigDelegate == null)) {
                this.onBeginEditTerminalConfigDelegate = new BeginOperationDelegate(this.OnBeginEditTerminalConfig);
            }
            if ((this.onEndEditTerminalConfigDelegate == null)) {
                this.onEndEditTerminalConfigDelegate = new EndOperationDelegate(this.OnEndEditTerminalConfig);
            }
            if ((this.onEditTerminalConfigCompletedDelegate == null)) {
                this.onEditTerminalConfigCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditTerminalConfigCompleted);
            }
            base.InvokeAsync(this.onBeginEditTerminalConfigDelegate, new object[] {
                        PIN,
                        currentDayRecording,
                        columns,
                        rows}, this.onEndEditTerminalConfigDelegate, this.onEditTerminalConfigCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetNotificationConfig(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNotificationConfig(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.NotificationConfig Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetNotificationConfig(System.IAsyncResult result) {
            return base.Channel.EndGetNotificationConfig(result);
        }
        
        private System.IAsyncResult OnBeginGetNotificationConfig(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetNotificationConfig(callback, asyncState);
        }
        
        private object[] OnEndGetNotificationConfig(System.IAsyncResult result) {
            Queue.Services.DTO.NotificationConfig retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetNotificationConfig(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNotificationConfigCompleted(object state) {
            if ((this.GetNotificationConfigCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNotificationConfigCompleted(this, new GetNotificationConfigCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNotificationConfigAsync() {
            this.GetNotificationConfigAsync(null);
        }
        
        public void GetNotificationConfigAsync(object userState) {
            if ((this.onBeginGetNotificationConfigDelegate == null)) {
                this.onBeginGetNotificationConfigDelegate = new BeginOperationDelegate(this.OnBeginGetNotificationConfig);
            }
            if ((this.onEndGetNotificationConfigDelegate == null)) {
                this.onEndGetNotificationConfigDelegate = new EndOperationDelegate(this.OnEndGetNotificationConfig);
            }
            if ((this.onGetNotificationConfigCompletedDelegate == null)) {
                this.onGetNotificationConfigCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNotificationConfigCompleted);
            }
            base.InvokeAsync(this.onBeginGetNotificationConfigDelegate, null, this.onEndGetNotificationConfigDelegate, this.onGetNotificationConfigCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginEditNotificationConfig(int clientRequestsLength, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditNotificationConfig(clientRequestsLength, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.NotificationConfig Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndEditNotificationConfig(System.IAsyncResult result) {
            return base.Channel.EndEditNotificationConfig(result);
        }
        
        private System.IAsyncResult OnBeginEditNotificationConfig(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            int clientRequestsLength = ((int)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginEditNotificationConfig(clientRequestsLength, callback, asyncState);
        }
        
        private object[] OnEndEditNotificationConfig(System.IAsyncResult result) {
            Queue.Services.DTO.NotificationConfig retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndEditNotificationConfig(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditNotificationConfigCompleted(object state) {
            if ((this.EditNotificationConfigCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditNotificationConfigCompleted(this, new EditNotificationConfigCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditNotificationConfigAsync(int clientRequestsLength) {
            this.EditNotificationConfigAsync(clientRequestsLength, null);
        }
        
        public void EditNotificationConfigAsync(int clientRequestsLength, object userState) {
            if ((this.onBeginEditNotificationConfigDelegate == null)) {
                this.onBeginEditNotificationConfigDelegate = new BeginOperationDelegate(this.OnBeginEditNotificationConfig);
            }
            if ((this.onEndEditNotificationConfigDelegate == null)) {
                this.onEndEditNotificationConfigDelegate = new EndOperationDelegate(this.OnEndEditNotificationConfig);
            }
            if ((this.onEditNotificationConfigCompletedDelegate == null)) {
                this.onEditNotificationConfigCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditNotificationConfigCompleted);
            }
            base.InvokeAsync(this.onBeginEditNotificationConfigDelegate, new object[] {
                        clientRequestsLength}, this.onEndEditNotificationConfigDelegate, this.onEditNotificationConfigCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetQueuePlanMetric(int year, int month, int day, int hours, int minutes, int seconds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetQueuePlanMetric(year, month, day, hours, minutes, seconds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.QueuePlanMetric Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetQueuePlanMetric(System.IAsyncResult result) {
            return base.Channel.EndGetQueuePlanMetric(result);
        }
        
        private System.IAsyncResult OnBeginGetQueuePlanMetric(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            int year = ((int)(inValues[0]));
            int month = ((int)(inValues[1]));
            int day = ((int)(inValues[2]));
            int hours = ((int)(inValues[3]));
            int minutes = ((int)(inValues[4]));
            int seconds = ((int)(inValues[5]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetQueuePlanMetric(year, month, day, hours, minutes, seconds, callback, asyncState);
        }
        
        private object[] OnEndGetQueuePlanMetric(System.IAsyncResult result) {
            Queue.Services.DTO.QueuePlanMetric retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetQueuePlanMetric(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetQueuePlanMetricCompleted(object state) {
            if ((this.GetQueuePlanMetricCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetQueuePlanMetricCompleted(this, new GetQueuePlanMetricCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetQueuePlanMetricAsync(int year, int month, int day, int hours, int minutes, int seconds) {
            this.GetQueuePlanMetricAsync(year, month, day, hours, minutes, seconds, null);
        }
        
        public void GetQueuePlanMetricAsync(int year, int month, int day, int hours, int minutes, int seconds, object userState) {
            if ((this.onBeginGetQueuePlanMetricDelegate == null)) {
                this.onBeginGetQueuePlanMetricDelegate = new BeginOperationDelegate(this.OnBeginGetQueuePlanMetric);
            }
            if ((this.onEndGetQueuePlanMetricDelegate == null)) {
                this.onEndGetQueuePlanMetricDelegate = new EndOperationDelegate(this.OnEndGetQueuePlanMetric);
            }
            if ((this.onGetQueuePlanMetricCompletedDelegate == null)) {
                this.onGetQueuePlanMetricCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetQueuePlanMetricCompleted);
            }
            base.InvokeAsync(this.onBeginGetQueuePlanMetricDelegate, new object[] {
                        year,
                        month,
                        day,
                        hours,
                        minutes,
                        seconds}, this.onEndGetQueuePlanMetricDelegate, this.onGetQueuePlanMetricCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetQueuePlanServiceMetric(int year, int month, int day, int hours, int minutes, int seconds, System.Guid serviceId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetQueuePlanServiceMetric(year, month, day, hours, minutes, seconds, serviceId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.QueuePlanServiceMetric Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetQueuePlanServiceMetric(System.IAsyncResult result) {
            return base.Channel.EndGetQueuePlanServiceMetric(result);
        }
        
        private System.IAsyncResult OnBeginGetQueuePlanServiceMetric(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            int year = ((int)(inValues[0]));
            int month = ((int)(inValues[1]));
            int day = ((int)(inValues[2]));
            int hours = ((int)(inValues[3]));
            int minutes = ((int)(inValues[4]));
            int seconds = ((int)(inValues[5]));
            System.Guid serviceId = ((System.Guid)(inValues[6]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetQueuePlanServiceMetric(year, month, day, hours, minutes, seconds, serviceId, callback, asyncState);
        }
        
        private object[] OnEndGetQueuePlanServiceMetric(System.IAsyncResult result) {
            Queue.Services.DTO.QueuePlanServiceMetric retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetQueuePlanServiceMetric(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetQueuePlanServiceMetricCompleted(object state) {
            if ((this.GetQueuePlanServiceMetricCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetQueuePlanServiceMetricCompleted(this, new GetQueuePlanServiceMetricCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetQueuePlanServiceMetricAsync(int year, int month, int day, int hours, int minutes, int seconds, System.Guid serviceId) {
            this.GetQueuePlanServiceMetricAsync(year, month, day, hours, minutes, seconds, serviceId, null);
        }
        
        public void GetQueuePlanServiceMetricAsync(int year, int month, int day, int hours, int minutes, int seconds, System.Guid serviceId, object userState) {
            if ((this.onBeginGetQueuePlanServiceMetricDelegate == null)) {
                this.onBeginGetQueuePlanServiceMetricDelegate = new BeginOperationDelegate(this.OnBeginGetQueuePlanServiceMetric);
            }
            if ((this.onEndGetQueuePlanServiceMetricDelegate == null)) {
                this.onEndGetQueuePlanServiceMetricDelegate = new EndOperationDelegate(this.OnEndGetQueuePlanServiceMetric);
            }
            if ((this.onGetQueuePlanServiceMetricCompletedDelegate == null)) {
                this.onGetQueuePlanServiceMetricCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetQueuePlanServiceMetricCompleted);
            }
            base.InvokeAsync(this.onBeginGetQueuePlanServiceMetricDelegate, new object[] {
                        year,
                        month,
                        day,
                        hours,
                        minutes,
                        seconds,
                        serviceId}, this.onEndGetQueuePlanServiceMetricDelegate, this.onGetQueuePlanServiceMetricCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetDateTime(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDateTime(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.DateTime Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetDateTime(System.IAsyncResult result) {
            return base.Channel.EndGetDateTime(result);
        }
        
        private System.IAsyncResult OnBeginGetDateTime(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetDateTime(callback, asyncState);
        }
        
        private object[] OnEndGetDateTime(System.IAsyncResult result) {
            System.DateTime retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetDateTime(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDateTimeCompleted(object state) {
            if ((this.GetDateTimeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDateTimeCompleted(this, new GetDateTimeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDateTimeAsync() {
            this.GetDateTimeAsync(null);
        }
        
        public void GetDateTimeAsync(object userState) {
            if ((this.onBeginGetDateTimeDelegate == null)) {
                this.onBeginGetDateTimeDelegate = new BeginOperationDelegate(this.OnBeginGetDateTime);
            }
            if ((this.onEndGetDateTimeDelegate == null)) {
                this.onEndGetDateTimeDelegate = new EndOperationDelegate(this.OnEndGetDateTime);
            }
            if ((this.onGetDateTimeCompletedDelegate == null)) {
                this.onGetDateTimeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDateTimeCompleted);
            }
            base.InvokeAsync(this.onBeginGetDateTimeDelegate, null, this.onEndGetDateTimeDelegate, this.onGetDateTimeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginIsSubscribed(Queue.Operator.Silverlight.QueueRemoteService.ServerServiceEventType eventType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsSubscribed(eventType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndIsSubscribed(System.IAsyncResult result) {
            return base.Channel.EndIsSubscribed(result);
        }
        
        private System.IAsyncResult OnBeginIsSubscribed(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            Queue.Operator.Silverlight.QueueRemoteService.ServerServiceEventType eventType = ((Queue.Operator.Silverlight.QueueRemoteService.ServerServiceEventType)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginIsSubscribed(eventType, callback, asyncState);
        }
        
        private object[] OnEndIsSubscribed(System.IAsyncResult result) {
            bool retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndIsSubscribed(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsSubscribedCompleted(object state) {
            if ((this.IsSubscribedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsSubscribedCompleted(this, new IsSubscribedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsSubscribedAsync(Queue.Operator.Silverlight.QueueRemoteService.ServerServiceEventType eventType) {
            this.IsSubscribedAsync(eventType, null);
        }
        
        public void IsSubscribedAsync(Queue.Operator.Silverlight.QueueRemoteService.ServerServiceEventType eventType, object userState) {
            if ((this.onBeginIsSubscribedDelegate == null)) {
                this.onBeginIsSubscribedDelegate = new BeginOperationDelegate(this.OnBeginIsSubscribed);
            }
            if ((this.onEndIsSubscribedDelegate == null)) {
                this.onEndIsSubscribedDelegate = new EndOperationDelegate(this.OnEndIsSubscribed);
            }
            if ((this.onIsSubscribedCompletedDelegate == null)) {
                this.onIsSubscribedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsSubscribedCompleted);
            }
            base.InvokeAsync(this.onBeginIsSubscribedDelegate, new object[] {
                        eventType}, this.onEndIsSubscribedDelegate, this.onIsSubscribedCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginSubscribe(Queue.Operator.Silverlight.QueueRemoteService.ServerServiceEventType eventType, Queue.Operator.Silverlight.QueueRemoteService.ServerSubscribtionArgs args, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSubscribe(eventType, args, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndSubscribe(System.IAsyncResult result) {
            base.Channel.EndSubscribe(result);
        }
        
        private System.IAsyncResult OnBeginSubscribe(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            Queue.Operator.Silverlight.QueueRemoteService.ServerServiceEventType eventType = ((Queue.Operator.Silverlight.QueueRemoteService.ServerServiceEventType)(inValues[0]));
            Queue.Operator.Silverlight.QueueRemoteService.ServerSubscribtionArgs args = ((Queue.Operator.Silverlight.QueueRemoteService.ServerSubscribtionArgs)(inValues[1]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginSubscribe(eventType, args, callback, asyncState);
        }
        
        private object[] OnEndSubscribe(System.IAsyncResult result) {
            ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndSubscribe(result);
            return null;
        }
        
        private void OnSubscribeCompleted(object state) {
            if ((this.SubscribeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SubscribeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SubscribeAsync(Queue.Operator.Silverlight.QueueRemoteService.ServerServiceEventType eventType, Queue.Operator.Silverlight.QueueRemoteService.ServerSubscribtionArgs args) {
            this.SubscribeAsync(eventType, args, null);
        }
        
        public void SubscribeAsync(Queue.Operator.Silverlight.QueueRemoteService.ServerServiceEventType eventType, Queue.Operator.Silverlight.QueueRemoteService.ServerSubscribtionArgs args, object userState) {
            if ((this.onBeginSubscribeDelegate == null)) {
                this.onBeginSubscribeDelegate = new BeginOperationDelegate(this.OnBeginSubscribe);
            }
            if ((this.onEndSubscribeDelegate == null)) {
                this.onEndSubscribeDelegate = new EndOperationDelegate(this.OnEndSubscribe);
            }
            if ((this.onSubscribeCompletedDelegate == null)) {
                this.onSubscribeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSubscribeCompleted);
            }
            base.InvokeAsync(this.onBeginSubscribeDelegate, new object[] {
                        eventType,
                        args}, this.onEndSubscribeDelegate, this.onSubscribeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginUnSubscribe(Queue.Operator.Silverlight.QueueRemoteService.ServerServiceEventType eventType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUnSubscribe(eventType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndUnSubscribe(System.IAsyncResult result) {
            base.Channel.EndUnSubscribe(result);
        }
        
        private System.IAsyncResult OnBeginUnSubscribe(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            Queue.Operator.Silverlight.QueueRemoteService.ServerServiceEventType eventType = ((Queue.Operator.Silverlight.QueueRemoteService.ServerServiceEventType)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginUnSubscribe(eventType, callback, asyncState);
        }
        
        private object[] OnEndUnSubscribe(System.IAsyncResult result) {
            ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndUnSubscribe(result);
            return null;
        }
        
        private void OnUnSubscribeCompleted(object state) {
            if ((this.UnSubscribeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UnSubscribeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UnSubscribeAsync(Queue.Operator.Silverlight.QueueRemoteService.ServerServiceEventType eventType) {
            this.UnSubscribeAsync(eventType, null);
        }
        
        public void UnSubscribeAsync(Queue.Operator.Silverlight.QueueRemoteService.ServerServiceEventType eventType, object userState) {
            if ((this.onBeginUnSubscribeDelegate == null)) {
                this.onBeginUnSubscribeDelegate = new BeginOperationDelegate(this.OnBeginUnSubscribe);
            }
            if ((this.onEndUnSubscribeDelegate == null)) {
                this.onEndUnSubscribeDelegate = new EndOperationDelegate(this.OnEndUnSubscribe);
            }
            if ((this.onUnSubscribeCompletedDelegate == null)) {
                this.onUnSubscribeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUnSubscribeCompleted);
            }
            base.InvokeAsync(this.onBeginUnSubscribeDelegate, new object[] {
                        eventType}, this.onEndUnSubscribeDelegate, this.onUnSubscribeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetClient(System.Guid clientId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetClient(clientId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.Client Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetClient(System.IAsyncResult result) {
            return base.Channel.EndGetClient(result);
        }
        
        private System.IAsyncResult OnBeginGetClient(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid clientId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetClient(clientId, callback, asyncState);
        }
        
        private object[] OnEndGetClient(System.IAsyncResult result) {
            Queue.Services.DTO.Client retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetClient(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetClientCompleted(object state) {
            if ((this.GetClientCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetClientCompleted(this, new GetClientCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetClientAsync(System.Guid clientId) {
            this.GetClientAsync(clientId, null);
        }
        
        public void GetClientAsync(System.Guid clientId, object userState) {
            if ((this.onBeginGetClientDelegate == null)) {
                this.onBeginGetClientDelegate = new BeginOperationDelegate(this.OnBeginGetClient);
            }
            if ((this.onEndGetClientDelegate == null)) {
                this.onEndGetClientDelegate = new EndOperationDelegate(this.OnEndGetClient);
            }
            if ((this.onGetClientCompletedDelegate == null)) {
                this.onGetClientCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetClientCompleted);
            }
            base.InvokeAsync(this.onBeginGetClientDelegate, new object[] {
                        clientId}, this.onEndGetClientDelegate, this.onGetClientCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginOpenClientSession(System.Guid sessionId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginOpenClientSession(sessionId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.Client Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndOpenClientSession(System.IAsyncResult result) {
            return base.Channel.EndOpenClientSession(result);
        }
        
        private System.IAsyncResult OnBeginOpenClientSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid sessionId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginOpenClientSession(sessionId, callback, asyncState);
        }
        
        private object[] OnEndOpenClientSession(System.IAsyncResult result) {
            Queue.Services.DTO.Client retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndOpenClientSession(result);
            return new object[] {
                    retVal};
        }
        
        private void OnOpenClientSessionCompleted(object state) {
            if ((this.OpenClientSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenClientSessionCompleted(this, new OpenClientSessionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenClientSessionAsync(System.Guid sessionId) {
            this.OpenClientSessionAsync(sessionId, null);
        }
        
        public void OpenClientSessionAsync(System.Guid sessionId, object userState) {
            if ((this.onBeginOpenClientSessionDelegate == null)) {
                this.onBeginOpenClientSessionDelegate = new BeginOperationDelegate(this.OnBeginOpenClientSession);
            }
            if ((this.onEndOpenClientSessionDelegate == null)) {
                this.onEndOpenClientSessionDelegate = new EndOperationDelegate(this.OnEndOpenClientSession);
            }
            if ((this.onOpenClientSessionCompletedDelegate == null)) {
                this.onOpenClientSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenClientSessionCompleted);
            }
            base.InvokeAsync(this.onBeginOpenClientSessionDelegate, new object[] {
                        sessionId}, this.onEndOpenClientSessionDelegate, this.onOpenClientSessionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetClientByIdentity(string identity, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetClientByIdentity(identity, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.Client Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetClientByIdentity(System.IAsyncResult result) {
            return base.Channel.EndGetClientByIdentity(result);
        }
        
        private System.IAsyncResult OnBeginGetClientByIdentity(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string identity = ((string)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetClientByIdentity(identity, callback, asyncState);
        }
        
        private object[] OnEndGetClientByIdentity(System.IAsyncResult result) {
            Queue.Services.DTO.Client retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetClientByIdentity(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetClientByIdentityCompleted(object state) {
            if ((this.GetClientByIdentityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetClientByIdentityCompleted(this, new GetClientByIdentityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetClientByIdentityAsync(string identity) {
            this.GetClientByIdentityAsync(identity, null);
        }
        
        public void GetClientByIdentityAsync(string identity, object userState) {
            if ((this.onBeginGetClientByIdentityDelegate == null)) {
                this.onBeginGetClientByIdentityDelegate = new BeginOperationDelegate(this.OnBeginGetClientByIdentity);
            }
            if ((this.onEndGetClientByIdentityDelegate == null)) {
                this.onEndGetClientByIdentityDelegate = new EndOperationDelegate(this.OnEndGetClientByIdentity);
            }
            if ((this.onGetClientByIdentityCompletedDelegate == null)) {
                this.onGetClientByIdentityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetClientByIdentityCompleted);
            }
            base.InvokeAsync(this.onBeginGetClientByIdentityDelegate, new object[] {
                        identity}, this.onEndGetClientByIdentityDelegate, this.onGetClientByIdentityCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginFindClients(int startIndex, int maxResults, string filter, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindClients(startIndex, maxResults, filter, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<Queue.Services.DTO.Client> Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndFindClients(System.IAsyncResult result) {
            return base.Channel.EndFindClients(result);
        }
        
        private System.IAsyncResult OnBeginFindClients(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            int startIndex = ((int)(inValues[0]));
            int maxResults = ((int)(inValues[1]));
            string filter = ((string)(inValues[2]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginFindClients(startIndex, maxResults, filter, callback, asyncState);
        }
        
        private object[] OnEndFindClients(System.IAsyncResult result) {
            System.Collections.Generic.List<Queue.Services.DTO.Client> retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndFindClients(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindClientsCompleted(object state) {
            if ((this.FindClientsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindClientsCompleted(this, new FindClientsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindClientsAsync(int startIndex, int maxResults, string filter) {
            this.FindClientsAsync(startIndex, maxResults, filter, null);
        }
        
        public void FindClientsAsync(int startIndex, int maxResults, string filter, object userState) {
            if ((this.onBeginFindClientsDelegate == null)) {
                this.onBeginFindClientsDelegate = new BeginOperationDelegate(this.OnBeginFindClients);
            }
            if ((this.onEndFindClientsDelegate == null)) {
                this.onEndFindClientsDelegate = new EndOperationDelegate(this.OnEndFindClients);
            }
            if ((this.onFindClientsCompletedDelegate == null)) {
                this.onFindClientsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindClientsCompleted);
            }
            base.InvokeAsync(this.onBeginFindClientsDelegate, new object[] {
                        startIndex,
                        maxResults,
                        filter}, this.onEndFindClientsDelegate, this.onFindClientsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginAddClient(string surname, string name, string patronymic, string email, string mobile, string identity, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddClient(surname, name, patronymic, email, mobile, identity, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.Client Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndAddClient(System.IAsyncResult result) {
            return base.Channel.EndAddClient(result);
        }
        
        private System.IAsyncResult OnBeginAddClient(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string surname = ((string)(inValues[0]));
            string name = ((string)(inValues[1]));
            string patronymic = ((string)(inValues[2]));
            string email = ((string)(inValues[3]));
            string mobile = ((string)(inValues[4]));
            string identity = ((string)(inValues[5]));
            string password = ((string)(inValues[6]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginAddClient(surname, name, patronymic, email, mobile, identity, password, callback, asyncState);
        }
        
        private object[] OnEndAddClient(System.IAsyncResult result) {
            Queue.Services.DTO.Client retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndAddClient(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddClientCompleted(object state) {
            if ((this.AddClientCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddClientCompleted(this, new AddClientCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddClientAsync(string surname, string name, string patronymic, string email, string mobile, string identity, string password) {
            this.AddClientAsync(surname, name, patronymic, email, mobile, identity, password, null);
        }
        
        public void AddClientAsync(string surname, string name, string patronymic, string email, string mobile, string identity, string password, object userState) {
            if ((this.onBeginAddClientDelegate == null)) {
                this.onBeginAddClientDelegate = new BeginOperationDelegate(this.OnBeginAddClient);
            }
            if ((this.onEndAddClientDelegate == null)) {
                this.onEndAddClientDelegate = new EndOperationDelegate(this.OnEndAddClient);
            }
            if ((this.onAddClientCompletedDelegate == null)) {
                this.onAddClientCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddClientCompleted);
            }
            base.InvokeAsync(this.onBeginAddClientDelegate, new object[] {
                        surname,
                        name,
                        patronymic,
                        email,
                        mobile,
                        identity,
                        password}, this.onEndAddClientDelegate, this.onAddClientCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginClientLogin(string email, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginClientLogin(email, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.Client Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndClientLogin(System.IAsyncResult result) {
            return base.Channel.EndClientLogin(result);
        }
        
        private System.IAsyncResult OnBeginClientLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string email = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginClientLogin(email, password, callback, asyncState);
        }
        
        private object[] OnEndClientLogin(System.IAsyncResult result) {
            Queue.Services.DTO.Client retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndClientLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnClientLoginCompleted(object state) {
            if ((this.ClientLoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ClientLoginCompleted(this, new ClientLoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ClientLoginAsync(string email, string password) {
            this.ClientLoginAsync(email, password, null);
        }
        
        public void ClientLoginAsync(string email, string password, object userState) {
            if ((this.onBeginClientLoginDelegate == null)) {
                this.onBeginClientLoginDelegate = new BeginOperationDelegate(this.OnBeginClientLogin);
            }
            if ((this.onEndClientLoginDelegate == null)) {
                this.onEndClientLoginDelegate = new EndOperationDelegate(this.OnEndClientLogin);
            }
            if ((this.onClientLoginCompletedDelegate == null)) {
                this.onClientLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnClientLoginCompleted);
            }
            base.InvokeAsync(this.onBeginClientLoginDelegate, new object[] {
                        email,
                        password}, this.onEndClientLoginDelegate, this.onClientLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginClientRestorePassword(string email, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginClientRestorePassword(email, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndClientRestorePassword(System.IAsyncResult result) {
            base.Channel.EndClientRestorePassword(result);
        }
        
        private System.IAsyncResult OnBeginClientRestorePassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string email = ((string)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginClientRestorePassword(email, callback, asyncState);
        }
        
        private object[] OnEndClientRestorePassword(System.IAsyncResult result) {
            ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndClientRestorePassword(result);
            return null;
        }
        
        private void OnClientRestorePasswordCompleted(object state) {
            if ((this.ClientRestorePasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ClientRestorePasswordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ClientRestorePasswordAsync(string email) {
            this.ClientRestorePasswordAsync(email, null);
        }
        
        public void ClientRestorePasswordAsync(string email, object userState) {
            if ((this.onBeginClientRestorePasswordDelegate == null)) {
                this.onBeginClientRestorePasswordDelegate = new BeginOperationDelegate(this.OnBeginClientRestorePassword);
            }
            if ((this.onEndClientRestorePasswordDelegate == null)) {
                this.onEndClientRestorePasswordDelegate = new EndOperationDelegate(this.OnEndClientRestorePassword);
            }
            if ((this.onClientRestorePasswordCompletedDelegate == null)) {
                this.onClientRestorePasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnClientRestorePasswordCompleted);
            }
            base.InvokeAsync(this.onBeginClientRestorePasswordDelegate, new object[] {
                        email}, this.onEndClientRestorePasswordDelegate, this.onClientRestorePasswordCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginEditClient(System.Guid clientId, string surname, string name, string patronymic, string email, string mobile, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditClient(clientId, surname, name, patronymic, email, mobile, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.Client Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndEditClient(System.IAsyncResult result) {
            return base.Channel.EndEditClient(result);
        }
        
        private System.IAsyncResult OnBeginEditClient(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid clientId = ((System.Guid)(inValues[0]));
            string surname = ((string)(inValues[1]));
            string name = ((string)(inValues[2]));
            string patronymic = ((string)(inValues[3]));
            string email = ((string)(inValues[4]));
            string mobile = ((string)(inValues[5]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginEditClient(clientId, surname, name, patronymic, email, mobile, callback, asyncState);
        }
        
        private object[] OnEndEditClient(System.IAsyncResult result) {
            Queue.Services.DTO.Client retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndEditClient(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditClientCompleted(object state) {
            if ((this.EditClientCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditClientCompleted(this, new EditClientCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditClientAsync(System.Guid clientId, string surname, string name, string patronymic, string email, string mobile) {
            this.EditClientAsync(clientId, surname, name, patronymic, email, mobile, null);
        }
        
        public void EditClientAsync(System.Guid clientId, string surname, string name, string patronymic, string email, string mobile, object userState) {
            if ((this.onBeginEditClientDelegate == null)) {
                this.onBeginEditClientDelegate = new BeginOperationDelegate(this.OnBeginEditClient);
            }
            if ((this.onEndEditClientDelegate == null)) {
                this.onEndEditClientDelegate = new EndOperationDelegate(this.OnEndEditClient);
            }
            if ((this.onEditClientCompletedDelegate == null)) {
                this.onEditClientCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditClientCompleted);
            }
            base.InvokeAsync(this.onBeginEditClientDelegate, new object[] {
                        clientId,
                        surname,
                        name,
                        patronymic,
                        email,
                        mobile}, this.onEndEditClientDelegate, this.onEditClientCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginChangeClientPassword(System.Guid clientId, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangeClientPassword(clientId, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndChangeClientPassword(System.IAsyncResult result) {
            base.Channel.EndChangeClientPassword(result);
        }
        
        private System.IAsyncResult OnBeginChangeClientPassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid clientId = ((System.Guid)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginChangeClientPassword(clientId, password, callback, asyncState);
        }
        
        private object[] OnEndChangeClientPassword(System.IAsyncResult result) {
            ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndChangeClientPassword(result);
            return null;
        }
        
        private void OnChangeClientPasswordCompleted(object state) {
            if ((this.ChangeClientPasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangeClientPasswordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangeClientPasswordAsync(System.Guid clientId, string password) {
            this.ChangeClientPasswordAsync(clientId, password, null);
        }
        
        public void ChangeClientPasswordAsync(System.Guid clientId, string password, object userState) {
            if ((this.onBeginChangeClientPasswordDelegate == null)) {
                this.onBeginChangeClientPasswordDelegate = new BeginOperationDelegate(this.OnBeginChangeClientPassword);
            }
            if ((this.onEndChangeClientPasswordDelegate == null)) {
                this.onEndChangeClientPasswordDelegate = new EndOperationDelegate(this.OnEndChangeClientPassword);
            }
            if ((this.onChangeClientPasswordCompletedDelegate == null)) {
                this.onChangeClientPasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangeClientPasswordCompleted);
            }
            base.InvokeAsync(this.onBeginChangeClientPasswordDelegate, new object[] {
                        clientId,
                        password}, this.onEndChangeClientPasswordDelegate, this.onChangeClientPasswordCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginDeleteClient(System.Guid clientId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteClient(clientId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndDeleteClient(System.IAsyncResult result) {
            base.Channel.EndDeleteClient(result);
        }
        
        private System.IAsyncResult OnBeginDeleteClient(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid clientId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginDeleteClient(clientId, callback, asyncState);
        }
        
        private object[] OnEndDeleteClient(System.IAsyncResult result) {
            ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndDeleteClient(result);
            return null;
        }
        
        private void OnDeleteClientCompleted(object state) {
            if ((this.DeleteClientCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteClientCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteClientAsync(System.Guid clientId) {
            this.DeleteClientAsync(clientId, null);
        }
        
        public void DeleteClientAsync(System.Guid clientId, object userState) {
            if ((this.onBeginDeleteClientDelegate == null)) {
                this.onBeginDeleteClientDelegate = new BeginOperationDelegate(this.OnBeginDeleteClient);
            }
            if ((this.onEndDeleteClientDelegate == null)) {
                this.onEndDeleteClientDelegate = new EndOperationDelegate(this.OnEndDeleteClient);
            }
            if ((this.onDeleteClientCompletedDelegate == null)) {
                this.onDeleteClientCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteClientCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteClientDelegate, new object[] {
                        clientId}, this.onEndDeleteClientDelegate, this.onDeleteClientCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginSendPINToEmail(string email, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendPINToEmail(email, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndSendPINToEmail(System.IAsyncResult result) {
            base.Channel.EndSendPINToEmail(result);
        }
        
        private System.IAsyncResult OnBeginSendPINToEmail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string email = ((string)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginSendPINToEmail(email, callback, asyncState);
        }
        
        private object[] OnEndSendPINToEmail(System.IAsyncResult result) {
            ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndSendPINToEmail(result);
            return null;
        }
        
        private void OnSendPINToEmailCompleted(object state) {
            if ((this.SendPINToEmailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendPINToEmailCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendPINToEmailAsync(string email) {
            this.SendPINToEmailAsync(email, null);
        }
        
        public void SendPINToEmailAsync(string email, object userState) {
            if ((this.onBeginSendPINToEmailDelegate == null)) {
                this.onBeginSendPINToEmailDelegate = new BeginOperationDelegate(this.OnBeginSendPINToEmail);
            }
            if ((this.onEndSendPINToEmailDelegate == null)) {
                this.onEndSendPINToEmailDelegate = new EndOperationDelegate(this.OnEndSendPINToEmail);
            }
            if ((this.onSendPINToEmailCompletedDelegate == null)) {
                this.onSendPINToEmailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendPINToEmailCompleted);
            }
            base.InvokeAsync(this.onBeginSendPINToEmailDelegate, new object[] {
                        email}, this.onEndSendPINToEmailDelegate, this.onSendPINToEmailCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginCheckPIN(string email, int source, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckPIN(email, source, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndCheckPIN(System.IAsyncResult result) {
            base.Channel.EndCheckPIN(result);
        }
        
        private System.IAsyncResult OnBeginCheckPIN(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string email = ((string)(inValues[0]));
            int source = ((int)(inValues[1]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginCheckPIN(email, source, callback, asyncState);
        }
        
        private object[] OnEndCheckPIN(System.IAsyncResult result) {
            ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndCheckPIN(result);
            return null;
        }
        
        private void OnCheckPINCompleted(object state) {
            if ((this.CheckPINCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckPINCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckPINAsync(string email, int source) {
            this.CheckPINAsync(email, source, null);
        }
        
        public void CheckPINAsync(string email, int source, object userState) {
            if ((this.onBeginCheckPINDelegate == null)) {
                this.onBeginCheckPINDelegate = new BeginOperationDelegate(this.OnBeginCheckPIN);
            }
            if ((this.onEndCheckPINDelegate == null)) {
                this.onEndCheckPINDelegate = new EndOperationDelegate(this.OnEndCheckPIN);
            }
            if ((this.onCheckPINCompletedDelegate == null)) {
                this.onCheckPINCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckPINCompleted);
            }
            base.InvokeAsync(this.onBeginCheckPINDelegate, new object[] {
                        email,
                        source}, this.onEndCheckPINDelegate, this.onCheckPINCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginFindClientRequests(int startIndex, int maxResults, Queue.Services.DTO.ClientRequestFilter filter, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindClientRequests(startIndex, maxResults, filter, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<Queue.Services.DTO.ClientRequest> Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndFindClientRequests(System.IAsyncResult result) {
            return base.Channel.EndFindClientRequests(result);
        }
        
        private System.IAsyncResult OnBeginFindClientRequests(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            int startIndex = ((int)(inValues[0]));
            int maxResults = ((int)(inValues[1]));
            Queue.Services.DTO.ClientRequestFilter filter = ((Queue.Services.DTO.ClientRequestFilter)(inValues[2]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginFindClientRequests(startIndex, maxResults, filter, callback, asyncState);
        }
        
        private object[] OnEndFindClientRequests(System.IAsyncResult result) {
            System.Collections.Generic.List<Queue.Services.DTO.ClientRequest> retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndFindClientRequests(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindClientRequestsCompleted(object state) {
            if ((this.FindClientRequestsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindClientRequestsCompleted(this, new FindClientRequestsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindClientRequestsAsync(int startIndex, int maxResults, Queue.Services.DTO.ClientRequestFilter filter) {
            this.FindClientRequestsAsync(startIndex, maxResults, filter, null);
        }
        
        public void FindClientRequestsAsync(int startIndex, int maxResults, Queue.Services.DTO.ClientRequestFilter filter, object userState) {
            if ((this.onBeginFindClientRequestsDelegate == null)) {
                this.onBeginFindClientRequestsDelegate = new BeginOperationDelegate(this.OnBeginFindClientRequests);
            }
            if ((this.onEndFindClientRequestsDelegate == null)) {
                this.onEndFindClientRequestsDelegate = new EndOperationDelegate(this.OnEndFindClientRequests);
            }
            if ((this.onFindClientRequestsCompletedDelegate == null)) {
                this.onFindClientRequestsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindClientRequestsCompleted);
            }
            base.InvokeAsync(this.onBeginFindClientRequestsDelegate, new object[] {
                        startIndex,
                        maxResults,
                        filter}, this.onEndFindClientRequestsDelegate, this.onFindClientRequestsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetClientRequest(System.Guid clientRequestId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetClientRequest(clientRequestId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.ClientRequest Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetClientRequest(System.IAsyncResult result) {
            return base.Channel.EndGetClientRequest(result);
        }
        
        private System.IAsyncResult OnBeginGetClientRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid clientRequestId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetClientRequest(clientRequestId, callback, asyncState);
        }
        
        private object[] OnEndGetClientRequest(System.IAsyncResult result) {
            Queue.Services.DTO.ClientRequest retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetClientRequest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetClientRequestCompleted(object state) {
            if ((this.GetClientRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetClientRequestCompleted(this, new GetClientRequestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetClientRequestAsync(System.Guid clientRequestId) {
            this.GetClientRequestAsync(clientRequestId, null);
        }
        
        public void GetClientRequestAsync(System.Guid clientRequestId, object userState) {
            if ((this.onBeginGetClientRequestDelegate == null)) {
                this.onBeginGetClientRequestDelegate = new BeginOperationDelegate(this.OnBeginGetClientRequest);
            }
            if ((this.onEndGetClientRequestDelegate == null)) {
                this.onEndGetClientRequestDelegate = new EndOperationDelegate(this.OnEndGetClientRequest);
            }
            if ((this.onGetClientRequestCompletedDelegate == null)) {
                this.onGetClientRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetClientRequestCompleted);
            }
            base.InvokeAsync(this.onBeginGetClientRequestDelegate, new object[] {
                        clientRequestId}, this.onEndGetClientRequestDelegate, this.onGetClientRequestCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetClientRequestEvents(System.Guid clientRequestId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetClientRequestEvents(clientRequestId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<Queue.Services.DTO.ClientRequestEvent> Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetClientRequestEvents(System.IAsyncResult result) {
            return base.Channel.EndGetClientRequestEvents(result);
        }
        
        private System.IAsyncResult OnBeginGetClientRequestEvents(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid clientRequestId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetClientRequestEvents(clientRequestId, callback, asyncState);
        }
        
        private object[] OnEndGetClientRequestEvents(System.IAsyncResult result) {
            System.Collections.Generic.List<Queue.Services.DTO.ClientRequestEvent> retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetClientRequestEvents(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetClientRequestEventsCompleted(object state) {
            if ((this.GetClientRequestEventsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetClientRequestEventsCompleted(this, new GetClientRequestEventsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetClientRequestEventsAsync(System.Guid clientRequestId) {
            this.GetClientRequestEventsAsync(clientRequestId, null);
        }
        
        public void GetClientRequestEventsAsync(System.Guid clientRequestId, object userState) {
            if ((this.onBeginGetClientRequestEventsDelegate == null)) {
                this.onBeginGetClientRequestEventsDelegate = new BeginOperationDelegate(this.OnBeginGetClientRequestEvents);
            }
            if ((this.onEndGetClientRequestEventsDelegate == null)) {
                this.onEndGetClientRequestEventsDelegate = new EndOperationDelegate(this.OnEndGetClientRequestEvents);
            }
            if ((this.onGetClientRequestEventsCompletedDelegate == null)) {
                this.onGetClientRequestEventsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetClientRequestEventsCompleted);
            }
            base.InvokeAsync(this.onBeginGetClientRequestEventsDelegate, new object[] {
                        clientRequestId}, this.onEndGetClientRequestEventsDelegate, this.onGetClientRequestEventsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginAddEarlyClientRequest(System.Guid clientId, System.Guid serviceId, System.DateTime requestDate, System.TimeSpan requestTime, System.Collections.Generic.Dictionary<System.Guid, object> parameters, int subjects, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddEarlyClientRequest(clientId, serviceId, requestDate, requestTime, parameters, subjects, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.ClientRequest Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndAddEarlyClientRequest(System.IAsyncResult result) {
            return base.Channel.EndAddEarlyClientRequest(result);
        }
        
        private System.IAsyncResult OnBeginAddEarlyClientRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid clientId = ((System.Guid)(inValues[0]));
            System.Guid serviceId = ((System.Guid)(inValues[1]));
            System.DateTime requestDate = ((System.DateTime)(inValues[2]));
            System.TimeSpan requestTime = ((System.TimeSpan)(inValues[3]));
            System.Collections.Generic.Dictionary<System.Guid, object> parameters = ((System.Collections.Generic.Dictionary<System.Guid, object>)(inValues[4]));
            int subjects = ((int)(inValues[5]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginAddEarlyClientRequest(clientId, serviceId, requestDate, requestTime, parameters, subjects, callback, asyncState);
        }
        
        private object[] OnEndAddEarlyClientRequest(System.IAsyncResult result) {
            Queue.Services.DTO.ClientRequest retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndAddEarlyClientRequest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddEarlyClientRequestCompleted(object state) {
            if ((this.AddEarlyClientRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddEarlyClientRequestCompleted(this, new AddEarlyClientRequestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddEarlyClientRequestAsync(System.Guid clientId, System.Guid serviceId, System.DateTime requestDate, System.TimeSpan requestTime, System.Collections.Generic.Dictionary<System.Guid, object> parameters, int subjects) {
            this.AddEarlyClientRequestAsync(clientId, serviceId, requestDate, requestTime, parameters, subjects, null);
        }
        
        public void AddEarlyClientRequestAsync(System.Guid clientId, System.Guid serviceId, System.DateTime requestDate, System.TimeSpan requestTime, System.Collections.Generic.Dictionary<System.Guid, object> parameters, int subjects, object userState) {
            if ((this.onBeginAddEarlyClientRequestDelegate == null)) {
                this.onBeginAddEarlyClientRequestDelegate = new BeginOperationDelegate(this.OnBeginAddEarlyClientRequest);
            }
            if ((this.onEndAddEarlyClientRequestDelegate == null)) {
                this.onEndAddEarlyClientRequestDelegate = new EndOperationDelegate(this.OnEndAddEarlyClientRequest);
            }
            if ((this.onAddEarlyClientRequestCompletedDelegate == null)) {
                this.onAddEarlyClientRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddEarlyClientRequestCompleted);
            }
            base.InvokeAsync(this.onBeginAddEarlyClientRequestDelegate, new object[] {
                        clientId,
                        serviceId,
                        requestDate,
                        requestTime,
                        parameters,
                        subjects}, this.onEndAddEarlyClientRequestDelegate, this.onAddEarlyClientRequestCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginAddLiveClientRequest(System.Guid clientId, System.Guid serviceId, bool isPriority, System.Collections.Generic.Dictionary<System.Guid, object> parameters, int subjects, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddLiveClientRequest(clientId, serviceId, isPriority, parameters, subjects, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.ClientRequest Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndAddLiveClientRequest(System.IAsyncResult result) {
            return base.Channel.EndAddLiveClientRequest(result);
        }
        
        private System.IAsyncResult OnBeginAddLiveClientRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid clientId = ((System.Guid)(inValues[0]));
            System.Guid serviceId = ((System.Guid)(inValues[1]));
            bool isPriority = ((bool)(inValues[2]));
            System.Collections.Generic.Dictionary<System.Guid, object> parameters = ((System.Collections.Generic.Dictionary<System.Guid, object>)(inValues[3]));
            int subjects = ((int)(inValues[4]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginAddLiveClientRequest(clientId, serviceId, isPriority, parameters, subjects, callback, asyncState);
        }
        
        private object[] OnEndAddLiveClientRequest(System.IAsyncResult result) {
            Queue.Services.DTO.ClientRequest retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndAddLiveClientRequest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddLiveClientRequestCompleted(object state) {
            if ((this.AddLiveClientRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddLiveClientRequestCompleted(this, new AddLiveClientRequestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddLiveClientRequestAsync(System.Guid clientId, System.Guid serviceId, bool isPriority, System.Collections.Generic.Dictionary<System.Guid, object> parameters, int subjects) {
            this.AddLiveClientRequestAsync(clientId, serviceId, isPriority, parameters, subjects, null);
        }
        
        public void AddLiveClientRequestAsync(System.Guid clientId, System.Guid serviceId, bool isPriority, System.Collections.Generic.Dictionary<System.Guid, object> parameters, int subjects, object userState) {
            if ((this.onBeginAddLiveClientRequestDelegate == null)) {
                this.onBeginAddLiveClientRequestDelegate = new BeginOperationDelegate(this.OnBeginAddLiveClientRequest);
            }
            if ((this.onEndAddLiveClientRequestDelegate == null)) {
                this.onEndAddLiveClientRequestDelegate = new EndOperationDelegate(this.OnEndAddLiveClientRequest);
            }
            if ((this.onAddLiveClientRequestCompletedDelegate == null)) {
                this.onAddLiveClientRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddLiveClientRequestCompleted);
            }
            base.InvokeAsync(this.onBeginAddLiveClientRequestDelegate, new object[] {
                        clientId,
                        serviceId,
                        isPriority,
                        parameters,
                        subjects}, this.onEndAddLiveClientRequestDelegate, this.onAddLiveClientRequestCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetClientRequestCoupon(System.Guid clientRequestId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetClientRequestCoupon(clientRequestId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetClientRequestCoupon(System.IAsyncResult result) {
            return base.Channel.EndGetClientRequestCoupon(result);
        }
        
        private System.IAsyncResult OnBeginGetClientRequestCoupon(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid clientRequestId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetClientRequestCoupon(clientRequestId, callback, asyncState);
        }
        
        private object[] OnEndGetClientRequestCoupon(System.IAsyncResult result) {
            string retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetClientRequestCoupon(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetClientRequestCouponCompleted(object state) {
            if ((this.GetClientRequestCouponCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetClientRequestCouponCompleted(this, new GetClientRequestCouponCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetClientRequestCouponAsync(System.Guid clientRequestId) {
            this.GetClientRequestCouponAsync(clientRequestId, null);
        }
        
        public void GetClientRequestCouponAsync(System.Guid clientRequestId, object userState) {
            if ((this.onBeginGetClientRequestCouponDelegate == null)) {
                this.onBeginGetClientRequestCouponDelegate = new BeginOperationDelegate(this.OnBeginGetClientRequestCoupon);
            }
            if ((this.onEndGetClientRequestCouponDelegate == null)) {
                this.onEndGetClientRequestCouponDelegate = new EndOperationDelegate(this.OnEndGetClientRequestCoupon);
            }
            if ((this.onGetClientRequestCouponCompletedDelegate == null)) {
                this.onGetClientRequestCouponCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetClientRequestCouponCompleted);
            }
            base.InvokeAsync(this.onBeginGetClientRequestCouponDelegate, new object[] {
                        clientRequestId}, this.onEndGetClientRequestCouponDelegate, this.onGetClientRequestCouponCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginChangeClientRequestPriority(System.Guid clientRequestId, bool isPriority, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangeClientRequestPriority(clientRequestId, isPriority, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.ClientRequest Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndChangeClientRequestPriority(System.IAsyncResult result) {
            return base.Channel.EndChangeClientRequestPriority(result);
        }
        
        private System.IAsyncResult OnBeginChangeClientRequestPriority(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid clientRequestId = ((System.Guid)(inValues[0]));
            bool isPriority = ((bool)(inValues[1]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginChangeClientRequestPriority(clientRequestId, isPriority, callback, asyncState);
        }
        
        private object[] OnEndChangeClientRequestPriority(System.IAsyncResult result) {
            Queue.Services.DTO.ClientRequest retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndChangeClientRequestPriority(result);
            return new object[] {
                    retVal};
        }
        
        private void OnChangeClientRequestPriorityCompleted(object state) {
            if ((this.ChangeClientRequestPriorityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangeClientRequestPriorityCompleted(this, new ChangeClientRequestPriorityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangeClientRequestPriorityAsync(System.Guid clientRequestId, bool isPriority) {
            this.ChangeClientRequestPriorityAsync(clientRequestId, isPriority, null);
        }
        
        public void ChangeClientRequestPriorityAsync(System.Guid clientRequestId, bool isPriority, object userState) {
            if ((this.onBeginChangeClientRequestPriorityDelegate == null)) {
                this.onBeginChangeClientRequestPriorityDelegate = new BeginOperationDelegate(this.OnBeginChangeClientRequestPriority);
            }
            if ((this.onEndChangeClientRequestPriorityDelegate == null)) {
                this.onEndChangeClientRequestPriorityDelegate = new EndOperationDelegate(this.OnEndChangeClientRequestPriority);
            }
            if ((this.onChangeClientRequestPriorityCompletedDelegate == null)) {
                this.onChangeClientRequestPriorityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangeClientRequestPriorityCompleted);
            }
            base.InvokeAsync(this.onBeginChangeClientRequestPriorityDelegate, new object[] {
                        clientRequestId,
                        isPriority}, this.onEndChangeClientRequestPriorityDelegate, this.onChangeClientRequestPriorityCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginChangeClientRequestSubjects(System.Guid clientRequestId, int subjects, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangeClientRequestSubjects(clientRequestId, subjects, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.ClientRequest Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndChangeClientRequestSubjects(System.IAsyncResult result) {
            return base.Channel.EndChangeClientRequestSubjects(result);
        }
        
        private System.IAsyncResult OnBeginChangeClientRequestSubjects(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid clientRequestId = ((System.Guid)(inValues[0]));
            int subjects = ((int)(inValues[1]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginChangeClientRequestSubjects(clientRequestId, subjects, callback, asyncState);
        }
        
        private object[] OnEndChangeClientRequestSubjects(System.IAsyncResult result) {
            Queue.Services.DTO.ClientRequest retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndChangeClientRequestSubjects(result);
            return new object[] {
                    retVal};
        }
        
        private void OnChangeClientRequestSubjectsCompleted(object state) {
            if ((this.ChangeClientRequestSubjectsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangeClientRequestSubjectsCompleted(this, new ChangeClientRequestSubjectsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangeClientRequestSubjectsAsync(System.Guid clientRequestId, int subjects) {
            this.ChangeClientRequestSubjectsAsync(clientRequestId, subjects, null);
        }
        
        public void ChangeClientRequestSubjectsAsync(System.Guid clientRequestId, int subjects, object userState) {
            if ((this.onBeginChangeClientRequestSubjectsDelegate == null)) {
                this.onBeginChangeClientRequestSubjectsDelegate = new BeginOperationDelegate(this.OnBeginChangeClientRequestSubjects);
            }
            if ((this.onEndChangeClientRequestSubjectsDelegate == null)) {
                this.onEndChangeClientRequestSubjectsDelegate = new EndOperationDelegate(this.OnEndChangeClientRequestSubjects);
            }
            if ((this.onChangeClientRequestSubjectsCompletedDelegate == null)) {
                this.onChangeClientRequestSubjectsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangeClientRequestSubjectsCompleted);
            }
            base.InvokeAsync(this.onBeginChangeClientRequestSubjectsDelegate, new object[] {
                        clientRequestId,
                        subjects}, this.onEndChangeClientRequestSubjectsDelegate, this.onChangeClientRequestSubjectsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginChangeClientRequestService(System.Guid clientRequestId, System.Guid serviceId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangeClientRequestService(clientRequestId, serviceId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.ClientRequest Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndChangeClientRequestService(System.IAsyncResult result) {
            return base.Channel.EndChangeClientRequestService(result);
        }
        
        private System.IAsyncResult OnBeginChangeClientRequestService(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid clientRequestId = ((System.Guid)(inValues[0]));
            System.Guid serviceId = ((System.Guid)(inValues[1]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginChangeClientRequestService(clientRequestId, serviceId, callback, asyncState);
        }
        
        private object[] OnEndChangeClientRequestService(System.IAsyncResult result) {
            Queue.Services.DTO.ClientRequest retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndChangeClientRequestService(result);
            return new object[] {
                    retVal};
        }
        
        private void OnChangeClientRequestServiceCompleted(object state) {
            if ((this.ChangeClientRequestServiceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangeClientRequestServiceCompleted(this, new ChangeClientRequestServiceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangeClientRequestServiceAsync(System.Guid clientRequestId, System.Guid serviceId) {
            this.ChangeClientRequestServiceAsync(clientRequestId, serviceId, null);
        }
        
        public void ChangeClientRequestServiceAsync(System.Guid clientRequestId, System.Guid serviceId, object userState) {
            if ((this.onBeginChangeClientRequestServiceDelegate == null)) {
                this.onBeginChangeClientRequestServiceDelegate = new BeginOperationDelegate(this.OnBeginChangeClientRequestService);
            }
            if ((this.onEndChangeClientRequestServiceDelegate == null)) {
                this.onEndChangeClientRequestServiceDelegate = new EndOperationDelegate(this.OnEndChangeClientRequestService);
            }
            if ((this.onChangeClientRequestServiceCompletedDelegate == null)) {
                this.onChangeClientRequestServiceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangeClientRequestServiceCompleted);
            }
            base.InvokeAsync(this.onBeginChangeClientRequestServiceDelegate, new object[] {
                        clientRequestId,
                        serviceId}, this.onEndChangeClientRequestServiceDelegate, this.onChangeClientRequestServiceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginChangeClientRequestOperator(System.Guid clientRequestId, System.Guid operatorId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangeClientRequestOperator(clientRequestId, operatorId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.ClientRequest Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndChangeClientRequestOperator(System.IAsyncResult result) {
            return base.Channel.EndChangeClientRequestOperator(result);
        }
        
        private System.IAsyncResult OnBeginChangeClientRequestOperator(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid clientRequestId = ((System.Guid)(inValues[0]));
            System.Guid operatorId = ((System.Guid)(inValues[1]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginChangeClientRequestOperator(clientRequestId, operatorId, callback, asyncState);
        }
        
        private object[] OnEndChangeClientRequestOperator(System.IAsyncResult result) {
            Queue.Services.DTO.ClientRequest retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndChangeClientRequestOperator(result);
            return new object[] {
                    retVal};
        }
        
        private void OnChangeClientRequestOperatorCompleted(object state) {
            if ((this.ChangeClientRequestOperatorCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangeClientRequestOperatorCompleted(this, new ChangeClientRequestOperatorCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangeClientRequestOperatorAsync(System.Guid clientRequestId, System.Guid operatorId) {
            this.ChangeClientRequestOperatorAsync(clientRequestId, operatorId, null);
        }
        
        public void ChangeClientRequestOperatorAsync(System.Guid clientRequestId, System.Guid operatorId, object userState) {
            if ((this.onBeginChangeClientRequestOperatorDelegate == null)) {
                this.onBeginChangeClientRequestOperatorDelegate = new BeginOperationDelegate(this.OnBeginChangeClientRequestOperator);
            }
            if ((this.onEndChangeClientRequestOperatorDelegate == null)) {
                this.onEndChangeClientRequestOperatorDelegate = new EndOperationDelegate(this.OnEndChangeClientRequestOperator);
            }
            if ((this.onChangeClientRequestOperatorCompletedDelegate == null)) {
                this.onChangeClientRequestOperatorCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangeClientRequestOperatorCompleted);
            }
            base.InvokeAsync(this.onBeginChangeClientRequestOperatorDelegate, new object[] {
                        clientRequestId,
                        operatorId}, this.onEndChangeClientRequestOperatorDelegate, this.onChangeClientRequestOperatorCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginCancelClientRequest(System.Guid clientRequestId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCancelClientRequest(clientRequestId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.ClientRequest Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndCancelClientRequest(System.IAsyncResult result) {
            return base.Channel.EndCancelClientRequest(result);
        }
        
        private System.IAsyncResult OnBeginCancelClientRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid clientRequestId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginCancelClientRequest(clientRequestId, callback, asyncState);
        }
        
        private object[] OnEndCancelClientRequest(System.IAsyncResult result) {
            Queue.Services.DTO.ClientRequest retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndCancelClientRequest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCancelClientRequestCompleted(object state) {
            if ((this.CancelClientRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CancelClientRequestCompleted(this, new CancelClientRequestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CancelClientRequestAsync(System.Guid clientRequestId) {
            this.CancelClientRequestAsync(clientRequestId, null);
        }
        
        public void CancelClientRequestAsync(System.Guid clientRequestId, object userState) {
            if ((this.onBeginCancelClientRequestDelegate == null)) {
                this.onBeginCancelClientRequestDelegate = new BeginOperationDelegate(this.OnBeginCancelClientRequest);
            }
            if ((this.onEndCancelClientRequestDelegate == null)) {
                this.onEndCancelClientRequestDelegate = new EndOperationDelegate(this.OnEndCancelClientRequest);
            }
            if ((this.onCancelClientRequestCompletedDelegate == null)) {
                this.onCancelClientRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCancelClientRequestCompleted);
            }
            base.InvokeAsync(this.onBeginCancelClientRequestDelegate, new object[] {
                        clientRequestId}, this.onEndCancelClientRequestDelegate, this.onCancelClientRequestCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginRestoreClientRequest(System.Guid clientRequestId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRestoreClientRequest(clientRequestId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.ClientRequest Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndRestoreClientRequest(System.IAsyncResult result) {
            return base.Channel.EndRestoreClientRequest(result);
        }
        
        private System.IAsyncResult OnBeginRestoreClientRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid clientRequestId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginRestoreClientRequest(clientRequestId, callback, asyncState);
        }
        
        private object[] OnEndRestoreClientRequest(System.IAsyncResult result) {
            Queue.Services.DTO.ClientRequest retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndRestoreClientRequest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRestoreClientRequestCompleted(object state) {
            if ((this.RestoreClientRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RestoreClientRequestCompleted(this, new RestoreClientRequestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RestoreClientRequestAsync(System.Guid clientRequestId) {
            this.RestoreClientRequestAsync(clientRequestId, null);
        }
        
        public void RestoreClientRequestAsync(System.Guid clientRequestId, object userState) {
            if ((this.onBeginRestoreClientRequestDelegate == null)) {
                this.onBeginRestoreClientRequestDelegate = new BeginOperationDelegate(this.OnBeginRestoreClientRequest);
            }
            if ((this.onEndRestoreClientRequestDelegate == null)) {
                this.onEndRestoreClientRequestDelegate = new EndOperationDelegate(this.OnEndRestoreClientRequest);
            }
            if ((this.onRestoreClientRequestCompletedDelegate == null)) {
                this.onRestoreClientRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRestoreClientRequestCompleted);
            }
            base.InvokeAsync(this.onBeginRestoreClientRequestDelegate, new object[] {
                        clientRequestId}, this.onEndRestoreClientRequestDelegate, this.onRestoreClientRequestCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginPostponeClientRequest(System.Guid clientRequestId, System.TimeSpan postponeTime, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPostponeClientRequest(clientRequestId, postponeTime, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.ClientRequest Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndPostponeClientRequest(System.IAsyncResult result) {
            return base.Channel.EndPostponeClientRequest(result);
        }
        
        private System.IAsyncResult OnBeginPostponeClientRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid clientRequestId = ((System.Guid)(inValues[0]));
            System.TimeSpan postponeTime = ((System.TimeSpan)(inValues[1]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginPostponeClientRequest(clientRequestId, postponeTime, callback, asyncState);
        }
        
        private object[] OnEndPostponeClientRequest(System.IAsyncResult result) {
            Queue.Services.DTO.ClientRequest retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndPostponeClientRequest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPostponeClientRequestCompleted(object state) {
            if ((this.PostponeClientRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PostponeClientRequestCompleted(this, new PostponeClientRequestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PostponeClientRequestAsync(System.Guid clientRequestId, System.TimeSpan postponeTime) {
            this.PostponeClientRequestAsync(clientRequestId, postponeTime, null);
        }
        
        public void PostponeClientRequestAsync(System.Guid clientRequestId, System.TimeSpan postponeTime, object userState) {
            if ((this.onBeginPostponeClientRequestDelegate == null)) {
                this.onBeginPostponeClientRequestDelegate = new BeginOperationDelegate(this.OnBeginPostponeClientRequest);
            }
            if ((this.onEndPostponeClientRequestDelegate == null)) {
                this.onEndPostponeClientRequestDelegate = new EndOperationDelegate(this.OnEndPostponeClientRequest);
            }
            if ((this.onPostponeClientRequestCompletedDelegate == null)) {
                this.onPostponeClientRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPostponeClientRequestCompleted);
            }
            base.InvokeAsync(this.onBeginPostponeClientRequestDelegate, new object[] {
                        clientRequestId,
                        postponeTime}, this.onEndPostponeClientRequestDelegate, this.onPostponeClientRequestCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetOperatorClientRequestPlans(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOperatorClientRequestPlans(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<Queue.Services.DTO.ClientRequestPlan> Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetOperatorClientRequestPlans(System.IAsyncResult result) {
            return base.Channel.EndGetOperatorClientRequestPlans(result);
        }
        
        private System.IAsyncResult OnBeginGetOperatorClientRequestPlans(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetOperatorClientRequestPlans(callback, asyncState);
        }
        
        private object[] OnEndGetOperatorClientRequestPlans(System.IAsyncResult result) {
            System.Collections.Generic.List<Queue.Services.DTO.ClientRequestPlan> retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetOperatorClientRequestPlans(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOperatorClientRequestPlansCompleted(object state) {
            if ((this.GetOperatorClientRequestPlansCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOperatorClientRequestPlansCompleted(this, new GetOperatorClientRequestPlansCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOperatorClientRequestPlansAsync() {
            this.GetOperatorClientRequestPlansAsync(null);
        }
        
        public void GetOperatorClientRequestPlansAsync(object userState) {
            if ((this.onBeginGetOperatorClientRequestPlansDelegate == null)) {
                this.onBeginGetOperatorClientRequestPlansDelegate = new BeginOperationDelegate(this.OnBeginGetOperatorClientRequestPlans);
            }
            if ((this.onEndGetOperatorClientRequestPlansDelegate == null)) {
                this.onEndGetOperatorClientRequestPlansDelegate = new EndOperationDelegate(this.OnEndGetOperatorClientRequestPlans);
            }
            if ((this.onGetOperatorClientRequestPlansCompletedDelegate == null)) {
                this.onGetOperatorClientRequestPlansCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOperatorClientRequestPlansCompleted);
            }
            base.InvokeAsync(this.onBeginGetOperatorClientRequestPlansDelegate, null, this.onEndGetOperatorClientRequestPlansDelegate, this.onGetOperatorClientRequestPlansCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetCurrentClientRequests(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCurrentClientRequests(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<Queue.Services.DTO.ClientRequest> Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetCurrentClientRequests(System.IAsyncResult result) {
            return base.Channel.EndGetCurrentClientRequests(result);
        }
        
        private System.IAsyncResult OnBeginGetCurrentClientRequests(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetCurrentClientRequests(callback, asyncState);
        }
        
        private object[] OnEndGetCurrentClientRequests(System.IAsyncResult result) {
            System.Collections.Generic.List<Queue.Services.DTO.ClientRequest> retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetCurrentClientRequests(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCurrentClientRequestsCompleted(object state) {
            if ((this.GetCurrentClientRequestsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCurrentClientRequestsCompleted(this, new GetCurrentClientRequestsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCurrentClientRequestsAsync() {
            this.GetCurrentClientRequestsAsync(null);
        }
        
        public void GetCurrentClientRequestsAsync(object userState) {
            if ((this.onBeginGetCurrentClientRequestsDelegate == null)) {
                this.onBeginGetCurrentClientRequestsDelegate = new BeginOperationDelegate(this.OnBeginGetCurrentClientRequests);
            }
            if ((this.onEndGetCurrentClientRequestsDelegate == null)) {
                this.onEndGetCurrentClientRequestsDelegate = new EndOperationDelegate(this.OnEndGetCurrentClientRequests);
            }
            if ((this.onGetCurrentClientRequestsCompletedDelegate == null)) {
                this.onGetCurrentClientRequestsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCurrentClientRequestsCompleted);
            }
            base.InvokeAsync(this.onBeginGetCurrentClientRequestsDelegate, null, this.onEndGetCurrentClientRequestsDelegate, this.onGetCurrentClientRequestsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetCurrentClientRequest(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCurrentClientRequest(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.ClientRequest Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetCurrentClientRequest(System.IAsyncResult result) {
            return base.Channel.EndGetCurrentClientRequest(result);
        }
        
        private System.IAsyncResult OnBeginGetCurrentClientRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetCurrentClientRequest(callback, asyncState);
        }
        
        private object[] OnEndGetCurrentClientRequest(System.IAsyncResult result) {
            Queue.Services.DTO.ClientRequest retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetCurrentClientRequest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCurrentClientRequestCompleted(object state) {
            if ((this.GetCurrentClientRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCurrentClientRequestCompleted(this, new GetCurrentClientRequestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCurrentClientRequestAsync() {
            this.GetCurrentClientRequestAsync(null);
        }
        
        public void GetCurrentClientRequestAsync(object userState) {
            if ((this.onBeginGetCurrentClientRequestDelegate == null)) {
                this.onBeginGetCurrentClientRequestDelegate = new BeginOperationDelegate(this.OnBeginGetCurrentClientRequest);
            }
            if ((this.onEndGetCurrentClientRequestDelegate == null)) {
                this.onEndGetCurrentClientRequestDelegate = new EndOperationDelegate(this.OnEndGetCurrentClientRequest);
            }
            if ((this.onGetCurrentClientRequestCompletedDelegate == null)) {
                this.onGetCurrentClientRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCurrentClientRequestCompleted);
            }
            base.InvokeAsync(this.onBeginGetCurrentClientRequestDelegate, null, this.onEndGetCurrentClientRequestDelegate, this.onGetCurrentClientRequestCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginUpdateCurrentClientRequest(Queue.Model.Common.ClientRequestState state, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateCurrentClientRequest(state, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndUpdateCurrentClientRequest(System.IAsyncResult result) {
            base.Channel.EndUpdateCurrentClientRequest(result);
        }
        
        private System.IAsyncResult OnBeginUpdateCurrentClientRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            Queue.Model.Common.ClientRequestState state = ((Queue.Model.Common.ClientRequestState)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginUpdateCurrentClientRequest(state, callback, asyncState);
        }
        
        private object[] OnEndUpdateCurrentClientRequest(System.IAsyncResult result) {
            ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndUpdateCurrentClientRequest(result);
            return null;
        }
        
        private void OnUpdateCurrentClientRequestCompleted(object state) {
            if ((this.UpdateCurrentClientRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateCurrentClientRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateCurrentClientRequestAsync(Queue.Model.Common.ClientRequestState state) {
            this.UpdateCurrentClientRequestAsync(state, null);
        }
        
        public void UpdateCurrentClientRequestAsync(Queue.Model.Common.ClientRequestState state, object userState) {
            if ((this.onBeginUpdateCurrentClientRequestDelegate == null)) {
                this.onBeginUpdateCurrentClientRequestDelegate = new BeginOperationDelegate(this.OnBeginUpdateCurrentClientRequest);
            }
            if ((this.onEndUpdateCurrentClientRequestDelegate == null)) {
                this.onEndUpdateCurrentClientRequestDelegate = new EndOperationDelegate(this.OnEndUpdateCurrentClientRequest);
            }
            if ((this.onUpdateCurrentClientRequestCompletedDelegate == null)) {
                this.onUpdateCurrentClientRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateCurrentClientRequestCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateCurrentClientRequestDelegate, new object[] {
                        state}, this.onEndUpdateCurrentClientRequestDelegate, this.onUpdateCurrentClientRequestCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginPostponeCurrentClientRequest(System.TimeSpan postponeTime, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPostponeCurrentClientRequest(postponeTime, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndPostponeCurrentClientRequest(System.IAsyncResult result) {
            base.Channel.EndPostponeCurrentClientRequest(result);
        }
        
        private System.IAsyncResult OnBeginPostponeCurrentClientRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.TimeSpan postponeTime = ((System.TimeSpan)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginPostponeCurrentClientRequest(postponeTime, callback, asyncState);
        }
        
        private object[] OnEndPostponeCurrentClientRequest(System.IAsyncResult result) {
            ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndPostponeCurrentClientRequest(result);
            return null;
        }
        
        private void OnPostponeCurrentClientRequestCompleted(object state) {
            if ((this.PostponeCurrentClientRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PostponeCurrentClientRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PostponeCurrentClientRequestAsync(System.TimeSpan postponeTime) {
            this.PostponeCurrentClientRequestAsync(postponeTime, null);
        }
        
        public void PostponeCurrentClientRequestAsync(System.TimeSpan postponeTime, object userState) {
            if ((this.onBeginPostponeCurrentClientRequestDelegate == null)) {
                this.onBeginPostponeCurrentClientRequestDelegate = new BeginOperationDelegate(this.OnBeginPostponeCurrentClientRequest);
            }
            if ((this.onEndPostponeCurrentClientRequestDelegate == null)) {
                this.onEndPostponeCurrentClientRequestDelegate = new EndOperationDelegate(this.OnEndPostponeCurrentClientRequest);
            }
            if ((this.onPostponeCurrentClientRequestCompletedDelegate == null)) {
                this.onPostponeCurrentClientRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPostponeCurrentClientRequestCompleted);
            }
            base.InvokeAsync(this.onBeginPostponeCurrentClientRequestDelegate, new object[] {
                        postponeTime}, this.onEndPostponeCurrentClientRequestDelegate, this.onPostponeCurrentClientRequestCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginReturnCurrentClientRequest(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReturnCurrentClientRequest(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndReturnCurrentClientRequest(System.IAsyncResult result) {
            base.Channel.EndReturnCurrentClientRequest(result);
        }
        
        private System.IAsyncResult OnBeginReturnCurrentClientRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginReturnCurrentClientRequest(callback, asyncState);
        }
        
        private object[] OnEndReturnCurrentClientRequest(System.IAsyncResult result) {
            ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndReturnCurrentClientRequest(result);
            return null;
        }
        
        private void OnReturnCurrentClientRequestCompleted(object state) {
            if ((this.ReturnCurrentClientRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReturnCurrentClientRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReturnCurrentClientRequestAsync() {
            this.ReturnCurrentClientRequestAsync(null);
        }
        
        public void ReturnCurrentClientRequestAsync(object userState) {
            if ((this.onBeginReturnCurrentClientRequestDelegate == null)) {
                this.onBeginReturnCurrentClientRequestDelegate = new BeginOperationDelegate(this.OnBeginReturnCurrentClientRequest);
            }
            if ((this.onEndReturnCurrentClientRequestDelegate == null)) {
                this.onEndReturnCurrentClientRequestDelegate = new EndOperationDelegate(this.OnEndReturnCurrentClientRequest);
            }
            if ((this.onReturnCurrentClientRequestCompletedDelegate == null)) {
                this.onReturnCurrentClientRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReturnCurrentClientRequestCompleted);
            }
            base.InvokeAsync(this.onBeginReturnCurrentClientRequestDelegate, null, this.onEndReturnCurrentClientRequestDelegate, this.onReturnCurrentClientRequestCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginChangeCurrentClientRequestService(System.Guid serviceId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangeCurrentClientRequestService(serviceId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.ClientRequest Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndChangeCurrentClientRequestService(System.IAsyncResult result) {
            return base.Channel.EndChangeCurrentClientRequestService(result);
        }
        
        private System.IAsyncResult OnBeginChangeCurrentClientRequestService(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid serviceId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginChangeCurrentClientRequestService(serviceId, callback, asyncState);
        }
        
        private object[] OnEndChangeCurrentClientRequestService(System.IAsyncResult result) {
            Queue.Services.DTO.ClientRequest retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndChangeCurrentClientRequestService(result);
            return new object[] {
                    retVal};
        }
        
        private void OnChangeCurrentClientRequestServiceCompleted(object state) {
            if ((this.ChangeCurrentClientRequestServiceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangeCurrentClientRequestServiceCompleted(this, new ChangeCurrentClientRequestServiceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangeCurrentClientRequestServiceAsync(System.Guid serviceId) {
            this.ChangeCurrentClientRequestServiceAsync(serviceId, null);
        }
        
        public void ChangeCurrentClientRequestServiceAsync(System.Guid serviceId, object userState) {
            if ((this.onBeginChangeCurrentClientRequestServiceDelegate == null)) {
                this.onBeginChangeCurrentClientRequestServiceDelegate = new BeginOperationDelegate(this.OnBeginChangeCurrentClientRequestService);
            }
            if ((this.onEndChangeCurrentClientRequestServiceDelegate == null)) {
                this.onEndChangeCurrentClientRequestServiceDelegate = new EndOperationDelegate(this.OnEndChangeCurrentClientRequestService);
            }
            if ((this.onChangeCurrentClientRequestServiceCompletedDelegate == null)) {
                this.onChangeCurrentClientRequestServiceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangeCurrentClientRequestServiceCompleted);
            }
            base.InvokeAsync(this.onBeginChangeCurrentClientRequestServiceDelegate, new object[] {
                        serviceId}, this.onEndChangeCurrentClientRequestServiceDelegate, this.onChangeCurrentClientRequestServiceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginChangeCurrentClientRequestServiceType(Queue.Model.Common.ServiceType serviceType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangeCurrentClientRequestServiceType(serviceType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.ClientRequest Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndChangeCurrentClientRequestServiceType(System.IAsyncResult result) {
            return base.Channel.EndChangeCurrentClientRequestServiceType(result);
        }
        
        private System.IAsyncResult OnBeginChangeCurrentClientRequestServiceType(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            Queue.Model.Common.ServiceType serviceType = ((Queue.Model.Common.ServiceType)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginChangeCurrentClientRequestServiceType(serviceType, callback, asyncState);
        }
        
        private object[] OnEndChangeCurrentClientRequestServiceType(System.IAsyncResult result) {
            Queue.Services.DTO.ClientRequest retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndChangeCurrentClientRequestServiceType(result);
            return new object[] {
                    retVal};
        }
        
        private void OnChangeCurrentClientRequestServiceTypeCompleted(object state) {
            if ((this.ChangeCurrentClientRequestServiceTypeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangeCurrentClientRequestServiceTypeCompleted(this, new ChangeCurrentClientRequestServiceTypeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangeCurrentClientRequestServiceTypeAsync(Queue.Model.Common.ServiceType serviceType) {
            this.ChangeCurrentClientRequestServiceTypeAsync(serviceType, null);
        }
        
        public void ChangeCurrentClientRequestServiceTypeAsync(Queue.Model.Common.ServiceType serviceType, object userState) {
            if ((this.onBeginChangeCurrentClientRequestServiceTypeDelegate == null)) {
                this.onBeginChangeCurrentClientRequestServiceTypeDelegate = new BeginOperationDelegate(this.OnBeginChangeCurrentClientRequestServiceType);
            }
            if ((this.onEndChangeCurrentClientRequestServiceTypeDelegate == null)) {
                this.onEndChangeCurrentClientRequestServiceTypeDelegate = new EndOperationDelegate(this.OnEndChangeCurrentClientRequestServiceType);
            }
            if ((this.onChangeCurrentClientRequestServiceTypeCompletedDelegate == null)) {
                this.onChangeCurrentClientRequestServiceTypeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangeCurrentClientRequestServiceTypeCompleted);
            }
            base.InvokeAsync(this.onBeginChangeCurrentClientRequestServiceTypeDelegate, new object[] {
                        serviceType}, this.onEndChangeCurrentClientRequestServiceTypeDelegate, this.onChangeCurrentClientRequestServiceTypeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginCallCurrentClient(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCallCurrentClient(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndCallCurrentClient(System.IAsyncResult result) {
            base.Channel.EndCallCurrentClient(result);
        }
        
        private System.IAsyncResult OnBeginCallCurrentClient(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginCallCurrentClient(callback, asyncState);
        }
        
        private object[] OnEndCallCurrentClient(System.IAsyncResult result) {
            ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndCallCurrentClient(result);
            return null;
        }
        
        private void OnCallCurrentClientCompleted(object state) {
            if ((this.CallCurrentClientCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CallCurrentClientCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CallCurrentClientAsync() {
            this.CallCurrentClientAsync(null);
        }
        
        public void CallCurrentClientAsync(object userState) {
            if ((this.onBeginCallCurrentClientDelegate == null)) {
                this.onBeginCallCurrentClientDelegate = new BeginOperationDelegate(this.OnBeginCallCurrentClient);
            }
            if ((this.onEndCallCurrentClientDelegate == null)) {
                this.onEndCallCurrentClientDelegate = new EndOperationDelegate(this.OnEndCallCurrentClient);
            }
            if ((this.onCallCurrentClientCompletedDelegate == null)) {
                this.onCallCurrentClientCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCallCurrentClientCompleted);
            }
            base.InvokeAsync(this.onBeginCallCurrentClientDelegate, null, this.onEndCallCurrentClientDelegate, this.onCallCurrentClientCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetQueuePlan(System.DateTime planDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetQueuePlan(planDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.QueuePlan Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetQueuePlan(System.IAsyncResult result) {
            return base.Channel.EndGetQueuePlan(result);
        }
        
        private System.IAsyncResult OnBeginGetQueuePlan(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.DateTime planDate = ((System.DateTime)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetQueuePlan(planDate, callback, asyncState);
        }
        
        private object[] OnEndGetQueuePlan(System.IAsyncResult result) {
            Queue.Services.DTO.QueuePlan retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetQueuePlan(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetQueuePlanCompleted(object state) {
            if ((this.GetQueuePlanCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetQueuePlanCompleted(this, new GetQueuePlanCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetQueuePlanAsync(System.DateTime planDate) {
            this.GetQueuePlanAsync(planDate, null);
        }
        
        public void GetQueuePlanAsync(System.DateTime planDate, object userState) {
            if ((this.onBeginGetQueuePlanDelegate == null)) {
                this.onBeginGetQueuePlanDelegate = new BeginOperationDelegate(this.OnBeginGetQueuePlan);
            }
            if ((this.onEndGetQueuePlanDelegate == null)) {
                this.onEndGetQueuePlanDelegate = new EndOperationDelegate(this.OnEndGetQueuePlan);
            }
            if ((this.onGetQueuePlanCompletedDelegate == null)) {
                this.onGetQueuePlanCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetQueuePlanCompleted);
            }
            base.InvokeAsync(this.onBeginGetQueuePlanDelegate, new object[] {
                        planDate}, this.onEndGetQueuePlanDelegate, this.onGetQueuePlanCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetFreeTime(System.Guid serviceId, System.DateTime planDate, Queue.Model.Common.ClientRequestType queueType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFreeTime(serviceId, planDate, queueType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.ServiceFreeTime Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetFreeTime(System.IAsyncResult result) {
            return base.Channel.EndGetFreeTime(result);
        }
        
        private System.IAsyncResult OnBeginGetFreeTime(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid serviceId = ((System.Guid)(inValues[0]));
            System.DateTime planDate = ((System.DateTime)(inValues[1]));
            Queue.Model.Common.ClientRequestType queueType = ((Queue.Model.Common.ClientRequestType)(inValues[2]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetFreeTime(serviceId, planDate, queueType, callback, asyncState);
        }
        
        private object[] OnEndGetFreeTime(System.IAsyncResult result) {
            Queue.Services.DTO.ServiceFreeTime retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetFreeTime(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFreeTimeCompleted(object state) {
            if ((this.GetFreeTimeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFreeTimeCompleted(this, new GetFreeTimeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFreeTimeAsync(System.Guid serviceId, System.DateTime planDate, Queue.Model.Common.ClientRequestType queueType) {
            this.GetFreeTimeAsync(serviceId, planDate, queueType, null);
        }
        
        public void GetFreeTimeAsync(System.Guid serviceId, System.DateTime planDate, Queue.Model.Common.ClientRequestType queueType, object userState) {
            if ((this.onBeginGetFreeTimeDelegate == null)) {
                this.onBeginGetFreeTimeDelegate = new BeginOperationDelegate(this.OnBeginGetFreeTime);
            }
            if ((this.onEndGetFreeTimeDelegate == null)) {
                this.onEndGetFreeTimeDelegate = new EndOperationDelegate(this.OnEndGetFreeTime);
            }
            if ((this.onGetFreeTimeCompletedDelegate == null)) {
                this.onGetFreeTimeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFreeTimeCompleted);
            }
            base.InvokeAsync(this.onBeginGetFreeTimeDelegate, new object[] {
                        serviceId,
                        planDate,
                        queueType}, this.onEndGetFreeTimeDelegate, this.onGetFreeTimeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginRefreshTodayQueuePlan(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRefreshTodayQueuePlan(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndRefreshTodayQueuePlan(System.IAsyncResult result) {
            base.Channel.EndRefreshTodayQueuePlan(result);
        }
        
        private System.IAsyncResult OnBeginRefreshTodayQueuePlan(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginRefreshTodayQueuePlan(callback, asyncState);
        }
        
        private object[] OnEndRefreshTodayQueuePlan(System.IAsyncResult result) {
            ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndRefreshTodayQueuePlan(result);
            return null;
        }
        
        private void OnRefreshTodayQueuePlanCompleted(object state) {
            if ((this.RefreshTodayQueuePlanCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RefreshTodayQueuePlanCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RefreshTodayQueuePlanAsync() {
            this.RefreshTodayQueuePlanAsync(null);
        }
        
        public void RefreshTodayQueuePlanAsync(object userState) {
            if ((this.onBeginRefreshTodayQueuePlanDelegate == null)) {
                this.onBeginRefreshTodayQueuePlanDelegate = new BeginOperationDelegate(this.OnBeginRefreshTodayQueuePlan);
            }
            if ((this.onEndRefreshTodayQueuePlanDelegate == null)) {
                this.onEndRefreshTodayQueuePlanDelegate = new EndOperationDelegate(this.OnEndRefreshTodayQueuePlan);
            }
            if ((this.onRefreshTodayQueuePlanCompletedDelegate == null)) {
                this.onRefreshTodayQueuePlanCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRefreshTodayQueuePlanCompleted);
            }
            base.InvokeAsync(this.onBeginRefreshTodayQueuePlanDelegate, null, this.onEndRefreshTodayQueuePlanDelegate, this.onRefreshTodayQueuePlanCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetRootServiceGroups(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRootServiceGroups(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<Queue.Services.DTO.ServiceGroup> Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetRootServiceGroups(System.IAsyncResult result) {
            return base.Channel.EndGetRootServiceGroups(result);
        }
        
        private System.IAsyncResult OnBeginGetRootServiceGroups(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetRootServiceGroups(callback, asyncState);
        }
        
        private object[] OnEndGetRootServiceGroups(System.IAsyncResult result) {
            System.Collections.Generic.List<Queue.Services.DTO.ServiceGroup> retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetRootServiceGroups(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRootServiceGroupsCompleted(object state) {
            if ((this.GetRootServiceGroupsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRootServiceGroupsCompleted(this, new GetRootServiceGroupsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRootServiceGroupsAsync() {
            this.GetRootServiceGroupsAsync(null);
        }
        
        public void GetRootServiceGroupsAsync(object userState) {
            if ((this.onBeginGetRootServiceGroupsDelegate == null)) {
                this.onBeginGetRootServiceGroupsDelegate = new BeginOperationDelegate(this.OnBeginGetRootServiceGroups);
            }
            if ((this.onEndGetRootServiceGroupsDelegate == null)) {
                this.onEndGetRootServiceGroupsDelegate = new EndOperationDelegate(this.OnEndGetRootServiceGroups);
            }
            if ((this.onGetRootServiceGroupsCompletedDelegate == null)) {
                this.onGetRootServiceGroupsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRootServiceGroupsCompleted);
            }
            base.InvokeAsync(this.onBeginGetRootServiceGroupsDelegate, null, this.onEndGetRootServiceGroupsDelegate, this.onGetRootServiceGroupsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetServiceGroups(System.Guid parentServiceGroupId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetServiceGroups(parentServiceGroupId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<Queue.Services.DTO.ServiceGroup> Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetServiceGroups(System.IAsyncResult result) {
            return base.Channel.EndGetServiceGroups(result);
        }
        
        private System.IAsyncResult OnBeginGetServiceGroups(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid parentServiceGroupId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetServiceGroups(parentServiceGroupId, callback, asyncState);
        }
        
        private object[] OnEndGetServiceGroups(System.IAsyncResult result) {
            System.Collections.Generic.List<Queue.Services.DTO.ServiceGroup> retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetServiceGroups(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetServiceGroupsCompleted(object state) {
            if ((this.GetServiceGroupsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetServiceGroupsCompleted(this, new GetServiceGroupsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetServiceGroupsAsync(System.Guid parentServiceGroupId) {
            this.GetServiceGroupsAsync(parentServiceGroupId, null);
        }
        
        public void GetServiceGroupsAsync(System.Guid parentServiceGroupId, object userState) {
            if ((this.onBeginGetServiceGroupsDelegate == null)) {
                this.onBeginGetServiceGroupsDelegate = new BeginOperationDelegate(this.OnBeginGetServiceGroups);
            }
            if ((this.onEndGetServiceGroupsDelegate == null)) {
                this.onEndGetServiceGroupsDelegate = new EndOperationDelegate(this.OnEndGetServiceGroups);
            }
            if ((this.onGetServiceGroupsCompletedDelegate == null)) {
                this.onGetServiceGroupsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetServiceGroupsCompleted);
            }
            base.InvokeAsync(this.onBeginGetServiceGroupsDelegate, new object[] {
                        parentServiceGroupId}, this.onEndGetServiceGroupsDelegate, this.onGetServiceGroupsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetServiceGroup(System.Guid serviceGroupId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetServiceGroup(serviceGroupId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.ServiceGroup Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetServiceGroup(System.IAsyncResult result) {
            return base.Channel.EndGetServiceGroup(result);
        }
        
        private System.IAsyncResult OnBeginGetServiceGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid serviceGroupId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetServiceGroup(serviceGroupId, callback, asyncState);
        }
        
        private object[] OnEndGetServiceGroup(System.IAsyncResult result) {
            Queue.Services.DTO.ServiceGroup retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetServiceGroup(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetServiceGroupCompleted(object state) {
            if ((this.GetServiceGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetServiceGroupCompleted(this, new GetServiceGroupCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetServiceGroupAsync(System.Guid serviceGroupId) {
            this.GetServiceGroupAsync(serviceGroupId, null);
        }
        
        public void GetServiceGroupAsync(System.Guid serviceGroupId, object userState) {
            if ((this.onBeginGetServiceGroupDelegate == null)) {
                this.onBeginGetServiceGroupDelegate = new BeginOperationDelegate(this.OnBeginGetServiceGroup);
            }
            if ((this.onEndGetServiceGroupDelegate == null)) {
                this.onEndGetServiceGroupDelegate = new EndOperationDelegate(this.OnEndGetServiceGroup);
            }
            if ((this.onGetServiceGroupCompletedDelegate == null)) {
                this.onGetServiceGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetServiceGroupCompleted);
            }
            base.InvokeAsync(this.onBeginGetServiceGroupDelegate, new object[] {
                        serviceGroupId}, this.onEndGetServiceGroupDelegate, this.onGetServiceGroupCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginAddRootServiceGroup(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddRootServiceGroup(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.ServiceGroup Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndAddRootServiceGroup(System.IAsyncResult result) {
            return base.Channel.EndAddRootServiceGroup(result);
        }
        
        private System.IAsyncResult OnBeginAddRootServiceGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginAddRootServiceGroup(callback, asyncState);
        }
        
        private object[] OnEndAddRootServiceGroup(System.IAsyncResult result) {
            Queue.Services.DTO.ServiceGroup retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndAddRootServiceGroup(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddRootServiceGroupCompleted(object state) {
            if ((this.AddRootServiceGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddRootServiceGroupCompleted(this, new AddRootServiceGroupCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddRootServiceGroupAsync() {
            this.AddRootServiceGroupAsync(null);
        }
        
        public void AddRootServiceGroupAsync(object userState) {
            if ((this.onBeginAddRootServiceGroupDelegate == null)) {
                this.onBeginAddRootServiceGroupDelegate = new BeginOperationDelegate(this.OnBeginAddRootServiceGroup);
            }
            if ((this.onEndAddRootServiceGroupDelegate == null)) {
                this.onEndAddRootServiceGroupDelegate = new EndOperationDelegate(this.OnEndAddRootServiceGroup);
            }
            if ((this.onAddRootServiceGroupCompletedDelegate == null)) {
                this.onAddRootServiceGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddRootServiceGroupCompleted);
            }
            base.InvokeAsync(this.onBeginAddRootServiceGroupDelegate, null, this.onEndAddRootServiceGroupDelegate, this.onAddRootServiceGroupCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginAddServiceGroup(System.Guid parentServiceGroupId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddServiceGroup(parentServiceGroupId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.ServiceGroup Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndAddServiceGroup(System.IAsyncResult result) {
            return base.Channel.EndAddServiceGroup(result);
        }
        
        private System.IAsyncResult OnBeginAddServiceGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid parentServiceGroupId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginAddServiceGroup(parentServiceGroupId, callback, asyncState);
        }
        
        private object[] OnEndAddServiceGroup(System.IAsyncResult result) {
            Queue.Services.DTO.ServiceGroup retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndAddServiceGroup(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddServiceGroupCompleted(object state) {
            if ((this.AddServiceGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddServiceGroupCompleted(this, new AddServiceGroupCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddServiceGroupAsync(System.Guid parentServiceGroupId) {
            this.AddServiceGroupAsync(parentServiceGroupId, null);
        }
        
        public void AddServiceGroupAsync(System.Guid parentServiceGroupId, object userState) {
            if ((this.onBeginAddServiceGroupDelegate == null)) {
                this.onBeginAddServiceGroupDelegate = new BeginOperationDelegate(this.OnBeginAddServiceGroup);
            }
            if ((this.onEndAddServiceGroupDelegate == null)) {
                this.onEndAddServiceGroupDelegate = new EndOperationDelegate(this.OnEndAddServiceGroup);
            }
            if ((this.onAddServiceGroupCompletedDelegate == null)) {
                this.onAddServiceGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddServiceGroupCompleted);
            }
            base.InvokeAsync(this.onBeginAddServiceGroupDelegate, new object[] {
                        parentServiceGroupId}, this.onEndAddServiceGroupDelegate, this.onAddServiceGroupCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginEditServiceGroup(System.Guid serviceGroupId, string code, string name, string comment, string description, int columns, int rows, string color, byte[] icon, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditServiceGroup(serviceGroupId, code, name, comment, description, columns, rows, color, icon, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.ServiceGroup Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndEditServiceGroup(System.IAsyncResult result) {
            return base.Channel.EndEditServiceGroup(result);
        }
        
        private System.IAsyncResult OnBeginEditServiceGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid serviceGroupId = ((System.Guid)(inValues[0]));
            string code = ((string)(inValues[1]));
            string name = ((string)(inValues[2]));
            string comment = ((string)(inValues[3]));
            string description = ((string)(inValues[4]));
            int columns = ((int)(inValues[5]));
            int rows = ((int)(inValues[6]));
            string color = ((string)(inValues[7]));
            byte[] icon = ((byte[])(inValues[8]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginEditServiceGroup(serviceGroupId, code, name, comment, description, columns, rows, color, icon, callback, asyncState);
        }
        
        private object[] OnEndEditServiceGroup(System.IAsyncResult result) {
            Queue.Services.DTO.ServiceGroup retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndEditServiceGroup(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditServiceGroupCompleted(object state) {
            if ((this.EditServiceGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditServiceGroupCompleted(this, new EditServiceGroupCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditServiceGroupAsync(System.Guid serviceGroupId, string code, string name, string comment, string description, int columns, int rows, string color, byte[] icon) {
            this.EditServiceGroupAsync(serviceGroupId, code, name, comment, description, columns, rows, color, icon, null);
        }
        
        public void EditServiceGroupAsync(System.Guid serviceGroupId, string code, string name, string comment, string description, int columns, int rows, string color, byte[] icon, object userState) {
            if ((this.onBeginEditServiceGroupDelegate == null)) {
                this.onBeginEditServiceGroupDelegate = new BeginOperationDelegate(this.OnBeginEditServiceGroup);
            }
            if ((this.onEndEditServiceGroupDelegate == null)) {
                this.onEndEditServiceGroupDelegate = new EndOperationDelegate(this.OnEndEditServiceGroup);
            }
            if ((this.onEditServiceGroupCompletedDelegate == null)) {
                this.onEditServiceGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditServiceGroupCompleted);
            }
            base.InvokeAsync(this.onBeginEditServiceGroupDelegate, new object[] {
                        serviceGroupId,
                        code,
                        name,
                        comment,
                        description,
                        columns,
                        rows,
                        color,
                        icon}, this.onEndEditServiceGroupDelegate, this.onEditServiceGroupCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginMoveServiceGroup(System.Guid sourceGroupId, System.Guid targetGroupId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMoveServiceGroup(sourceGroupId, targetGroupId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndMoveServiceGroup(System.IAsyncResult result) {
            base.Channel.EndMoveServiceGroup(result);
        }
        
        private System.IAsyncResult OnBeginMoveServiceGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid sourceGroupId = ((System.Guid)(inValues[0]));
            System.Guid targetGroupId = ((System.Guid)(inValues[1]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginMoveServiceGroup(sourceGroupId, targetGroupId, callback, asyncState);
        }
        
        private object[] OnEndMoveServiceGroup(System.IAsyncResult result) {
            ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndMoveServiceGroup(result);
            return null;
        }
        
        private void OnMoveServiceGroupCompleted(object state) {
            if ((this.MoveServiceGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MoveServiceGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MoveServiceGroupAsync(System.Guid sourceGroupId, System.Guid targetGroupId) {
            this.MoveServiceGroupAsync(sourceGroupId, targetGroupId, null);
        }
        
        public void MoveServiceGroupAsync(System.Guid sourceGroupId, System.Guid targetGroupId, object userState) {
            if ((this.onBeginMoveServiceGroupDelegate == null)) {
                this.onBeginMoveServiceGroupDelegate = new BeginOperationDelegate(this.OnBeginMoveServiceGroup);
            }
            if ((this.onEndMoveServiceGroupDelegate == null)) {
                this.onEndMoveServiceGroupDelegate = new EndOperationDelegate(this.OnEndMoveServiceGroup);
            }
            if ((this.onMoveServiceGroupCompletedDelegate == null)) {
                this.onMoveServiceGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMoveServiceGroupCompleted);
            }
            base.InvokeAsync(this.onBeginMoveServiceGroupDelegate, new object[] {
                        sourceGroupId,
                        targetGroupId}, this.onEndMoveServiceGroupDelegate, this.onMoveServiceGroupCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginMoveServiceGroupToRoot(System.Guid sourceGroupId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMoveServiceGroupToRoot(sourceGroupId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndMoveServiceGroupToRoot(System.IAsyncResult result) {
            base.Channel.EndMoveServiceGroupToRoot(result);
        }
        
        private System.IAsyncResult OnBeginMoveServiceGroupToRoot(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid sourceGroupId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginMoveServiceGroupToRoot(sourceGroupId, callback, asyncState);
        }
        
        private object[] OnEndMoveServiceGroupToRoot(System.IAsyncResult result) {
            ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndMoveServiceGroupToRoot(result);
            return null;
        }
        
        private void OnMoveServiceGroupToRootCompleted(object state) {
            if ((this.MoveServiceGroupToRootCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MoveServiceGroupToRootCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MoveServiceGroupToRootAsync(System.Guid sourceGroupId) {
            this.MoveServiceGroupToRootAsync(sourceGroupId, null);
        }
        
        public void MoveServiceGroupToRootAsync(System.Guid sourceGroupId, object userState) {
            if ((this.onBeginMoveServiceGroupToRootDelegate == null)) {
                this.onBeginMoveServiceGroupToRootDelegate = new BeginOperationDelegate(this.OnBeginMoveServiceGroupToRoot);
            }
            if ((this.onEndMoveServiceGroupToRootDelegate == null)) {
                this.onEndMoveServiceGroupToRootDelegate = new EndOperationDelegate(this.OnEndMoveServiceGroupToRoot);
            }
            if ((this.onMoveServiceGroupToRootCompletedDelegate == null)) {
                this.onMoveServiceGroupToRootCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMoveServiceGroupToRootCompleted);
            }
            base.InvokeAsync(this.onBeginMoveServiceGroupToRootDelegate, new object[] {
                        sourceGroupId}, this.onEndMoveServiceGroupToRootDelegate, this.onMoveServiceGroupToRootCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginServiceGroupUp(System.Guid serviceGroupId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginServiceGroupUp(serviceGroupId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndServiceGroupUp(System.IAsyncResult result) {
            return base.Channel.EndServiceGroupUp(result);
        }
        
        private System.IAsyncResult OnBeginServiceGroupUp(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid serviceGroupId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginServiceGroupUp(serviceGroupId, callback, asyncState);
        }
        
        private object[] OnEndServiceGroupUp(System.IAsyncResult result) {
            bool retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndServiceGroupUp(result);
            return new object[] {
                    retVal};
        }
        
        private void OnServiceGroupUpCompleted(object state) {
            if ((this.ServiceGroupUpCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ServiceGroupUpCompleted(this, new ServiceGroupUpCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ServiceGroupUpAsync(System.Guid serviceGroupId) {
            this.ServiceGroupUpAsync(serviceGroupId, null);
        }
        
        public void ServiceGroupUpAsync(System.Guid serviceGroupId, object userState) {
            if ((this.onBeginServiceGroupUpDelegate == null)) {
                this.onBeginServiceGroupUpDelegate = new BeginOperationDelegate(this.OnBeginServiceGroupUp);
            }
            if ((this.onEndServiceGroupUpDelegate == null)) {
                this.onEndServiceGroupUpDelegate = new EndOperationDelegate(this.OnEndServiceGroupUp);
            }
            if ((this.onServiceGroupUpCompletedDelegate == null)) {
                this.onServiceGroupUpCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnServiceGroupUpCompleted);
            }
            base.InvokeAsync(this.onBeginServiceGroupUpDelegate, new object[] {
                        serviceGroupId}, this.onEndServiceGroupUpDelegate, this.onServiceGroupUpCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginServiceGroupDown(System.Guid serviceGroupId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginServiceGroupDown(serviceGroupId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndServiceGroupDown(System.IAsyncResult result) {
            return base.Channel.EndServiceGroupDown(result);
        }
        
        private System.IAsyncResult OnBeginServiceGroupDown(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid serviceGroupId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginServiceGroupDown(serviceGroupId, callback, asyncState);
        }
        
        private object[] OnEndServiceGroupDown(System.IAsyncResult result) {
            bool retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndServiceGroupDown(result);
            return new object[] {
                    retVal};
        }
        
        private void OnServiceGroupDownCompleted(object state) {
            if ((this.ServiceGroupDownCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ServiceGroupDownCompleted(this, new ServiceGroupDownCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ServiceGroupDownAsync(System.Guid serviceGroupId) {
            this.ServiceGroupDownAsync(serviceGroupId, null);
        }
        
        public void ServiceGroupDownAsync(System.Guid serviceGroupId, object userState) {
            if ((this.onBeginServiceGroupDownDelegate == null)) {
                this.onBeginServiceGroupDownDelegate = new BeginOperationDelegate(this.OnBeginServiceGroupDown);
            }
            if ((this.onEndServiceGroupDownDelegate == null)) {
                this.onEndServiceGroupDownDelegate = new EndOperationDelegate(this.OnEndServiceGroupDown);
            }
            if ((this.onServiceGroupDownCompletedDelegate == null)) {
                this.onServiceGroupDownCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnServiceGroupDownCompleted);
            }
            base.InvokeAsync(this.onBeginServiceGroupDownDelegate, new object[] {
                        serviceGroupId}, this.onEndServiceGroupDownDelegate, this.onServiceGroupDownCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginServiceGroupActivate(System.Guid serviceGroupId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginServiceGroupActivate(serviceGroupId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndServiceGroupActivate(System.IAsyncResult result) {
            return base.Channel.EndServiceGroupActivate(result);
        }
        
        private System.IAsyncResult OnBeginServiceGroupActivate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid serviceGroupId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginServiceGroupActivate(serviceGroupId, callback, asyncState);
        }
        
        private object[] OnEndServiceGroupActivate(System.IAsyncResult result) {
            bool retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndServiceGroupActivate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnServiceGroupActivateCompleted(object state) {
            if ((this.ServiceGroupActivateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ServiceGroupActivateCompleted(this, new ServiceGroupActivateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ServiceGroupActivateAsync(System.Guid serviceGroupId) {
            this.ServiceGroupActivateAsync(serviceGroupId, null);
        }
        
        public void ServiceGroupActivateAsync(System.Guid serviceGroupId, object userState) {
            if ((this.onBeginServiceGroupActivateDelegate == null)) {
                this.onBeginServiceGroupActivateDelegate = new BeginOperationDelegate(this.OnBeginServiceGroupActivate);
            }
            if ((this.onEndServiceGroupActivateDelegate == null)) {
                this.onEndServiceGroupActivateDelegate = new EndOperationDelegate(this.OnEndServiceGroupActivate);
            }
            if ((this.onServiceGroupActivateCompletedDelegate == null)) {
                this.onServiceGroupActivateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnServiceGroupActivateCompleted);
            }
            base.InvokeAsync(this.onBeginServiceGroupActivateDelegate, new object[] {
                        serviceGroupId}, this.onEndServiceGroupActivateDelegate, this.onServiceGroupActivateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginServiceGroupDeactivate(System.Guid serviceGroupId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginServiceGroupDeactivate(serviceGroupId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndServiceGroupDeactivate(System.IAsyncResult result) {
            return base.Channel.EndServiceGroupDeactivate(result);
        }
        
        private System.IAsyncResult OnBeginServiceGroupDeactivate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid serviceGroupId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginServiceGroupDeactivate(serviceGroupId, callback, asyncState);
        }
        
        private object[] OnEndServiceGroupDeactivate(System.IAsyncResult result) {
            bool retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndServiceGroupDeactivate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnServiceGroupDeactivateCompleted(object state) {
            if ((this.ServiceGroupDeactivateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ServiceGroupDeactivateCompleted(this, new ServiceGroupDeactivateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ServiceGroupDeactivateAsync(System.Guid serviceGroupId) {
            this.ServiceGroupDeactivateAsync(serviceGroupId, null);
        }
        
        public void ServiceGroupDeactivateAsync(System.Guid serviceGroupId, object userState) {
            if ((this.onBeginServiceGroupDeactivateDelegate == null)) {
                this.onBeginServiceGroupDeactivateDelegate = new BeginOperationDelegate(this.OnBeginServiceGroupDeactivate);
            }
            if ((this.onEndServiceGroupDeactivateDelegate == null)) {
                this.onEndServiceGroupDeactivateDelegate = new EndOperationDelegate(this.OnEndServiceGroupDeactivate);
            }
            if ((this.onServiceGroupDeactivateCompletedDelegate == null)) {
                this.onServiceGroupDeactivateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnServiceGroupDeactivateCompleted);
            }
            base.InvokeAsync(this.onBeginServiceGroupDeactivateDelegate, new object[] {
                        serviceGroupId}, this.onEndServiceGroupDeactivateDelegate, this.onServiceGroupDeactivateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginDeleteServiceGroup(System.Guid serviceGroupId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteServiceGroup(serviceGroupId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndDeleteServiceGroup(System.IAsyncResult result) {
            base.Channel.EndDeleteServiceGroup(result);
        }
        
        private System.IAsyncResult OnBeginDeleteServiceGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid serviceGroupId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginDeleteServiceGroup(serviceGroupId, callback, asyncState);
        }
        
        private object[] OnEndDeleteServiceGroup(System.IAsyncResult result) {
            ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndDeleteServiceGroup(result);
            return null;
        }
        
        private void OnDeleteServiceGroupCompleted(object state) {
            if ((this.DeleteServiceGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteServiceGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteServiceGroupAsync(System.Guid serviceGroupId) {
            this.DeleteServiceGroupAsync(serviceGroupId, null);
        }
        
        public void DeleteServiceGroupAsync(System.Guid serviceGroupId, object userState) {
            if ((this.onBeginDeleteServiceGroupDelegate == null)) {
                this.onBeginDeleteServiceGroupDelegate = new BeginOperationDelegate(this.OnBeginDeleteServiceGroup);
            }
            if ((this.onEndDeleteServiceGroupDelegate == null)) {
                this.onEndDeleteServiceGroupDelegate = new EndOperationDelegate(this.OnEndDeleteServiceGroup);
            }
            if ((this.onDeleteServiceGroupCompletedDelegate == null)) {
                this.onDeleteServiceGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteServiceGroupCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteServiceGroupDelegate, new object[] {
                        serviceGroupId}, this.onEndDeleteServiceGroupDelegate, this.onDeleteServiceGroupCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginOpenUserSession(System.Guid sessionId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginOpenUserSession(sessionId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.User Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndOpenUserSession(System.IAsyncResult result) {
            return base.Channel.EndOpenUserSession(result);
        }
        
        private System.IAsyncResult OnBeginOpenUserSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid sessionId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginOpenUserSession(sessionId, callback, asyncState);
        }
        
        private object[] OnEndOpenUserSession(System.IAsyncResult result) {
            Queue.Services.DTO.User retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndOpenUserSession(result);
            return new object[] {
                    retVal};
        }
        
        private void OnOpenUserSessionCompleted(object state) {
            if ((this.OpenUserSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenUserSessionCompleted(this, new OpenUserSessionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenUserSessionAsync(System.Guid sessionId) {
            this.OpenUserSessionAsync(sessionId, null);
        }
        
        public void OpenUserSessionAsync(System.Guid sessionId, object userState) {
            if ((this.onBeginOpenUserSessionDelegate == null)) {
                this.onBeginOpenUserSessionDelegate = new BeginOperationDelegate(this.OnBeginOpenUserSession);
            }
            if ((this.onEndOpenUserSessionDelegate == null)) {
                this.onEndOpenUserSessionDelegate = new EndOperationDelegate(this.OnEndOpenUserSession);
            }
            if ((this.onOpenUserSessionCompletedDelegate == null)) {
                this.onOpenUserSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenUserSessionCompleted);
            }
            base.InvokeAsync(this.onBeginOpenUserSessionDelegate, new object[] {
                        sessionId}, this.onEndOpenUserSessionDelegate, this.onOpenUserSessionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginUserHeartbeat(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUserHeartbeat(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndUserHeartbeat(System.IAsyncResult result) {
            base.Channel.EndUserHeartbeat(result);
        }
        
        private System.IAsyncResult OnBeginUserHeartbeat(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginUserHeartbeat(callback, asyncState);
        }
        
        private object[] OnEndUserHeartbeat(System.IAsyncResult result) {
            ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndUserHeartbeat(result);
            return null;
        }
        
        private void OnUserHeartbeatCompleted(object state) {
            if ((this.UserHeartbeatCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UserHeartbeatCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UserHeartbeatAsync() {
            this.UserHeartbeatAsync(null);
        }
        
        public void UserHeartbeatAsync(object userState) {
            if ((this.onBeginUserHeartbeatDelegate == null)) {
                this.onBeginUserHeartbeatDelegate = new BeginOperationDelegate(this.OnBeginUserHeartbeat);
            }
            if ((this.onEndUserHeartbeatDelegate == null)) {
                this.onEndUserHeartbeatDelegate = new EndOperationDelegate(this.OnEndUserHeartbeat);
            }
            if ((this.onUserHeartbeatCompletedDelegate == null)) {
                this.onUserHeartbeatCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUserHeartbeatCompleted);
            }
            base.InvokeAsync(this.onBeginUserHeartbeatDelegate, null, this.onEndUserHeartbeatDelegate, this.onUserHeartbeatCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetUsers(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUsers(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<Queue.Services.DTO.User> Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetUsers(System.IAsyncResult result) {
            return base.Channel.EndGetUsers(result);
        }
        
        private System.IAsyncResult OnBeginGetUsers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetUsers(callback, asyncState);
        }
        
        private object[] OnEndGetUsers(System.IAsyncResult result) {
            System.Collections.Generic.List<Queue.Services.DTO.User> retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetUsers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUsersCompleted(object state) {
            if ((this.GetUsersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUsersCompleted(this, new GetUsersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUsersAsync() {
            this.GetUsersAsync(null);
        }
        
        public void GetUsersAsync(object userState) {
            if ((this.onBeginGetUsersDelegate == null)) {
                this.onBeginGetUsersDelegate = new BeginOperationDelegate(this.OnBeginGetUsers);
            }
            if ((this.onEndGetUsersDelegate == null)) {
                this.onEndGetUsersDelegate = new EndOperationDelegate(this.OnEndGetUsers);
            }
            if ((this.onGetUsersCompletedDelegate == null)) {
                this.onGetUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUsersCompleted);
            }
            base.InvokeAsync(this.onBeginGetUsersDelegate, null, this.onEndGetUsersDelegate, this.onGetUsersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetUser(System.Guid userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUser(userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.User Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetUser(System.IAsyncResult result) {
            return base.Channel.EndGetUser(result);
        }
        
        private System.IAsyncResult OnBeginGetUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid userId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetUser(userId, callback, asyncState);
        }
        
        private object[] OnEndGetUser(System.IAsyncResult result) {
            Queue.Services.DTO.User retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserCompleted(object state) {
            if ((this.GetUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserCompleted(this, new GetUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserAsync(System.Guid userId) {
            this.GetUserAsync(userId, null);
        }
        
        public void GetUserAsync(System.Guid userId, object userState) {
            if ((this.onBeginGetUserDelegate == null)) {
                this.onBeginGetUserDelegate = new BeginOperationDelegate(this.OnBeginGetUser);
            }
            if ((this.onEndGetUserDelegate == null)) {
                this.onEndGetUserDelegate = new EndOperationDelegate(this.OnEndGetUser);
            }
            if ((this.onGetUserCompletedDelegate == null)) {
                this.onGetUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserDelegate, new object[] {
                        userId}, this.onEndGetUserDelegate, this.onGetUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetUserList(Queue.Model.Common.UserRole userRole, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserList(userRole, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<System.Guid, string> Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetUserList(System.IAsyncResult result) {
            return base.Channel.EndGetUserList(result);
        }
        
        private System.IAsyncResult OnBeginGetUserList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            Queue.Model.Common.UserRole userRole = ((Queue.Model.Common.UserRole)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetUserList(userRole, callback, asyncState);
        }
        
        private object[] OnEndGetUserList(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<System.Guid, string> retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetUserList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserListCompleted(object state) {
            if ((this.GetUserListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserListCompleted(this, new GetUserListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserListAsync(Queue.Model.Common.UserRole userRole) {
            this.GetUserListAsync(userRole, null);
        }
        
        public void GetUserListAsync(Queue.Model.Common.UserRole userRole, object userState) {
            if ((this.onBeginGetUserListDelegate == null)) {
                this.onBeginGetUserListDelegate = new BeginOperationDelegate(this.OnBeginGetUserList);
            }
            if ((this.onEndGetUserListDelegate == null)) {
                this.onEndGetUserListDelegate = new EndOperationDelegate(this.OnEndGetUserList);
            }
            if ((this.onGetUserListCompletedDelegate == null)) {
                this.onGetUserListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserListCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserListDelegate, new object[] {
                        userRole}, this.onEndGetUserListDelegate, this.onGetUserListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginUserLogin(System.Guid userId, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUserLogin(userId, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.User Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndUserLogin(System.IAsyncResult result) {
            return base.Channel.EndUserLogin(result);
        }
        
        private System.IAsyncResult OnBeginUserLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid userId = ((System.Guid)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginUserLogin(userId, password, callback, asyncState);
        }
        
        private object[] OnEndUserLogin(System.IAsyncResult result) {
            Queue.Services.DTO.User retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndUserLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUserLoginCompleted(object state) {
            if ((this.UserLoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UserLoginCompleted(this, new UserLoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UserLoginAsync(System.Guid userId, string password) {
            this.UserLoginAsync(userId, password, null);
        }
        
        public void UserLoginAsync(System.Guid userId, string password, object userState) {
            if ((this.onBeginUserLoginDelegate == null)) {
                this.onBeginUserLoginDelegate = new BeginOperationDelegate(this.OnBeginUserLogin);
            }
            if ((this.onEndUserLoginDelegate == null)) {
                this.onEndUserLoginDelegate = new EndOperationDelegate(this.OnEndUserLogin);
            }
            if ((this.onUserLoginCompletedDelegate == null)) {
                this.onUserLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUserLoginCompleted);
            }
            base.InvokeAsync(this.onBeginUserLoginDelegate, new object[] {
                        userId,
                        password}, this.onEndUserLoginDelegate, this.onUserLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginAddUser(Queue.Model.Common.UserRole role, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddUser(role, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.User Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndAddUser(System.IAsyncResult result) {
            return base.Channel.EndAddUser(result);
        }
        
        private System.IAsyncResult OnBeginAddUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            Queue.Model.Common.UserRole role = ((Queue.Model.Common.UserRole)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginAddUser(role, callback, asyncState);
        }
        
        private object[] OnEndAddUser(System.IAsyncResult result) {
            Queue.Services.DTO.User retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndAddUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddUserCompleted(object state) {
            if ((this.AddUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddUserCompleted(this, new AddUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddUserAsync(Queue.Model.Common.UserRole role) {
            this.AddUserAsync(role, null);
        }
        
        public void AddUserAsync(Queue.Model.Common.UserRole role, object userState) {
            if ((this.onBeginAddUserDelegate == null)) {
                this.onBeginAddUserDelegate = new BeginOperationDelegate(this.OnBeginAddUser);
            }
            if ((this.onEndAddUserDelegate == null)) {
                this.onEndAddUserDelegate = new EndOperationDelegate(this.OnEndAddUser);
            }
            if ((this.onAddUserCompletedDelegate == null)) {
                this.onAddUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddUserCompleted);
            }
            base.InvokeAsync(this.onBeginAddUserDelegate, new object[] {
                        role}, this.onEndAddUserDelegate, this.onAddUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginEditUser(System.Guid userId, string surname, string name, string patronymic, string email, string mobile, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditUser(userId, surname, name, patronymic, email, mobile, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.User Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndEditUser(System.IAsyncResult result) {
            return base.Channel.EndEditUser(result);
        }
        
        private System.IAsyncResult OnBeginEditUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid userId = ((System.Guid)(inValues[0]));
            string surname = ((string)(inValues[1]));
            string name = ((string)(inValues[2]));
            string patronymic = ((string)(inValues[3]));
            string email = ((string)(inValues[4]));
            string mobile = ((string)(inValues[5]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginEditUser(userId, surname, name, patronymic, email, mobile, callback, asyncState);
        }
        
        private object[] OnEndEditUser(System.IAsyncResult result) {
            Queue.Services.DTO.User retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndEditUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditUserCompleted(object state) {
            if ((this.EditUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditUserCompleted(this, new EditUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditUserAsync(System.Guid userId, string surname, string name, string patronymic, string email, string mobile) {
            this.EditUserAsync(userId, surname, name, patronymic, email, mobile, null);
        }
        
        public void EditUserAsync(System.Guid userId, string surname, string name, string patronymic, string email, string mobile, object userState) {
            if ((this.onBeginEditUserDelegate == null)) {
                this.onBeginEditUserDelegate = new BeginOperationDelegate(this.OnBeginEditUser);
            }
            if ((this.onEndEditUserDelegate == null)) {
                this.onEndEditUserDelegate = new EndOperationDelegate(this.OnEndEditUser);
            }
            if ((this.onEditUserCompletedDelegate == null)) {
                this.onEditUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditUserCompleted);
            }
            base.InvokeAsync(this.onBeginEditUserDelegate, new object[] {
                        userId,
                        surname,
                        name,
                        patronymic,
                        email,
                        mobile}, this.onEndEditUserDelegate, this.onEditUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginDeleteUser(System.Guid userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteUser(userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndDeleteUser(System.IAsyncResult result) {
            base.Channel.EndDeleteUser(result);
        }
        
        private System.IAsyncResult OnBeginDeleteUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid userId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginDeleteUser(userId, callback, asyncState);
        }
        
        private object[] OnEndDeleteUser(System.IAsyncResult result) {
            ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndDeleteUser(result);
            return null;
        }
        
        private void OnDeleteUserCompleted(object state) {
            if ((this.DeleteUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteUserAsync(System.Guid userId) {
            this.DeleteUserAsync(userId, null);
        }
        
        public void DeleteUserAsync(System.Guid userId, object userState) {
            if ((this.onBeginDeleteUserDelegate == null)) {
                this.onBeginDeleteUserDelegate = new BeginOperationDelegate(this.OnBeginDeleteUser);
            }
            if ((this.onEndDeleteUserDelegate == null)) {
                this.onEndDeleteUserDelegate = new EndOperationDelegate(this.OnEndDeleteUser);
            }
            if ((this.onDeleteUserCompletedDelegate == null)) {
                this.onDeleteUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteUserCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteUserDelegate, new object[] {
                        userId}, this.onEndDeleteUserDelegate, this.onDeleteUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginChangeUserPassword(System.Guid userId, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangeUserPassword(userId, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndChangeUserPassword(System.IAsyncResult result) {
            base.Channel.EndChangeUserPassword(result);
        }
        
        private System.IAsyncResult OnBeginChangeUserPassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid userId = ((System.Guid)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginChangeUserPassword(userId, password, callback, asyncState);
        }
        
        private object[] OnEndChangeUserPassword(System.IAsyncResult result) {
            ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndChangeUserPassword(result);
            return null;
        }
        
        private void OnChangeUserPasswordCompleted(object state) {
            if ((this.ChangeUserPasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangeUserPasswordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangeUserPasswordAsync(System.Guid userId, string password) {
            this.ChangeUserPasswordAsync(userId, password, null);
        }
        
        public void ChangeUserPasswordAsync(System.Guid userId, string password, object userState) {
            if ((this.onBeginChangeUserPasswordDelegate == null)) {
                this.onBeginChangeUserPasswordDelegate = new BeginOperationDelegate(this.OnBeginChangeUserPassword);
            }
            if ((this.onEndChangeUserPasswordDelegate == null)) {
                this.onEndChangeUserPasswordDelegate = new EndOperationDelegate(this.OnEndChangeUserPassword);
            }
            if ((this.onChangeUserPasswordCompletedDelegate == null)) {
                this.onChangeUserPasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangeUserPasswordCompleted);
            }
            base.InvokeAsync(this.onBeginChangeUserPasswordDelegate, new object[] {
                        userId,
                        password}, this.onEndChangeUserPasswordDelegate, this.onChangeUserPasswordCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginEditOperator(System.Guid operatorId, System.Guid workplaceId, bool isInterruption, System.TimeSpan interruptionStartTime, System.TimeSpan interruptionFinishTime, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditOperator(operatorId, workplaceId, isInterruption, interruptionStartTime, interruptionFinishTime, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.Operator Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndEditOperator(System.IAsyncResult result) {
            return base.Channel.EndEditOperator(result);
        }
        
        private System.IAsyncResult OnBeginEditOperator(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid operatorId = ((System.Guid)(inValues[0]));
            System.Guid workplaceId = ((System.Guid)(inValues[1]));
            bool isInterruption = ((bool)(inValues[2]));
            System.TimeSpan interruptionStartTime = ((System.TimeSpan)(inValues[3]));
            System.TimeSpan interruptionFinishTime = ((System.TimeSpan)(inValues[4]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginEditOperator(operatorId, workplaceId, isInterruption, interruptionStartTime, interruptionFinishTime, callback, asyncState);
        }
        
        private object[] OnEndEditOperator(System.IAsyncResult result) {
            Queue.Services.DTO.Operator retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndEditOperator(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditOperatorCompleted(object state) {
            if ((this.EditOperatorCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditOperatorCompleted(this, new EditOperatorCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditOperatorAsync(System.Guid operatorId, System.Guid workplaceId, bool isInterruption, System.TimeSpan interruptionStartTime, System.TimeSpan interruptionFinishTime) {
            this.EditOperatorAsync(operatorId, workplaceId, isInterruption, interruptionStartTime, interruptionFinishTime, null);
        }
        
        public void EditOperatorAsync(System.Guid operatorId, System.Guid workplaceId, bool isInterruption, System.TimeSpan interruptionStartTime, System.TimeSpan interruptionFinishTime, object userState) {
            if ((this.onBeginEditOperatorDelegate == null)) {
                this.onBeginEditOperatorDelegate = new BeginOperationDelegate(this.OnBeginEditOperator);
            }
            if ((this.onEndEditOperatorDelegate == null)) {
                this.onEndEditOperatorDelegate = new EndOperationDelegate(this.OnEndEditOperator);
            }
            if ((this.onEditOperatorCompletedDelegate == null)) {
                this.onEditOperatorCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditOperatorCompleted);
            }
            base.InvokeAsync(this.onBeginEditOperatorDelegate, new object[] {
                        operatorId,
                        workplaceId,
                        isInterruption,
                        interruptionStartTime,
                        interruptionFinishTime}, this.onEndEditOperatorDelegate, this.onEditOperatorCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetOffices(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOffices(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<Queue.Services.DTO.Office> Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetOffices(System.IAsyncResult result) {
            return base.Channel.EndGetOffices(result);
        }
        
        private System.IAsyncResult OnBeginGetOffices(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetOffices(callback, asyncState);
        }
        
        private object[] OnEndGetOffices(System.IAsyncResult result) {
            System.Collections.Generic.List<Queue.Services.DTO.Office> retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetOffices(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOfficesCompleted(object state) {
            if ((this.GetOfficesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOfficesCompleted(this, new GetOfficesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOfficesAsync() {
            this.GetOfficesAsync(null);
        }
        
        public void GetOfficesAsync(object userState) {
            if ((this.onBeginGetOfficesDelegate == null)) {
                this.onBeginGetOfficesDelegate = new BeginOperationDelegate(this.OnBeginGetOffices);
            }
            if ((this.onEndGetOfficesDelegate == null)) {
                this.onEndGetOfficesDelegate = new EndOperationDelegate(this.OnEndGetOffices);
            }
            if ((this.onGetOfficesCompletedDelegate == null)) {
                this.onGetOfficesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOfficesCompleted);
            }
            base.InvokeAsync(this.onBeginGetOfficesDelegate, null, this.onEndGetOfficesDelegate, this.onGetOfficesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetOffice(System.Guid officeId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOffice(officeId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.Office Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetOffice(System.IAsyncResult result) {
            return base.Channel.EndGetOffice(result);
        }
        
        private System.IAsyncResult OnBeginGetOffice(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid officeId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetOffice(officeId, callback, asyncState);
        }
        
        private object[] OnEndGetOffice(System.IAsyncResult result) {
            Queue.Services.DTO.Office retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetOffice(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOfficeCompleted(object state) {
            if ((this.GetOfficeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOfficeCompleted(this, new GetOfficeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOfficeAsync(System.Guid officeId) {
            this.GetOfficeAsync(officeId, null);
        }
        
        public void GetOfficeAsync(System.Guid officeId, object userState) {
            if ((this.onBeginGetOfficeDelegate == null)) {
                this.onBeginGetOfficeDelegate = new BeginOperationDelegate(this.OnBeginGetOffice);
            }
            if ((this.onEndGetOfficeDelegate == null)) {
                this.onEndGetOfficeDelegate = new EndOperationDelegate(this.OnEndGetOffice);
            }
            if ((this.onGetOfficeCompletedDelegate == null)) {
                this.onGetOfficeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOfficeCompleted);
            }
            base.InvokeAsync(this.onBeginGetOfficeDelegate, new object[] {
                        officeId}, this.onEndGetOfficeDelegate, this.onGetOfficeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginAddOffice(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddOffice(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.Office Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndAddOffice(System.IAsyncResult result) {
            return base.Channel.EndAddOffice(result);
        }
        
        private System.IAsyncResult OnBeginAddOffice(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginAddOffice(callback, asyncState);
        }
        
        private object[] OnEndAddOffice(System.IAsyncResult result) {
            Queue.Services.DTO.Office retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndAddOffice(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddOfficeCompleted(object state) {
            if ((this.AddOfficeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddOfficeCompleted(this, new AddOfficeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddOfficeAsync() {
            this.AddOfficeAsync(null);
        }
        
        public void AddOfficeAsync(object userState) {
            if ((this.onBeginAddOfficeDelegate == null)) {
                this.onBeginAddOfficeDelegate = new BeginOperationDelegate(this.OnBeginAddOffice);
            }
            if ((this.onEndAddOfficeDelegate == null)) {
                this.onEndAddOfficeDelegate = new EndOperationDelegate(this.OnEndAddOffice);
            }
            if ((this.onAddOfficeCompletedDelegate == null)) {
                this.onAddOfficeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddOfficeCompleted);
            }
            base.InvokeAsync(this.onBeginAddOfficeDelegate, null, this.onEndAddOfficeDelegate, this.onAddOfficeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginEditOffice(System.Guid officeId, string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditOffice(officeId, name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.Office Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndEditOffice(System.IAsyncResult result) {
            return base.Channel.EndEditOffice(result);
        }
        
        private System.IAsyncResult OnBeginEditOffice(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid officeId = ((System.Guid)(inValues[0]));
            string name = ((string)(inValues[1]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginEditOffice(officeId, name, callback, asyncState);
        }
        
        private object[] OnEndEditOffice(System.IAsyncResult result) {
            Queue.Services.DTO.Office retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndEditOffice(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditOfficeCompleted(object state) {
            if ((this.EditOfficeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditOfficeCompleted(this, new EditOfficeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditOfficeAsync(System.Guid officeId, string name) {
            this.EditOfficeAsync(officeId, name, null);
        }
        
        public void EditOfficeAsync(System.Guid officeId, string name, object userState) {
            if ((this.onBeginEditOfficeDelegate == null)) {
                this.onBeginEditOfficeDelegate = new BeginOperationDelegate(this.OnBeginEditOffice);
            }
            if ((this.onEndEditOfficeDelegate == null)) {
                this.onEndEditOfficeDelegate = new EndOperationDelegate(this.OnEndEditOffice);
            }
            if ((this.onEditOfficeCompletedDelegate == null)) {
                this.onEditOfficeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditOfficeCompleted);
            }
            base.InvokeAsync(this.onBeginEditOfficeDelegate, new object[] {
                        officeId,
                        name}, this.onEndEditOfficeDelegate, this.onEditOfficeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginEditOfficeLogin(System.Guid officeId, string endpoint, System.Guid sessionId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditOfficeLogin(officeId, endpoint, sessionId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.Office Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndEditOfficeLogin(System.IAsyncResult result) {
            return base.Channel.EndEditOfficeLogin(result);
        }
        
        private System.IAsyncResult OnBeginEditOfficeLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid officeId = ((System.Guid)(inValues[0]));
            string endpoint = ((string)(inValues[1]));
            System.Guid sessionId = ((System.Guid)(inValues[2]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginEditOfficeLogin(officeId, endpoint, sessionId, callback, asyncState);
        }
        
        private object[] OnEndEditOfficeLogin(System.IAsyncResult result) {
            Queue.Services.DTO.Office retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndEditOfficeLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditOfficeLoginCompleted(object state) {
            if ((this.EditOfficeLoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditOfficeLoginCompleted(this, new EditOfficeLoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditOfficeLoginAsync(System.Guid officeId, string endpoint, System.Guid sessionId) {
            this.EditOfficeLoginAsync(officeId, endpoint, sessionId, null);
        }
        
        public void EditOfficeLoginAsync(System.Guid officeId, string endpoint, System.Guid sessionId, object userState) {
            if ((this.onBeginEditOfficeLoginDelegate == null)) {
                this.onBeginEditOfficeLoginDelegate = new BeginOperationDelegate(this.OnBeginEditOfficeLogin);
            }
            if ((this.onEndEditOfficeLoginDelegate == null)) {
                this.onEndEditOfficeLoginDelegate = new EndOperationDelegate(this.OnEndEditOfficeLogin);
            }
            if ((this.onEditOfficeLoginCompletedDelegate == null)) {
                this.onEditOfficeLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditOfficeLoginCompleted);
            }
            base.InvokeAsync(this.onBeginEditOfficeLoginDelegate, new object[] {
                        officeId,
                        endpoint,
                        sessionId}, this.onEndEditOfficeLoginDelegate, this.onEditOfficeLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginDeleteOffice(System.Guid officeId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteOffice(officeId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndDeleteOffice(System.IAsyncResult result) {
            base.Channel.EndDeleteOffice(result);
        }
        
        private System.IAsyncResult OnBeginDeleteOffice(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid officeId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginDeleteOffice(officeId, callback, asyncState);
        }
        
        private object[] OnEndDeleteOffice(System.IAsyncResult result) {
            ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndDeleteOffice(result);
            return null;
        }
        
        private void OnDeleteOfficeCompleted(object state) {
            if ((this.DeleteOfficeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteOfficeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteOfficeAsync(System.Guid officeId) {
            this.DeleteOfficeAsync(officeId, null);
        }
        
        public void DeleteOfficeAsync(System.Guid officeId, object userState) {
            if ((this.onBeginDeleteOfficeDelegate == null)) {
                this.onBeginDeleteOfficeDelegate = new BeginOperationDelegate(this.OnBeginDeleteOffice);
            }
            if ((this.onEndDeleteOfficeDelegate == null)) {
                this.onEndDeleteOfficeDelegate = new EndOperationDelegate(this.OnEndDeleteOffice);
            }
            if ((this.onDeleteOfficeCompletedDelegate == null)) {
                this.onDeleteOfficeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteOfficeCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteOfficeDelegate, new object[] {
                        officeId}, this.onEndDeleteOfficeDelegate, this.onDeleteOfficeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetWorkplacesList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWorkplacesList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<System.Guid, string> Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetWorkplacesList(System.IAsyncResult result) {
            return base.Channel.EndGetWorkplacesList(result);
        }
        
        private System.IAsyncResult OnBeginGetWorkplacesList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetWorkplacesList(callback, asyncState);
        }
        
        private object[] OnEndGetWorkplacesList(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<System.Guid, string> retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetWorkplacesList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWorkplacesListCompleted(object state) {
            if ((this.GetWorkplacesListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWorkplacesListCompleted(this, new GetWorkplacesListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWorkplacesListAsync() {
            this.GetWorkplacesListAsync(null);
        }
        
        public void GetWorkplacesListAsync(object userState) {
            if ((this.onBeginGetWorkplacesListDelegate == null)) {
                this.onBeginGetWorkplacesListDelegate = new BeginOperationDelegate(this.OnBeginGetWorkplacesList);
            }
            if ((this.onEndGetWorkplacesListDelegate == null)) {
                this.onEndGetWorkplacesListDelegate = new EndOperationDelegate(this.OnEndGetWorkplacesList);
            }
            if ((this.onGetWorkplacesListCompletedDelegate == null)) {
                this.onGetWorkplacesListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWorkplacesListCompleted);
            }
            base.InvokeAsync(this.onBeginGetWorkplacesListDelegate, null, this.onEndGetWorkplacesListDelegate, this.onGetWorkplacesListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetWorkplaces(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWorkplaces(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<Queue.Services.DTO.Workplace> Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetWorkplaces(System.IAsyncResult result) {
            return base.Channel.EndGetWorkplaces(result);
        }
        
        private System.IAsyncResult OnBeginGetWorkplaces(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetWorkplaces(callback, asyncState);
        }
        
        private object[] OnEndGetWorkplaces(System.IAsyncResult result) {
            System.Collections.Generic.List<Queue.Services.DTO.Workplace> retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetWorkplaces(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWorkplacesCompleted(object state) {
            if ((this.GetWorkplacesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWorkplacesCompleted(this, new GetWorkplacesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWorkplacesAsync() {
            this.GetWorkplacesAsync(null);
        }
        
        public void GetWorkplacesAsync(object userState) {
            if ((this.onBeginGetWorkplacesDelegate == null)) {
                this.onBeginGetWorkplacesDelegate = new BeginOperationDelegate(this.OnBeginGetWorkplaces);
            }
            if ((this.onEndGetWorkplacesDelegate == null)) {
                this.onEndGetWorkplacesDelegate = new EndOperationDelegate(this.OnEndGetWorkplaces);
            }
            if ((this.onGetWorkplacesCompletedDelegate == null)) {
                this.onGetWorkplacesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWorkplacesCompleted);
            }
            base.InvokeAsync(this.onBeginGetWorkplacesDelegate, null, this.onEndGetWorkplacesDelegate, this.onGetWorkplacesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetWorkplace(System.Guid workplaceId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWorkplace(workplaceId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.Workplace Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetWorkplace(System.IAsyncResult result) {
            return base.Channel.EndGetWorkplace(result);
        }
        
        private System.IAsyncResult OnBeginGetWorkplace(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid workplaceId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetWorkplace(workplaceId, callback, asyncState);
        }
        
        private object[] OnEndGetWorkplace(System.IAsyncResult result) {
            Queue.Services.DTO.Workplace retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetWorkplace(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWorkplaceCompleted(object state) {
            if ((this.GetWorkplaceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWorkplaceCompleted(this, new GetWorkplaceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWorkplaceAsync(System.Guid workplaceId) {
            this.GetWorkplaceAsync(workplaceId, null);
        }
        
        public void GetWorkplaceAsync(System.Guid workplaceId, object userState) {
            if ((this.onBeginGetWorkplaceDelegate == null)) {
                this.onBeginGetWorkplaceDelegate = new BeginOperationDelegate(this.OnBeginGetWorkplace);
            }
            if ((this.onEndGetWorkplaceDelegate == null)) {
                this.onEndGetWorkplaceDelegate = new EndOperationDelegate(this.OnEndGetWorkplace);
            }
            if ((this.onGetWorkplaceCompletedDelegate == null)) {
                this.onGetWorkplaceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWorkplaceCompleted);
            }
            base.InvokeAsync(this.onBeginGetWorkplaceDelegate, new object[] {
                        workplaceId}, this.onEndGetWorkplaceDelegate, this.onGetWorkplaceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginAddWorkplace(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddWorkplace(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.Workplace Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndAddWorkplace(System.IAsyncResult result) {
            return base.Channel.EndAddWorkplace(result);
        }
        
        private System.IAsyncResult OnBeginAddWorkplace(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginAddWorkplace(callback, asyncState);
        }
        
        private object[] OnEndAddWorkplace(System.IAsyncResult result) {
            Queue.Services.DTO.Workplace retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndAddWorkplace(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddWorkplaceCompleted(object state) {
            if ((this.AddWorkplaceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddWorkplaceCompleted(this, new AddWorkplaceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddWorkplaceAsync() {
            this.AddWorkplaceAsync(null);
        }
        
        public void AddWorkplaceAsync(object userState) {
            if ((this.onBeginAddWorkplaceDelegate == null)) {
                this.onBeginAddWorkplaceDelegate = new BeginOperationDelegate(this.OnBeginAddWorkplace);
            }
            if ((this.onEndAddWorkplaceDelegate == null)) {
                this.onEndAddWorkplaceDelegate = new EndOperationDelegate(this.OnEndAddWorkplace);
            }
            if ((this.onAddWorkplaceCompletedDelegate == null)) {
                this.onAddWorkplaceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddWorkplaceCompleted);
            }
            base.InvokeAsync(this.onBeginAddWorkplaceDelegate, null, this.onEndAddWorkplaceDelegate, this.onAddWorkplaceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginEditWorkplace(System.Guid workplaceId, Queue.Model.Common.WorkplaceType type, int number, Queue.Model.Common.WorkplaceModificator modificator, string comment, byte display, byte sections, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditWorkplace(workplaceId, type, number, modificator, comment, display, sections, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.Workplace Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndEditWorkplace(System.IAsyncResult result) {
            return base.Channel.EndEditWorkplace(result);
        }
        
        private System.IAsyncResult OnBeginEditWorkplace(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid workplaceId = ((System.Guid)(inValues[0]));
            Queue.Model.Common.WorkplaceType type = ((Queue.Model.Common.WorkplaceType)(inValues[1]));
            int number = ((int)(inValues[2]));
            Queue.Model.Common.WorkplaceModificator modificator = ((Queue.Model.Common.WorkplaceModificator)(inValues[3]));
            string comment = ((string)(inValues[4]));
            byte display = ((byte)(inValues[5]));
            byte sections = ((byte)(inValues[6]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginEditWorkplace(workplaceId, type, number, modificator, comment, display, sections, callback, asyncState);
        }
        
        private object[] OnEndEditWorkplace(System.IAsyncResult result) {
            Queue.Services.DTO.Workplace retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndEditWorkplace(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditWorkplaceCompleted(object state) {
            if ((this.EditWorkplaceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditWorkplaceCompleted(this, new EditWorkplaceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditWorkplaceAsync(System.Guid workplaceId, Queue.Model.Common.WorkplaceType type, int number, Queue.Model.Common.WorkplaceModificator modificator, string comment, byte display, byte sections) {
            this.EditWorkplaceAsync(workplaceId, type, number, modificator, comment, display, sections, null);
        }
        
        public void EditWorkplaceAsync(System.Guid workplaceId, Queue.Model.Common.WorkplaceType type, int number, Queue.Model.Common.WorkplaceModificator modificator, string comment, byte display, byte sections, object userState) {
            if ((this.onBeginEditWorkplaceDelegate == null)) {
                this.onBeginEditWorkplaceDelegate = new BeginOperationDelegate(this.OnBeginEditWorkplace);
            }
            if ((this.onEndEditWorkplaceDelegate == null)) {
                this.onEndEditWorkplaceDelegate = new EndOperationDelegate(this.OnEndEditWorkplace);
            }
            if ((this.onEditWorkplaceCompletedDelegate == null)) {
                this.onEditWorkplaceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditWorkplaceCompleted);
            }
            base.InvokeAsync(this.onBeginEditWorkplaceDelegate, new object[] {
                        workplaceId,
                        type,
                        number,
                        modificator,
                        comment,
                        display,
                        sections}, this.onEndEditWorkplaceDelegate, this.onEditWorkplaceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginDeleteWorkplace(System.Guid workplaceId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteWorkplace(workplaceId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndDeleteWorkplace(System.IAsyncResult result) {
            base.Channel.EndDeleteWorkplace(result);
        }
        
        private System.IAsyncResult OnBeginDeleteWorkplace(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid workplaceId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginDeleteWorkplace(workplaceId, callback, asyncState);
        }
        
        private object[] OnEndDeleteWorkplace(System.IAsyncResult result) {
            ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndDeleteWorkplace(result);
            return null;
        }
        
        private void OnDeleteWorkplaceCompleted(object state) {
            if ((this.DeleteWorkplaceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteWorkplaceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteWorkplaceAsync(System.Guid workplaceId) {
            this.DeleteWorkplaceAsync(workplaceId, null);
        }
        
        public void DeleteWorkplaceAsync(System.Guid workplaceId, object userState) {
            if ((this.onBeginDeleteWorkplaceDelegate == null)) {
                this.onBeginDeleteWorkplaceDelegate = new BeginOperationDelegate(this.OnBeginDeleteWorkplace);
            }
            if ((this.onEndDeleteWorkplaceDelegate == null)) {
                this.onEndDeleteWorkplaceDelegate = new EndOperationDelegate(this.OnEndDeleteWorkplace);
            }
            if ((this.onDeleteWorkplaceCompletedDelegate == null)) {
                this.onDeleteWorkplaceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteWorkplaceCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteWorkplaceDelegate, new object[] {
                        workplaceId}, this.onEndDeleteWorkplaceDelegate, this.onDeleteWorkplaceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetServiceList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetServiceList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<System.Guid, string> Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetServiceList(System.IAsyncResult result) {
            return base.Channel.EndGetServiceList(result);
        }
        
        private System.IAsyncResult OnBeginGetServiceList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetServiceList(callback, asyncState);
        }
        
        private object[] OnEndGetServiceList(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<System.Guid, string> retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetServiceList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetServiceListCompleted(object state) {
            if ((this.GetServiceListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetServiceListCompleted(this, new GetServiceListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetServiceListAsync() {
            this.GetServiceListAsync(null);
        }
        
        public void GetServiceListAsync(object userState) {
            if ((this.onBeginGetServiceListDelegate == null)) {
                this.onBeginGetServiceListDelegate = new BeginOperationDelegate(this.OnBeginGetServiceList);
            }
            if ((this.onEndGetServiceListDelegate == null)) {
                this.onEndGetServiceListDelegate = new EndOperationDelegate(this.OnEndGetServiceList);
            }
            if ((this.onGetServiceListCompletedDelegate == null)) {
                this.onGetServiceListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetServiceListCompleted);
            }
            base.InvokeAsync(this.onBeginGetServiceListDelegate, null, this.onEndGetServiceListDelegate, this.onGetServiceListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetRootServices(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRootServices(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<Queue.Services.DTO.Service> Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetRootServices(System.IAsyncResult result) {
            return base.Channel.EndGetRootServices(result);
        }
        
        private System.IAsyncResult OnBeginGetRootServices(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetRootServices(callback, asyncState);
        }
        
        private object[] OnEndGetRootServices(System.IAsyncResult result) {
            System.Collections.Generic.List<Queue.Services.DTO.Service> retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetRootServices(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRootServicesCompleted(object state) {
            if ((this.GetRootServicesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRootServicesCompleted(this, new GetRootServicesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRootServicesAsync() {
            this.GetRootServicesAsync(null);
        }
        
        public void GetRootServicesAsync(object userState) {
            if ((this.onBeginGetRootServicesDelegate == null)) {
                this.onBeginGetRootServicesDelegate = new BeginOperationDelegate(this.OnBeginGetRootServices);
            }
            if ((this.onEndGetRootServicesDelegate == null)) {
                this.onEndGetRootServicesDelegate = new EndOperationDelegate(this.OnEndGetRootServices);
            }
            if ((this.onGetRootServicesCompletedDelegate == null)) {
                this.onGetRootServicesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRootServicesCompleted);
            }
            base.InvokeAsync(this.onBeginGetRootServicesDelegate, null, this.onEndGetRootServicesDelegate, this.onGetRootServicesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetServices(System.Guid serviceGroupId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetServices(serviceGroupId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<Queue.Services.DTO.Service> Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetServices(System.IAsyncResult result) {
            return base.Channel.EndGetServices(result);
        }
        
        private System.IAsyncResult OnBeginGetServices(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid serviceGroupId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetServices(serviceGroupId, callback, asyncState);
        }
        
        private object[] OnEndGetServices(System.IAsyncResult result) {
            System.Collections.Generic.List<Queue.Services.DTO.Service> retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetServices(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetServicesCompleted(object state) {
            if ((this.GetServicesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetServicesCompleted(this, new GetServicesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetServicesAsync(System.Guid serviceGroupId) {
            this.GetServicesAsync(serviceGroupId, null);
        }
        
        public void GetServicesAsync(System.Guid serviceGroupId, object userState) {
            if ((this.onBeginGetServicesDelegate == null)) {
                this.onBeginGetServicesDelegate = new BeginOperationDelegate(this.OnBeginGetServices);
            }
            if ((this.onEndGetServicesDelegate == null)) {
                this.onEndGetServicesDelegate = new EndOperationDelegate(this.OnEndGetServices);
            }
            if ((this.onGetServicesCompletedDelegate == null)) {
                this.onGetServicesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetServicesCompleted);
            }
            base.InvokeAsync(this.onBeginGetServicesDelegate, new object[] {
                        serviceGroupId}, this.onEndGetServicesDelegate, this.onGetServicesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetService(System.Guid serviceId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetService(serviceId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.Service Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetService(System.IAsyncResult result) {
            return base.Channel.EndGetService(result);
        }
        
        private System.IAsyncResult OnBeginGetService(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid serviceId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetService(serviceId, callback, asyncState);
        }
        
        private object[] OnEndGetService(System.IAsyncResult result) {
            Queue.Services.DTO.Service retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetService(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetServiceCompleted(object state) {
            if ((this.GetServiceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetServiceCompleted(this, new GetServiceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetServiceAsync(System.Guid serviceId) {
            this.GetServiceAsync(serviceId, null);
        }
        
        public void GetServiceAsync(System.Guid serviceId, object userState) {
            if ((this.onBeginGetServiceDelegate == null)) {
                this.onBeginGetServiceDelegate = new BeginOperationDelegate(this.OnBeginGetService);
            }
            if ((this.onEndGetServiceDelegate == null)) {
                this.onEndGetServiceDelegate = new EndOperationDelegate(this.OnEndGetService);
            }
            if ((this.onGetServiceCompletedDelegate == null)) {
                this.onGetServiceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetServiceCompleted);
            }
            base.InvokeAsync(this.onBeginGetServiceDelegate, new object[] {
                        serviceId}, this.onEndGetServiceDelegate, this.onGetServiceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginFindServices(int startIndex, int maxResults, string filter, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindServices(startIndex, maxResults, filter, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<Queue.Services.DTO.Service> Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndFindServices(System.IAsyncResult result) {
            return base.Channel.EndFindServices(result);
        }
        
        private System.IAsyncResult OnBeginFindServices(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            int startIndex = ((int)(inValues[0]));
            int maxResults = ((int)(inValues[1]));
            string filter = ((string)(inValues[2]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginFindServices(startIndex, maxResults, filter, callback, asyncState);
        }
        
        private object[] OnEndFindServices(System.IAsyncResult result) {
            System.Collections.Generic.List<Queue.Services.DTO.Service> retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndFindServices(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindServicesCompleted(object state) {
            if ((this.FindServicesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindServicesCompleted(this, new FindServicesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindServicesAsync(int startIndex, int maxResults, string filter) {
            this.FindServicesAsync(startIndex, maxResults, filter, null);
        }
        
        public void FindServicesAsync(int startIndex, int maxResults, string filter, object userState) {
            if ((this.onBeginFindServicesDelegate == null)) {
                this.onBeginFindServicesDelegate = new BeginOperationDelegate(this.OnBeginFindServices);
            }
            if ((this.onEndFindServicesDelegate == null)) {
                this.onEndFindServicesDelegate = new EndOperationDelegate(this.OnEndFindServices);
            }
            if ((this.onFindServicesCompletedDelegate == null)) {
                this.onFindServicesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindServicesCompleted);
            }
            base.InvokeAsync(this.onBeginFindServicesDelegate, new object[] {
                        startIndex,
                        maxResults,
                        filter}, this.onEndFindServicesDelegate, this.onFindServicesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginAddRootService(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddRootService(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.Service Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndAddRootService(System.IAsyncResult result) {
            return base.Channel.EndAddRootService(result);
        }
        
        private System.IAsyncResult OnBeginAddRootService(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginAddRootService(callback, asyncState);
        }
        
        private object[] OnEndAddRootService(System.IAsyncResult result) {
            Queue.Services.DTO.Service retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndAddRootService(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddRootServiceCompleted(object state) {
            if ((this.AddRootServiceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddRootServiceCompleted(this, new AddRootServiceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddRootServiceAsync() {
            this.AddRootServiceAsync(null);
        }
        
        public void AddRootServiceAsync(object userState) {
            if ((this.onBeginAddRootServiceDelegate == null)) {
                this.onBeginAddRootServiceDelegate = new BeginOperationDelegate(this.OnBeginAddRootService);
            }
            if ((this.onEndAddRootServiceDelegate == null)) {
                this.onEndAddRootServiceDelegate = new EndOperationDelegate(this.OnEndAddRootService);
            }
            if ((this.onAddRootServiceCompletedDelegate == null)) {
                this.onAddRootServiceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddRootServiceCompleted);
            }
            base.InvokeAsync(this.onBeginAddRootServiceDelegate, null, this.onEndAddRootServiceDelegate, this.onAddRootServiceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginAddService(System.Guid serviceGroupId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddService(serviceGroupId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.Service Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndAddService(System.IAsyncResult result) {
            return base.Channel.EndAddService(result);
        }
        
        private System.IAsyncResult OnBeginAddService(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid serviceGroupId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginAddService(serviceGroupId, callback, asyncState);
        }
        
        private object[] OnEndAddService(System.IAsyncResult result) {
            Queue.Services.DTO.Service retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndAddService(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddServiceCompleted(object state) {
            if ((this.AddServiceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddServiceCompleted(this, new AddServiceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddServiceAsync(System.Guid serviceGroupId) {
            this.AddServiceAsync(serviceGroupId, null);
        }
        
        public void AddServiceAsync(System.Guid serviceGroupId, object userState) {
            if ((this.onBeginAddServiceDelegate == null)) {
                this.onBeginAddServiceDelegate = new BeginOperationDelegate(this.OnBeginAddService);
            }
            if ((this.onEndAddServiceDelegate == null)) {
                this.onEndAddServiceDelegate = new EndOperationDelegate(this.OnEndAddService);
            }
            if ((this.onAddServiceCompletedDelegate == null)) {
                this.onAddServiceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddServiceCompleted);
            }
            base.InvokeAsync(this.onBeginAddServiceDelegate, new object[] {
                        serviceGroupId}, this.onEndAddServiceDelegate, this.onAddServiceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginEditService(
                    System.Guid serviceId, 
                    string code, 
                    int priority, 
                    string name, 
                    string comment, 
                    string tags, 
                    string description, 
                    string link, 
                    int maxSubjects, 
                    int maxEarlyDays, 
                    bool clientRequire, 
                    Queue.Model.Common.ServiceType type, 
                    Queue.Model.Common.ClientRequestRegistrator liveRegistrator, 
                    Queue.Model.Common.ClientRequestRegistrator earlyRegistrator, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginEditService(serviceId, code, priority, name, comment, tags, description, link, maxSubjects, maxEarlyDays, clientRequire, type, liveRegistrator, earlyRegistrator, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.Service Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndEditService(System.IAsyncResult result) {
            return base.Channel.EndEditService(result);
        }
        
        private System.IAsyncResult OnBeginEditService(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid serviceId = ((System.Guid)(inValues[0]));
            string code = ((string)(inValues[1]));
            int priority = ((int)(inValues[2]));
            string name = ((string)(inValues[3]));
            string comment = ((string)(inValues[4]));
            string tags = ((string)(inValues[5]));
            string description = ((string)(inValues[6]));
            string link = ((string)(inValues[7]));
            int maxSubjects = ((int)(inValues[8]));
            int maxEarlyDays = ((int)(inValues[9]));
            bool clientRequire = ((bool)(inValues[10]));
            Queue.Model.Common.ServiceType type = ((Queue.Model.Common.ServiceType)(inValues[11]));
            Queue.Model.Common.ClientRequestRegistrator liveRegistrator = ((Queue.Model.Common.ClientRequestRegistrator)(inValues[12]));
            Queue.Model.Common.ClientRequestRegistrator earlyRegistrator = ((Queue.Model.Common.ClientRequestRegistrator)(inValues[13]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginEditService(serviceId, code, priority, name, comment, tags, description, link, maxSubjects, maxEarlyDays, clientRequire, type, liveRegistrator, earlyRegistrator, callback, asyncState);
        }
        
        private object[] OnEndEditService(System.IAsyncResult result) {
            Queue.Services.DTO.Service retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndEditService(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditServiceCompleted(object state) {
            if ((this.EditServiceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditServiceCompleted(this, new EditServiceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditServiceAsync(System.Guid serviceId, string code, int priority, string name, string comment, string tags, string description, string link, int maxSubjects, int maxEarlyDays, bool clientRequire, Queue.Model.Common.ServiceType type, Queue.Model.Common.ClientRequestRegistrator liveRegistrator, Queue.Model.Common.ClientRequestRegistrator earlyRegistrator) {
            this.EditServiceAsync(serviceId, code, priority, name, comment, tags, description, link, maxSubjects, maxEarlyDays, clientRequire, type, liveRegistrator, earlyRegistrator, null);
        }
        
        public void EditServiceAsync(System.Guid serviceId, string code, int priority, string name, string comment, string tags, string description, string link, int maxSubjects, int maxEarlyDays, bool clientRequire, Queue.Model.Common.ServiceType type, Queue.Model.Common.ClientRequestRegistrator liveRegistrator, Queue.Model.Common.ClientRequestRegistrator earlyRegistrator, object userState) {
            if ((this.onBeginEditServiceDelegate == null)) {
                this.onBeginEditServiceDelegate = new BeginOperationDelegate(this.OnBeginEditService);
            }
            if ((this.onEndEditServiceDelegate == null)) {
                this.onEndEditServiceDelegate = new EndOperationDelegate(this.OnEndEditService);
            }
            if ((this.onEditServiceCompletedDelegate == null)) {
                this.onEditServiceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditServiceCompleted);
            }
            base.InvokeAsync(this.onBeginEditServiceDelegate, new object[] {
                        serviceId,
                        code,
                        priority,
                        name,
                        comment,
                        tags,
                        description,
                        link,
                        maxSubjects,
                        maxEarlyDays,
                        clientRequire,
                        type,
                        liveRegistrator,
                        earlyRegistrator}, this.onEndEditServiceDelegate, this.onEditServiceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginMoveService(System.Guid serviceId, System.Guid serviceGroupId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMoveService(serviceId, serviceGroupId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndMoveService(System.IAsyncResult result) {
            base.Channel.EndMoveService(result);
        }
        
        private System.IAsyncResult OnBeginMoveService(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid serviceId = ((System.Guid)(inValues[0]));
            System.Guid serviceGroupId = ((System.Guid)(inValues[1]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginMoveService(serviceId, serviceGroupId, callback, asyncState);
        }
        
        private object[] OnEndMoveService(System.IAsyncResult result) {
            ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndMoveService(result);
            return null;
        }
        
        private void OnMoveServiceCompleted(object state) {
            if ((this.MoveServiceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MoveServiceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MoveServiceAsync(System.Guid serviceId, System.Guid serviceGroupId) {
            this.MoveServiceAsync(serviceId, serviceGroupId, null);
        }
        
        public void MoveServiceAsync(System.Guid serviceId, System.Guid serviceGroupId, object userState) {
            if ((this.onBeginMoveServiceDelegate == null)) {
                this.onBeginMoveServiceDelegate = new BeginOperationDelegate(this.OnBeginMoveService);
            }
            if ((this.onEndMoveServiceDelegate == null)) {
                this.onEndMoveServiceDelegate = new EndOperationDelegate(this.OnEndMoveService);
            }
            if ((this.onMoveServiceCompletedDelegate == null)) {
                this.onMoveServiceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMoveServiceCompleted);
            }
            base.InvokeAsync(this.onBeginMoveServiceDelegate, new object[] {
                        serviceId,
                        serviceGroupId}, this.onEndMoveServiceDelegate, this.onMoveServiceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginDeleteService(System.Guid serviceId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteService(serviceId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndDeleteService(System.IAsyncResult result) {
            base.Channel.EndDeleteService(result);
        }
        
        private System.IAsyncResult OnBeginDeleteService(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid serviceId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginDeleteService(serviceId, callback, asyncState);
        }
        
        private object[] OnEndDeleteService(System.IAsyncResult result) {
            ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndDeleteService(result);
            return null;
        }
        
        private void OnDeleteServiceCompleted(object state) {
            if ((this.DeleteServiceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteServiceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteServiceAsync(System.Guid serviceId) {
            this.DeleteServiceAsync(serviceId, null);
        }
        
        public void DeleteServiceAsync(System.Guid serviceId, object userState) {
            if ((this.onBeginDeleteServiceDelegate == null)) {
                this.onBeginDeleteServiceDelegate = new BeginOperationDelegate(this.OnBeginDeleteService);
            }
            if ((this.onEndDeleteServiceDelegate == null)) {
                this.onEndDeleteServiceDelegate = new EndOperationDelegate(this.OnEndDeleteService);
            }
            if ((this.onDeleteServiceCompletedDelegate == null)) {
                this.onDeleteServiceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteServiceCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteServiceDelegate, new object[] {
                        serviceId}, this.onEndDeleteServiceDelegate, this.onDeleteServiceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginServiceUp(System.Guid serviceId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginServiceUp(serviceId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndServiceUp(System.IAsyncResult result) {
            return base.Channel.EndServiceUp(result);
        }
        
        private System.IAsyncResult OnBeginServiceUp(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid serviceId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginServiceUp(serviceId, callback, asyncState);
        }
        
        private object[] OnEndServiceUp(System.IAsyncResult result) {
            bool retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndServiceUp(result);
            return new object[] {
                    retVal};
        }
        
        private void OnServiceUpCompleted(object state) {
            if ((this.ServiceUpCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ServiceUpCompleted(this, new ServiceUpCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ServiceUpAsync(System.Guid serviceId) {
            this.ServiceUpAsync(serviceId, null);
        }
        
        public void ServiceUpAsync(System.Guid serviceId, object userState) {
            if ((this.onBeginServiceUpDelegate == null)) {
                this.onBeginServiceUpDelegate = new BeginOperationDelegate(this.OnBeginServiceUp);
            }
            if ((this.onEndServiceUpDelegate == null)) {
                this.onEndServiceUpDelegate = new EndOperationDelegate(this.OnEndServiceUp);
            }
            if ((this.onServiceUpCompletedDelegate == null)) {
                this.onServiceUpCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnServiceUpCompleted);
            }
            base.InvokeAsync(this.onBeginServiceUpDelegate, new object[] {
                        serviceId}, this.onEndServiceUpDelegate, this.onServiceUpCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginServiceDown(System.Guid serviceId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginServiceDown(serviceId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndServiceDown(System.IAsyncResult result) {
            return base.Channel.EndServiceDown(result);
        }
        
        private System.IAsyncResult OnBeginServiceDown(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid serviceId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginServiceDown(serviceId, callback, asyncState);
        }
        
        private object[] OnEndServiceDown(System.IAsyncResult result) {
            bool retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndServiceDown(result);
            return new object[] {
                    retVal};
        }
        
        private void OnServiceDownCompleted(object state) {
            if ((this.ServiceDownCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ServiceDownCompleted(this, new ServiceDownCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ServiceDownAsync(System.Guid serviceId) {
            this.ServiceDownAsync(serviceId, null);
        }
        
        public void ServiceDownAsync(System.Guid serviceId, object userState) {
            if ((this.onBeginServiceDownDelegate == null)) {
                this.onBeginServiceDownDelegate = new BeginOperationDelegate(this.OnBeginServiceDown);
            }
            if ((this.onEndServiceDownDelegate == null)) {
                this.onEndServiceDownDelegate = new EndOperationDelegate(this.OnEndServiceDown);
            }
            if ((this.onServiceDownCompletedDelegate == null)) {
                this.onServiceDownCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnServiceDownCompleted);
            }
            base.InvokeAsync(this.onBeginServiceDownDelegate, new object[] {
                        serviceId}, this.onEndServiceDownDelegate, this.onServiceDownCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginChangeServiceActivity(System.Guid serviceId, bool isActive, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangeServiceActivity(serviceId, isActive, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndChangeServiceActivity(System.IAsyncResult result) {
            base.Channel.EndChangeServiceActivity(result);
        }
        
        private System.IAsyncResult OnBeginChangeServiceActivity(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid serviceId = ((System.Guid)(inValues[0]));
            bool isActive = ((bool)(inValues[1]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginChangeServiceActivity(serviceId, isActive, callback, asyncState);
        }
        
        private object[] OnEndChangeServiceActivity(System.IAsyncResult result) {
            ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndChangeServiceActivity(result);
            return null;
        }
        
        private void OnChangeServiceActivityCompleted(object state) {
            if ((this.ChangeServiceActivityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangeServiceActivityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangeServiceActivityAsync(System.Guid serviceId, bool isActive) {
            this.ChangeServiceActivityAsync(serviceId, isActive, null);
        }
        
        public void ChangeServiceActivityAsync(System.Guid serviceId, bool isActive, object userState) {
            if ((this.onBeginChangeServiceActivityDelegate == null)) {
                this.onBeginChangeServiceActivityDelegate = new BeginOperationDelegate(this.OnBeginChangeServiceActivity);
            }
            if ((this.onEndChangeServiceActivityDelegate == null)) {
                this.onEndChangeServiceActivityDelegate = new EndOperationDelegate(this.OnEndChangeServiceActivity);
            }
            if ((this.onChangeServiceActivityCompletedDelegate == null)) {
                this.onChangeServiceActivityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangeServiceActivityCompleted);
            }
            base.InvokeAsync(this.onBeginChangeServiceActivityDelegate, new object[] {
                        serviceId,
                        isActive}, this.onEndChangeServiceActivityDelegate, this.onChangeServiceActivityCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetServiceCurrentSchedule(System.Guid serviceId, System.DateTime planDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetServiceCurrentSchedule(serviceId, planDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.Schedule Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetServiceCurrentSchedule(System.IAsyncResult result) {
            return base.Channel.EndGetServiceCurrentSchedule(result);
        }
        
        private System.IAsyncResult OnBeginGetServiceCurrentSchedule(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid serviceId = ((System.Guid)(inValues[0]));
            System.DateTime planDate = ((System.DateTime)(inValues[1]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetServiceCurrentSchedule(serviceId, planDate, callback, asyncState);
        }
        
        private object[] OnEndGetServiceCurrentSchedule(System.IAsyncResult result) {
            Queue.Services.DTO.Schedule retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetServiceCurrentSchedule(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetServiceCurrentScheduleCompleted(object state) {
            if ((this.GetServiceCurrentScheduleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetServiceCurrentScheduleCompleted(this, new GetServiceCurrentScheduleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetServiceCurrentScheduleAsync(System.Guid serviceId, System.DateTime planDate) {
            this.GetServiceCurrentScheduleAsync(serviceId, planDate, null);
        }
        
        public void GetServiceCurrentScheduleAsync(System.Guid serviceId, System.DateTime planDate, object userState) {
            if ((this.onBeginGetServiceCurrentScheduleDelegate == null)) {
                this.onBeginGetServiceCurrentScheduleDelegate = new BeginOperationDelegate(this.OnBeginGetServiceCurrentSchedule);
            }
            if ((this.onEndGetServiceCurrentScheduleDelegate == null)) {
                this.onEndGetServiceCurrentScheduleDelegate = new EndOperationDelegate(this.OnEndGetServiceCurrentSchedule);
            }
            if ((this.onGetServiceCurrentScheduleCompletedDelegate == null)) {
                this.onGetServiceCurrentScheduleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetServiceCurrentScheduleCompleted);
            }
            base.InvokeAsync(this.onBeginGetServiceCurrentScheduleDelegate, new object[] {
                        serviceId,
                        planDate}, this.onEndGetServiceCurrentScheduleDelegate, this.onGetServiceCurrentScheduleCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetServiceWeekdaySchedule(System.Guid serviceId, Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek dayOfWeek, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetServiceWeekdaySchedule(serviceId, dayOfWeek, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.ServiceWeekdaySchedule Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetServiceWeekdaySchedule(System.IAsyncResult result) {
            return base.Channel.EndGetServiceWeekdaySchedule(result);
        }
        
        private System.IAsyncResult OnBeginGetServiceWeekdaySchedule(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid serviceId = ((System.Guid)(inValues[0]));
            Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek dayOfWeek = ((Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek)(inValues[1]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetServiceWeekdaySchedule(serviceId, dayOfWeek, callback, asyncState);
        }
        
        private object[] OnEndGetServiceWeekdaySchedule(System.IAsyncResult result) {
            Queue.Services.DTO.ServiceWeekdaySchedule retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetServiceWeekdaySchedule(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetServiceWeekdayScheduleCompleted(object state) {
            if ((this.GetServiceWeekdayScheduleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetServiceWeekdayScheduleCompleted(this, new GetServiceWeekdayScheduleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetServiceWeekdayScheduleAsync(System.Guid serviceId, Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek dayOfWeek) {
            this.GetServiceWeekdayScheduleAsync(serviceId, dayOfWeek, null);
        }
        
        public void GetServiceWeekdayScheduleAsync(System.Guid serviceId, Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek dayOfWeek, object userState) {
            if ((this.onBeginGetServiceWeekdayScheduleDelegate == null)) {
                this.onBeginGetServiceWeekdayScheduleDelegate = new BeginOperationDelegate(this.OnBeginGetServiceWeekdaySchedule);
            }
            if ((this.onEndGetServiceWeekdayScheduleDelegate == null)) {
                this.onEndGetServiceWeekdayScheduleDelegate = new EndOperationDelegate(this.OnEndGetServiceWeekdaySchedule);
            }
            if ((this.onGetServiceWeekdayScheduleCompletedDelegate == null)) {
                this.onGetServiceWeekdayScheduleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetServiceWeekdayScheduleCompleted);
            }
            base.InvokeAsync(this.onBeginGetServiceWeekdayScheduleDelegate, new object[] {
                        serviceId,
                        dayOfWeek}, this.onEndGetServiceWeekdayScheduleDelegate, this.onGetServiceWeekdayScheduleCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginEditServiceWeekdaySchedule(
                    System.Guid serviceId, 
                    Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek dayOfWeek, 
                    System.TimeSpan startTime, 
                    System.TimeSpan finishTime, 
                    bool isWorked, 
                    bool isInterruption, 
                    System.TimeSpan interruptionStartTime, 
                    System.TimeSpan interruptionFinishTime, 
                    System.TimeSpan clientInterval, 
                    System.TimeSpan intersection, 
                    Queue.Model.Common.ServiceRenderingMode renderingMode, 
                    System.TimeSpan earlyStartTime, 
                    System.TimeSpan earlyFinishTime, 
                    int earlyReservation, 
                    int maxClientRequests, 
                    System.Collections.Generic.Dictionary<System.Guid, Queue.Model.Common.ServiceRenderingMode> renderings, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginEditServiceWeekdaySchedule(serviceId, dayOfWeek, startTime, finishTime, isWorked, isInterruption, interruptionStartTime, interruptionFinishTime, clientInterval, intersection, renderingMode, earlyStartTime, earlyFinishTime, earlyReservation, maxClientRequests, renderings, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.ServiceWeekdaySchedule Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndEditServiceWeekdaySchedule(System.IAsyncResult result) {
            return base.Channel.EndEditServiceWeekdaySchedule(result);
        }
        
        private System.IAsyncResult OnBeginEditServiceWeekdaySchedule(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid serviceId = ((System.Guid)(inValues[0]));
            Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek dayOfWeek = ((Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek)(inValues[1]));
            System.TimeSpan startTime = ((System.TimeSpan)(inValues[2]));
            System.TimeSpan finishTime = ((System.TimeSpan)(inValues[3]));
            bool isWorked = ((bool)(inValues[4]));
            bool isInterruption = ((bool)(inValues[5]));
            System.TimeSpan interruptionStartTime = ((System.TimeSpan)(inValues[6]));
            System.TimeSpan interruptionFinishTime = ((System.TimeSpan)(inValues[7]));
            System.TimeSpan clientInterval = ((System.TimeSpan)(inValues[8]));
            System.TimeSpan intersection = ((System.TimeSpan)(inValues[9]));
            Queue.Model.Common.ServiceRenderingMode renderingMode = ((Queue.Model.Common.ServiceRenderingMode)(inValues[10]));
            System.TimeSpan earlyStartTime = ((System.TimeSpan)(inValues[11]));
            System.TimeSpan earlyFinishTime = ((System.TimeSpan)(inValues[12]));
            int earlyReservation = ((int)(inValues[13]));
            int maxClientRequests = ((int)(inValues[14]));
            System.Collections.Generic.Dictionary<System.Guid, Queue.Model.Common.ServiceRenderingMode> renderings = ((System.Collections.Generic.Dictionary<System.Guid, Queue.Model.Common.ServiceRenderingMode>)(inValues[15]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginEditServiceWeekdaySchedule(serviceId, dayOfWeek, startTime, finishTime, isWorked, isInterruption, interruptionStartTime, interruptionFinishTime, clientInterval, intersection, renderingMode, earlyStartTime, earlyFinishTime, earlyReservation, maxClientRequests, renderings, callback, asyncState);
        }
        
        private object[] OnEndEditServiceWeekdaySchedule(System.IAsyncResult result) {
            Queue.Services.DTO.ServiceWeekdaySchedule retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndEditServiceWeekdaySchedule(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditServiceWeekdayScheduleCompleted(object state) {
            if ((this.EditServiceWeekdayScheduleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditServiceWeekdayScheduleCompleted(this, new EditServiceWeekdayScheduleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditServiceWeekdayScheduleAsync(
                    System.Guid serviceId, 
                    Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek dayOfWeek, 
                    System.TimeSpan startTime, 
                    System.TimeSpan finishTime, 
                    bool isWorked, 
                    bool isInterruption, 
                    System.TimeSpan interruptionStartTime, 
                    System.TimeSpan interruptionFinishTime, 
                    System.TimeSpan clientInterval, 
                    System.TimeSpan intersection, 
                    Queue.Model.Common.ServiceRenderingMode renderingMode, 
                    System.TimeSpan earlyStartTime, 
                    System.TimeSpan earlyFinishTime, 
                    int earlyReservation, 
                    int maxClientRequests, 
                    System.Collections.Generic.Dictionary<System.Guid, Queue.Model.Common.ServiceRenderingMode> renderings) {
            this.EditServiceWeekdayScheduleAsync(serviceId, dayOfWeek, startTime, finishTime, isWorked, isInterruption, interruptionStartTime, interruptionFinishTime, clientInterval, intersection, renderingMode, earlyStartTime, earlyFinishTime, earlyReservation, maxClientRequests, renderings, null);
        }
        
        public void EditServiceWeekdayScheduleAsync(
                    System.Guid serviceId, 
                    Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek dayOfWeek, 
                    System.TimeSpan startTime, 
                    System.TimeSpan finishTime, 
                    bool isWorked, 
                    bool isInterruption, 
                    System.TimeSpan interruptionStartTime, 
                    System.TimeSpan interruptionFinishTime, 
                    System.TimeSpan clientInterval, 
                    System.TimeSpan intersection, 
                    Queue.Model.Common.ServiceRenderingMode renderingMode, 
                    System.TimeSpan earlyStartTime, 
                    System.TimeSpan earlyFinishTime, 
                    int earlyReservation, 
                    int maxClientRequests, 
                    System.Collections.Generic.Dictionary<System.Guid, Queue.Model.Common.ServiceRenderingMode> renderings, 
                    object userState) {
            if ((this.onBeginEditServiceWeekdayScheduleDelegate == null)) {
                this.onBeginEditServiceWeekdayScheduleDelegate = new BeginOperationDelegate(this.OnBeginEditServiceWeekdaySchedule);
            }
            if ((this.onEndEditServiceWeekdayScheduleDelegate == null)) {
                this.onEndEditServiceWeekdayScheduleDelegate = new EndOperationDelegate(this.OnEndEditServiceWeekdaySchedule);
            }
            if ((this.onEditServiceWeekdayScheduleCompletedDelegate == null)) {
                this.onEditServiceWeekdayScheduleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditServiceWeekdayScheduleCompleted);
            }
            base.InvokeAsync(this.onBeginEditServiceWeekdayScheduleDelegate, new object[] {
                        serviceId,
                        dayOfWeek,
                        startTime,
                        finishTime,
                        isWorked,
                        isInterruption,
                        interruptionStartTime,
                        interruptionFinishTime,
                        clientInterval,
                        intersection,
                        renderingMode,
                        earlyStartTime,
                        earlyFinishTime,
                        earlyReservation,
                        maxClientRequests,
                        renderings}, this.onEndEditServiceWeekdayScheduleDelegate, this.onEditServiceWeekdayScheduleCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginDeleteServiceWeekdaySchedule(System.Guid serviceId, Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek dayOfWeek, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteServiceWeekdaySchedule(serviceId, dayOfWeek, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndDeleteServiceWeekdaySchedule(System.IAsyncResult result) {
            base.Channel.EndDeleteServiceWeekdaySchedule(result);
        }
        
        private System.IAsyncResult OnBeginDeleteServiceWeekdaySchedule(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid serviceId = ((System.Guid)(inValues[0]));
            Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek dayOfWeek = ((Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek)(inValues[1]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginDeleteServiceWeekdaySchedule(serviceId, dayOfWeek, callback, asyncState);
        }
        
        private object[] OnEndDeleteServiceWeekdaySchedule(System.IAsyncResult result) {
            ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndDeleteServiceWeekdaySchedule(result);
            return null;
        }
        
        private void OnDeleteServiceWeekdayScheduleCompleted(object state) {
            if ((this.DeleteServiceWeekdayScheduleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteServiceWeekdayScheduleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteServiceWeekdayScheduleAsync(System.Guid serviceId, Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek dayOfWeek) {
            this.DeleteServiceWeekdayScheduleAsync(serviceId, dayOfWeek, null);
        }
        
        public void DeleteServiceWeekdayScheduleAsync(System.Guid serviceId, Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek dayOfWeek, object userState) {
            if ((this.onBeginDeleteServiceWeekdayScheduleDelegate == null)) {
                this.onBeginDeleteServiceWeekdayScheduleDelegate = new BeginOperationDelegate(this.OnBeginDeleteServiceWeekdaySchedule);
            }
            if ((this.onEndDeleteServiceWeekdayScheduleDelegate == null)) {
                this.onEndDeleteServiceWeekdayScheduleDelegate = new EndOperationDelegate(this.OnEndDeleteServiceWeekdaySchedule);
            }
            if ((this.onDeleteServiceWeekdayScheduleCompletedDelegate == null)) {
                this.onDeleteServiceWeekdayScheduleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteServiceWeekdayScheduleCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteServiceWeekdayScheduleDelegate, new object[] {
                        serviceId,
                        dayOfWeek}, this.onEndDeleteServiceWeekdayScheduleDelegate, this.onDeleteServiceWeekdayScheduleCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetServiceExceptionSchedule(System.Guid serviceId, System.DateTime scheduleDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetServiceExceptionSchedule(serviceId, scheduleDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.ServiceExceptionSchedule Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetServiceExceptionSchedule(System.IAsyncResult result) {
            return base.Channel.EndGetServiceExceptionSchedule(result);
        }
        
        private System.IAsyncResult OnBeginGetServiceExceptionSchedule(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid serviceId = ((System.Guid)(inValues[0]));
            System.DateTime scheduleDate = ((System.DateTime)(inValues[1]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetServiceExceptionSchedule(serviceId, scheduleDate, callback, asyncState);
        }
        
        private object[] OnEndGetServiceExceptionSchedule(System.IAsyncResult result) {
            Queue.Services.DTO.ServiceExceptionSchedule retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetServiceExceptionSchedule(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetServiceExceptionScheduleCompleted(object state) {
            if ((this.GetServiceExceptionScheduleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetServiceExceptionScheduleCompleted(this, new GetServiceExceptionScheduleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetServiceExceptionScheduleAsync(System.Guid serviceId, System.DateTime scheduleDate) {
            this.GetServiceExceptionScheduleAsync(serviceId, scheduleDate, null);
        }
        
        public void GetServiceExceptionScheduleAsync(System.Guid serviceId, System.DateTime scheduleDate, object userState) {
            if ((this.onBeginGetServiceExceptionScheduleDelegate == null)) {
                this.onBeginGetServiceExceptionScheduleDelegate = new BeginOperationDelegate(this.OnBeginGetServiceExceptionSchedule);
            }
            if ((this.onEndGetServiceExceptionScheduleDelegate == null)) {
                this.onEndGetServiceExceptionScheduleDelegate = new EndOperationDelegate(this.OnEndGetServiceExceptionSchedule);
            }
            if ((this.onGetServiceExceptionScheduleCompletedDelegate == null)) {
                this.onGetServiceExceptionScheduleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetServiceExceptionScheduleCompleted);
            }
            base.InvokeAsync(this.onBeginGetServiceExceptionScheduleDelegate, new object[] {
                        serviceId,
                        scheduleDate}, this.onEndGetServiceExceptionScheduleDelegate, this.onGetServiceExceptionScheduleCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginEditServiceExceptionSchedule(
                    System.Guid serviceId, 
                    System.DateTime scheduleDate, 
                    System.TimeSpan startTime, 
                    System.TimeSpan finishTime, 
                    bool isWorked, 
                    bool isInterruption, 
                    System.TimeSpan interruptionStartTime, 
                    System.TimeSpan interruptionFinishTime, 
                    System.TimeSpan clientInterval, 
                    System.TimeSpan intersection, 
                    Queue.Model.Common.ServiceRenderingMode renderingMode, 
                    System.TimeSpan earlyStartTime, 
                    System.TimeSpan earlyFinishTime, 
                    int earlyReservation, 
                    int maxClientRequests, 
                    System.Collections.Generic.Dictionary<System.Guid, Queue.Model.Common.ServiceRenderingMode> renderings, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginEditServiceExceptionSchedule(serviceId, scheduleDate, startTime, finishTime, isWorked, isInterruption, interruptionStartTime, interruptionFinishTime, clientInterval, intersection, renderingMode, earlyStartTime, earlyFinishTime, earlyReservation, maxClientRequests, renderings, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.ServiceExceptionSchedule Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndEditServiceExceptionSchedule(System.IAsyncResult result) {
            return base.Channel.EndEditServiceExceptionSchedule(result);
        }
        
        private System.IAsyncResult OnBeginEditServiceExceptionSchedule(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid serviceId = ((System.Guid)(inValues[0]));
            System.DateTime scheduleDate = ((System.DateTime)(inValues[1]));
            System.TimeSpan startTime = ((System.TimeSpan)(inValues[2]));
            System.TimeSpan finishTime = ((System.TimeSpan)(inValues[3]));
            bool isWorked = ((bool)(inValues[4]));
            bool isInterruption = ((bool)(inValues[5]));
            System.TimeSpan interruptionStartTime = ((System.TimeSpan)(inValues[6]));
            System.TimeSpan interruptionFinishTime = ((System.TimeSpan)(inValues[7]));
            System.TimeSpan clientInterval = ((System.TimeSpan)(inValues[8]));
            System.TimeSpan intersection = ((System.TimeSpan)(inValues[9]));
            Queue.Model.Common.ServiceRenderingMode renderingMode = ((Queue.Model.Common.ServiceRenderingMode)(inValues[10]));
            System.TimeSpan earlyStartTime = ((System.TimeSpan)(inValues[11]));
            System.TimeSpan earlyFinishTime = ((System.TimeSpan)(inValues[12]));
            int earlyReservation = ((int)(inValues[13]));
            int maxClientRequests = ((int)(inValues[14]));
            System.Collections.Generic.Dictionary<System.Guid, Queue.Model.Common.ServiceRenderingMode> renderings = ((System.Collections.Generic.Dictionary<System.Guid, Queue.Model.Common.ServiceRenderingMode>)(inValues[15]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginEditServiceExceptionSchedule(serviceId, scheduleDate, startTime, finishTime, isWorked, isInterruption, interruptionStartTime, interruptionFinishTime, clientInterval, intersection, renderingMode, earlyStartTime, earlyFinishTime, earlyReservation, maxClientRequests, renderings, callback, asyncState);
        }
        
        private object[] OnEndEditServiceExceptionSchedule(System.IAsyncResult result) {
            Queue.Services.DTO.ServiceExceptionSchedule retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndEditServiceExceptionSchedule(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditServiceExceptionScheduleCompleted(object state) {
            if ((this.EditServiceExceptionScheduleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditServiceExceptionScheduleCompleted(this, new EditServiceExceptionScheduleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditServiceExceptionScheduleAsync(
                    System.Guid serviceId, 
                    System.DateTime scheduleDate, 
                    System.TimeSpan startTime, 
                    System.TimeSpan finishTime, 
                    bool isWorked, 
                    bool isInterruption, 
                    System.TimeSpan interruptionStartTime, 
                    System.TimeSpan interruptionFinishTime, 
                    System.TimeSpan clientInterval, 
                    System.TimeSpan intersection, 
                    Queue.Model.Common.ServiceRenderingMode renderingMode, 
                    System.TimeSpan earlyStartTime, 
                    System.TimeSpan earlyFinishTime, 
                    int earlyReservation, 
                    int maxClientRequests, 
                    System.Collections.Generic.Dictionary<System.Guid, Queue.Model.Common.ServiceRenderingMode> renderings) {
            this.EditServiceExceptionScheduleAsync(serviceId, scheduleDate, startTime, finishTime, isWorked, isInterruption, interruptionStartTime, interruptionFinishTime, clientInterval, intersection, renderingMode, earlyStartTime, earlyFinishTime, earlyReservation, maxClientRequests, renderings, null);
        }
        
        public void EditServiceExceptionScheduleAsync(
                    System.Guid serviceId, 
                    System.DateTime scheduleDate, 
                    System.TimeSpan startTime, 
                    System.TimeSpan finishTime, 
                    bool isWorked, 
                    bool isInterruption, 
                    System.TimeSpan interruptionStartTime, 
                    System.TimeSpan interruptionFinishTime, 
                    System.TimeSpan clientInterval, 
                    System.TimeSpan intersection, 
                    Queue.Model.Common.ServiceRenderingMode renderingMode, 
                    System.TimeSpan earlyStartTime, 
                    System.TimeSpan earlyFinishTime, 
                    int earlyReservation, 
                    int maxClientRequests, 
                    System.Collections.Generic.Dictionary<System.Guid, Queue.Model.Common.ServiceRenderingMode> renderings, 
                    object userState) {
            if ((this.onBeginEditServiceExceptionScheduleDelegate == null)) {
                this.onBeginEditServiceExceptionScheduleDelegate = new BeginOperationDelegate(this.OnBeginEditServiceExceptionSchedule);
            }
            if ((this.onEndEditServiceExceptionScheduleDelegate == null)) {
                this.onEndEditServiceExceptionScheduleDelegate = new EndOperationDelegate(this.OnEndEditServiceExceptionSchedule);
            }
            if ((this.onEditServiceExceptionScheduleCompletedDelegate == null)) {
                this.onEditServiceExceptionScheduleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditServiceExceptionScheduleCompleted);
            }
            base.InvokeAsync(this.onBeginEditServiceExceptionScheduleDelegate, new object[] {
                        serviceId,
                        scheduleDate,
                        startTime,
                        finishTime,
                        isWorked,
                        isInterruption,
                        interruptionStartTime,
                        interruptionFinishTime,
                        clientInterval,
                        intersection,
                        renderingMode,
                        earlyStartTime,
                        earlyFinishTime,
                        earlyReservation,
                        maxClientRequests,
                        renderings}, this.onEndEditServiceExceptionScheduleDelegate, this.onEditServiceExceptionScheduleCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginDeleteServiceExceptionSchedule(System.Guid serviceId, System.DateTime scheduleDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteServiceExceptionSchedule(serviceId, scheduleDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndDeleteServiceExceptionSchedule(System.IAsyncResult result) {
            base.Channel.EndDeleteServiceExceptionSchedule(result);
        }
        
        private System.IAsyncResult OnBeginDeleteServiceExceptionSchedule(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid serviceId = ((System.Guid)(inValues[0]));
            System.DateTime scheduleDate = ((System.DateTime)(inValues[1]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginDeleteServiceExceptionSchedule(serviceId, scheduleDate, callback, asyncState);
        }
        
        private object[] OnEndDeleteServiceExceptionSchedule(System.IAsyncResult result) {
            ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndDeleteServiceExceptionSchedule(result);
            return null;
        }
        
        private void OnDeleteServiceExceptionScheduleCompleted(object state) {
            if ((this.DeleteServiceExceptionScheduleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteServiceExceptionScheduleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteServiceExceptionScheduleAsync(System.Guid serviceId, System.DateTime scheduleDate) {
            this.DeleteServiceExceptionScheduleAsync(serviceId, scheduleDate, null);
        }
        
        public void DeleteServiceExceptionScheduleAsync(System.Guid serviceId, System.DateTime scheduleDate, object userState) {
            if ((this.onBeginDeleteServiceExceptionScheduleDelegate == null)) {
                this.onBeginDeleteServiceExceptionScheduleDelegate = new BeginOperationDelegate(this.OnBeginDeleteServiceExceptionSchedule);
            }
            if ((this.onEndDeleteServiceExceptionScheduleDelegate == null)) {
                this.onEndDeleteServiceExceptionScheduleDelegate = new EndOperationDelegate(this.OnEndDeleteServiceExceptionSchedule);
            }
            if ((this.onDeleteServiceExceptionScheduleCompletedDelegate == null)) {
                this.onDeleteServiceExceptionScheduleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteServiceExceptionScheduleCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteServiceExceptionScheduleDelegate, new object[] {
                        serviceId,
                        scheduleDate}, this.onEndDeleteServiceExceptionScheduleDelegate, this.onDeleteServiceExceptionScheduleCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetDefaultWeekdaySchedule(Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek dayOfWeek, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDefaultWeekdaySchedule(dayOfWeek, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.DefaultWeekdaySchedule Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetDefaultWeekdaySchedule(System.IAsyncResult result) {
            return base.Channel.EndGetDefaultWeekdaySchedule(result);
        }
        
        private System.IAsyncResult OnBeginGetDefaultWeekdaySchedule(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek dayOfWeek = ((Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetDefaultWeekdaySchedule(dayOfWeek, callback, asyncState);
        }
        
        private object[] OnEndGetDefaultWeekdaySchedule(System.IAsyncResult result) {
            Queue.Services.DTO.DefaultWeekdaySchedule retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetDefaultWeekdaySchedule(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDefaultWeekdayScheduleCompleted(object state) {
            if ((this.GetDefaultWeekdayScheduleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDefaultWeekdayScheduleCompleted(this, new GetDefaultWeekdayScheduleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDefaultWeekdayScheduleAsync(Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek dayOfWeek) {
            this.GetDefaultWeekdayScheduleAsync(dayOfWeek, null);
        }
        
        public void GetDefaultWeekdayScheduleAsync(Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek dayOfWeek, object userState) {
            if ((this.onBeginGetDefaultWeekdayScheduleDelegate == null)) {
                this.onBeginGetDefaultWeekdayScheduleDelegate = new BeginOperationDelegate(this.OnBeginGetDefaultWeekdaySchedule);
            }
            if ((this.onEndGetDefaultWeekdayScheduleDelegate == null)) {
                this.onEndGetDefaultWeekdayScheduleDelegate = new EndOperationDelegate(this.OnEndGetDefaultWeekdaySchedule);
            }
            if ((this.onGetDefaultWeekdayScheduleCompletedDelegate == null)) {
                this.onGetDefaultWeekdayScheduleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDefaultWeekdayScheduleCompleted);
            }
            base.InvokeAsync(this.onBeginGetDefaultWeekdayScheduleDelegate, new object[] {
                        dayOfWeek}, this.onEndGetDefaultWeekdayScheduleDelegate, this.onGetDefaultWeekdayScheduleCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginEditDefaultWeekdaySchedule(
                    Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek dayOfWeek, 
                    System.TimeSpan startTime, 
                    System.TimeSpan finishTime, 
                    bool isWorked, 
                    bool isInterruption, 
                    System.TimeSpan interruptionStartTime, 
                    System.TimeSpan interruptionFinishTime, 
                    System.TimeSpan clientInterval, 
                    System.TimeSpan intersection, 
                    Queue.Model.Common.ServiceRenderingMode renderingMode, 
                    System.TimeSpan earlyStartTime, 
                    System.TimeSpan earlyFinishTime, 
                    int earlyReservation, 
                    int maxClientRequests, 
                    System.Collections.Generic.Dictionary<System.Guid, Queue.Model.Common.ServiceRenderingMode> renderings, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginEditDefaultWeekdaySchedule(dayOfWeek, startTime, finishTime, isWorked, isInterruption, interruptionStartTime, interruptionFinishTime, clientInterval, intersection, renderingMode, earlyStartTime, earlyFinishTime, earlyReservation, maxClientRequests, renderings, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.DefaultWeekdaySchedule Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndEditDefaultWeekdaySchedule(System.IAsyncResult result) {
            return base.Channel.EndEditDefaultWeekdaySchedule(result);
        }
        
        private System.IAsyncResult OnBeginEditDefaultWeekdaySchedule(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek dayOfWeek = ((Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek)(inValues[0]));
            System.TimeSpan startTime = ((System.TimeSpan)(inValues[1]));
            System.TimeSpan finishTime = ((System.TimeSpan)(inValues[2]));
            bool isWorked = ((bool)(inValues[3]));
            bool isInterruption = ((bool)(inValues[4]));
            System.TimeSpan interruptionStartTime = ((System.TimeSpan)(inValues[5]));
            System.TimeSpan interruptionFinishTime = ((System.TimeSpan)(inValues[6]));
            System.TimeSpan clientInterval = ((System.TimeSpan)(inValues[7]));
            System.TimeSpan intersection = ((System.TimeSpan)(inValues[8]));
            Queue.Model.Common.ServiceRenderingMode renderingMode = ((Queue.Model.Common.ServiceRenderingMode)(inValues[9]));
            System.TimeSpan earlyStartTime = ((System.TimeSpan)(inValues[10]));
            System.TimeSpan earlyFinishTime = ((System.TimeSpan)(inValues[11]));
            int earlyReservation = ((int)(inValues[12]));
            int maxClientRequests = ((int)(inValues[13]));
            System.Collections.Generic.Dictionary<System.Guid, Queue.Model.Common.ServiceRenderingMode> renderings = ((System.Collections.Generic.Dictionary<System.Guid, Queue.Model.Common.ServiceRenderingMode>)(inValues[14]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginEditDefaultWeekdaySchedule(dayOfWeek, startTime, finishTime, isWorked, isInterruption, interruptionStartTime, interruptionFinishTime, clientInterval, intersection, renderingMode, earlyStartTime, earlyFinishTime, earlyReservation, maxClientRequests, renderings, callback, asyncState);
        }
        
        private object[] OnEndEditDefaultWeekdaySchedule(System.IAsyncResult result) {
            Queue.Services.DTO.DefaultWeekdaySchedule retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndEditDefaultWeekdaySchedule(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditDefaultWeekdayScheduleCompleted(object state) {
            if ((this.EditDefaultWeekdayScheduleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditDefaultWeekdayScheduleCompleted(this, new EditDefaultWeekdayScheduleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditDefaultWeekdayScheduleAsync(Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek dayOfWeek, System.TimeSpan startTime, System.TimeSpan finishTime, bool isWorked, bool isInterruption, System.TimeSpan interruptionStartTime, System.TimeSpan interruptionFinishTime, System.TimeSpan clientInterval, System.TimeSpan intersection, Queue.Model.Common.ServiceRenderingMode renderingMode, System.TimeSpan earlyStartTime, System.TimeSpan earlyFinishTime, int earlyReservation, int maxClientRequests, System.Collections.Generic.Dictionary<System.Guid, Queue.Model.Common.ServiceRenderingMode> renderings) {
            this.EditDefaultWeekdayScheduleAsync(dayOfWeek, startTime, finishTime, isWorked, isInterruption, interruptionStartTime, interruptionFinishTime, clientInterval, intersection, renderingMode, earlyStartTime, earlyFinishTime, earlyReservation, maxClientRequests, renderings, null);
        }
        
        public void EditDefaultWeekdayScheduleAsync(
                    Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek dayOfWeek, 
                    System.TimeSpan startTime, 
                    System.TimeSpan finishTime, 
                    bool isWorked, 
                    bool isInterruption, 
                    System.TimeSpan interruptionStartTime, 
                    System.TimeSpan interruptionFinishTime, 
                    System.TimeSpan clientInterval, 
                    System.TimeSpan intersection, 
                    Queue.Model.Common.ServiceRenderingMode renderingMode, 
                    System.TimeSpan earlyStartTime, 
                    System.TimeSpan earlyFinishTime, 
                    int earlyReservation, 
                    int maxClientRequests, 
                    System.Collections.Generic.Dictionary<System.Guid, Queue.Model.Common.ServiceRenderingMode> renderings, 
                    object userState) {
            if ((this.onBeginEditDefaultWeekdayScheduleDelegate == null)) {
                this.onBeginEditDefaultWeekdayScheduleDelegate = new BeginOperationDelegate(this.OnBeginEditDefaultWeekdaySchedule);
            }
            if ((this.onEndEditDefaultWeekdayScheduleDelegate == null)) {
                this.onEndEditDefaultWeekdayScheduleDelegate = new EndOperationDelegate(this.OnEndEditDefaultWeekdaySchedule);
            }
            if ((this.onEditDefaultWeekdayScheduleCompletedDelegate == null)) {
                this.onEditDefaultWeekdayScheduleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditDefaultWeekdayScheduleCompleted);
            }
            base.InvokeAsync(this.onBeginEditDefaultWeekdayScheduleDelegate, new object[] {
                        dayOfWeek,
                        startTime,
                        finishTime,
                        isWorked,
                        isInterruption,
                        interruptionStartTime,
                        interruptionFinishTime,
                        clientInterval,
                        intersection,
                        renderingMode,
                        earlyStartTime,
                        earlyFinishTime,
                        earlyReservation,
                        maxClientRequests,
                        renderings}, this.onEndEditDefaultWeekdayScheduleDelegate, this.onEditDefaultWeekdayScheduleCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetDefaultExceptionSchedule(System.DateTime scheduleDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDefaultExceptionSchedule(scheduleDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.DefaultExceptionSchedule Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetDefaultExceptionSchedule(System.IAsyncResult result) {
            return base.Channel.EndGetDefaultExceptionSchedule(result);
        }
        
        private System.IAsyncResult OnBeginGetDefaultExceptionSchedule(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.DateTime scheduleDate = ((System.DateTime)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetDefaultExceptionSchedule(scheduleDate, callback, asyncState);
        }
        
        private object[] OnEndGetDefaultExceptionSchedule(System.IAsyncResult result) {
            Queue.Services.DTO.DefaultExceptionSchedule retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetDefaultExceptionSchedule(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDefaultExceptionScheduleCompleted(object state) {
            if ((this.GetDefaultExceptionScheduleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDefaultExceptionScheduleCompleted(this, new GetDefaultExceptionScheduleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDefaultExceptionScheduleAsync(System.DateTime scheduleDate) {
            this.GetDefaultExceptionScheduleAsync(scheduleDate, null);
        }
        
        public void GetDefaultExceptionScheduleAsync(System.DateTime scheduleDate, object userState) {
            if ((this.onBeginGetDefaultExceptionScheduleDelegate == null)) {
                this.onBeginGetDefaultExceptionScheduleDelegate = new BeginOperationDelegate(this.OnBeginGetDefaultExceptionSchedule);
            }
            if ((this.onEndGetDefaultExceptionScheduleDelegate == null)) {
                this.onEndGetDefaultExceptionScheduleDelegate = new EndOperationDelegate(this.OnEndGetDefaultExceptionSchedule);
            }
            if ((this.onGetDefaultExceptionScheduleCompletedDelegate == null)) {
                this.onGetDefaultExceptionScheduleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDefaultExceptionScheduleCompleted);
            }
            base.InvokeAsync(this.onBeginGetDefaultExceptionScheduleDelegate, new object[] {
                        scheduleDate}, this.onEndGetDefaultExceptionScheduleDelegate, this.onGetDefaultExceptionScheduleCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginEditDefaultExceptionSchedule(
                    System.DateTime scheduleDate, 
                    System.TimeSpan startTime, 
                    System.TimeSpan finishTime, 
                    bool isWorked, 
                    bool isInterruption, 
                    System.TimeSpan interruptionStartTime, 
                    System.TimeSpan interruptionFinishTime, 
                    System.TimeSpan clientInterval, 
                    System.TimeSpan intersection, 
                    Queue.Model.Common.ServiceRenderingMode renderingMode, 
                    System.TimeSpan earlyStartTime, 
                    System.TimeSpan earlyFinishTime, 
                    int earlyReservation, 
                    int maxClientRequests, 
                    System.Collections.Generic.Dictionary<System.Guid, Queue.Model.Common.ServiceRenderingMode> renderings, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginEditDefaultExceptionSchedule(scheduleDate, startTime, finishTime, isWorked, isInterruption, interruptionStartTime, interruptionFinishTime, clientInterval, intersection, renderingMode, earlyStartTime, earlyFinishTime, earlyReservation, maxClientRequests, renderings, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.DefaultExceptionSchedule Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndEditDefaultExceptionSchedule(System.IAsyncResult result) {
            return base.Channel.EndEditDefaultExceptionSchedule(result);
        }
        
        private System.IAsyncResult OnBeginEditDefaultExceptionSchedule(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.DateTime scheduleDate = ((System.DateTime)(inValues[0]));
            System.TimeSpan startTime = ((System.TimeSpan)(inValues[1]));
            System.TimeSpan finishTime = ((System.TimeSpan)(inValues[2]));
            bool isWorked = ((bool)(inValues[3]));
            bool isInterruption = ((bool)(inValues[4]));
            System.TimeSpan interruptionStartTime = ((System.TimeSpan)(inValues[5]));
            System.TimeSpan interruptionFinishTime = ((System.TimeSpan)(inValues[6]));
            System.TimeSpan clientInterval = ((System.TimeSpan)(inValues[7]));
            System.TimeSpan intersection = ((System.TimeSpan)(inValues[8]));
            Queue.Model.Common.ServiceRenderingMode renderingMode = ((Queue.Model.Common.ServiceRenderingMode)(inValues[9]));
            System.TimeSpan earlyStartTime = ((System.TimeSpan)(inValues[10]));
            System.TimeSpan earlyFinishTime = ((System.TimeSpan)(inValues[11]));
            int earlyReservation = ((int)(inValues[12]));
            int maxClientRequests = ((int)(inValues[13]));
            System.Collections.Generic.Dictionary<System.Guid, Queue.Model.Common.ServiceRenderingMode> renderings = ((System.Collections.Generic.Dictionary<System.Guid, Queue.Model.Common.ServiceRenderingMode>)(inValues[14]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginEditDefaultExceptionSchedule(scheduleDate, startTime, finishTime, isWorked, isInterruption, interruptionStartTime, interruptionFinishTime, clientInterval, intersection, renderingMode, earlyStartTime, earlyFinishTime, earlyReservation, maxClientRequests, renderings, callback, asyncState);
        }
        
        private object[] OnEndEditDefaultExceptionSchedule(System.IAsyncResult result) {
            Queue.Services.DTO.DefaultExceptionSchedule retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndEditDefaultExceptionSchedule(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditDefaultExceptionScheduleCompleted(object state) {
            if ((this.EditDefaultExceptionScheduleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditDefaultExceptionScheduleCompleted(this, new EditDefaultExceptionScheduleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditDefaultExceptionScheduleAsync(System.DateTime scheduleDate, System.TimeSpan startTime, System.TimeSpan finishTime, bool isWorked, bool isInterruption, System.TimeSpan interruptionStartTime, System.TimeSpan interruptionFinishTime, System.TimeSpan clientInterval, System.TimeSpan intersection, Queue.Model.Common.ServiceRenderingMode renderingMode, System.TimeSpan earlyStartTime, System.TimeSpan earlyFinishTime, int earlyReservation, int maxClientRequests, System.Collections.Generic.Dictionary<System.Guid, Queue.Model.Common.ServiceRenderingMode> renderings) {
            this.EditDefaultExceptionScheduleAsync(scheduleDate, startTime, finishTime, isWorked, isInterruption, interruptionStartTime, interruptionFinishTime, clientInterval, intersection, renderingMode, earlyStartTime, earlyFinishTime, earlyReservation, maxClientRequests, renderings, null);
        }
        
        public void EditDefaultExceptionScheduleAsync(
                    System.DateTime scheduleDate, 
                    System.TimeSpan startTime, 
                    System.TimeSpan finishTime, 
                    bool isWorked, 
                    bool isInterruption, 
                    System.TimeSpan interruptionStartTime, 
                    System.TimeSpan interruptionFinishTime, 
                    System.TimeSpan clientInterval, 
                    System.TimeSpan intersection, 
                    Queue.Model.Common.ServiceRenderingMode renderingMode, 
                    System.TimeSpan earlyStartTime, 
                    System.TimeSpan earlyFinishTime, 
                    int earlyReservation, 
                    int maxClientRequests, 
                    System.Collections.Generic.Dictionary<System.Guid, Queue.Model.Common.ServiceRenderingMode> renderings, 
                    object userState) {
            if ((this.onBeginEditDefaultExceptionScheduleDelegate == null)) {
                this.onBeginEditDefaultExceptionScheduleDelegate = new BeginOperationDelegate(this.OnBeginEditDefaultExceptionSchedule);
            }
            if ((this.onEndEditDefaultExceptionScheduleDelegate == null)) {
                this.onEndEditDefaultExceptionScheduleDelegate = new EndOperationDelegate(this.OnEndEditDefaultExceptionSchedule);
            }
            if ((this.onEditDefaultExceptionScheduleCompletedDelegate == null)) {
                this.onEditDefaultExceptionScheduleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditDefaultExceptionScheduleCompleted);
            }
            base.InvokeAsync(this.onBeginEditDefaultExceptionScheduleDelegate, new object[] {
                        scheduleDate,
                        startTime,
                        finishTime,
                        isWorked,
                        isInterruption,
                        interruptionStartTime,
                        interruptionFinishTime,
                        clientInterval,
                        intersection,
                        renderingMode,
                        earlyStartTime,
                        earlyFinishTime,
                        earlyReservation,
                        maxClientRequests,
                        renderings}, this.onEndEditDefaultExceptionScheduleDelegate, this.onEditDefaultExceptionScheduleCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginDeleteDefaultExceptionSchedule(System.DateTime scheduleDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteDefaultExceptionSchedule(scheduleDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndDeleteDefaultExceptionSchedule(System.IAsyncResult result) {
            base.Channel.EndDeleteDefaultExceptionSchedule(result);
        }
        
        private System.IAsyncResult OnBeginDeleteDefaultExceptionSchedule(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.DateTime scheduleDate = ((System.DateTime)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginDeleteDefaultExceptionSchedule(scheduleDate, callback, asyncState);
        }
        
        private object[] OnEndDeleteDefaultExceptionSchedule(System.IAsyncResult result) {
            ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndDeleteDefaultExceptionSchedule(result);
            return null;
        }
        
        private void OnDeleteDefaultExceptionScheduleCompleted(object state) {
            if ((this.DeleteDefaultExceptionScheduleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteDefaultExceptionScheduleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteDefaultExceptionScheduleAsync(System.DateTime scheduleDate) {
            this.DeleteDefaultExceptionScheduleAsync(scheduleDate, null);
        }
        
        public void DeleteDefaultExceptionScheduleAsync(System.DateTime scheduleDate, object userState) {
            if ((this.onBeginDeleteDefaultExceptionScheduleDelegate == null)) {
                this.onBeginDeleteDefaultExceptionScheduleDelegate = new BeginOperationDelegate(this.OnBeginDeleteDefaultExceptionSchedule);
            }
            if ((this.onEndDeleteDefaultExceptionScheduleDelegate == null)) {
                this.onEndDeleteDefaultExceptionScheduleDelegate = new EndOperationDelegate(this.OnEndDeleteDefaultExceptionSchedule);
            }
            if ((this.onDeleteDefaultExceptionScheduleCompletedDelegate == null)) {
                this.onDeleteDefaultExceptionScheduleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteDefaultExceptionScheduleCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteDefaultExceptionScheduleDelegate, new object[] {
                        scheduleDate}, this.onEndDeleteDefaultExceptionScheduleDelegate, this.onDeleteDefaultExceptionScheduleCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetServiceParameters(System.Guid serviceId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetServiceParameters(serviceId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<Queue.Services.DTO.ServiceParameter> Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetServiceParameters(System.IAsyncResult result) {
            return base.Channel.EndGetServiceParameters(result);
        }
        
        private System.IAsyncResult OnBeginGetServiceParameters(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid serviceId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetServiceParameters(serviceId, callback, asyncState);
        }
        
        private object[] OnEndGetServiceParameters(System.IAsyncResult result) {
            System.Collections.Generic.List<Queue.Services.DTO.ServiceParameter> retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetServiceParameters(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetServiceParametersCompleted(object state) {
            if ((this.GetServiceParametersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetServiceParametersCompleted(this, new GetServiceParametersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetServiceParametersAsync(System.Guid serviceId) {
            this.GetServiceParametersAsync(serviceId, null);
        }
        
        public void GetServiceParametersAsync(System.Guid serviceId, object userState) {
            if ((this.onBeginGetServiceParametersDelegate == null)) {
                this.onBeginGetServiceParametersDelegate = new BeginOperationDelegate(this.OnBeginGetServiceParameters);
            }
            if ((this.onEndGetServiceParametersDelegate == null)) {
                this.onEndGetServiceParametersDelegate = new EndOperationDelegate(this.OnEndGetServiceParameters);
            }
            if ((this.onGetServiceParametersCompletedDelegate == null)) {
                this.onGetServiceParametersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetServiceParametersCompleted);
            }
            base.InvokeAsync(this.onBeginGetServiceParametersDelegate, new object[] {
                        serviceId}, this.onEndGetServiceParametersDelegate, this.onGetServiceParametersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginAddServiceParameter(System.Guid serviceId, Queue.Model.Common.ServiceParameterType type, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddServiceParameter(serviceId, type, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.ServiceParameter Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndAddServiceParameter(System.IAsyncResult result) {
            return base.Channel.EndAddServiceParameter(result);
        }
        
        private System.IAsyncResult OnBeginAddServiceParameter(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid serviceId = ((System.Guid)(inValues[0]));
            Queue.Model.Common.ServiceParameterType type = ((Queue.Model.Common.ServiceParameterType)(inValues[1]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginAddServiceParameter(serviceId, type, callback, asyncState);
        }
        
        private object[] OnEndAddServiceParameter(System.IAsyncResult result) {
            Queue.Services.DTO.ServiceParameter retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndAddServiceParameter(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddServiceParameterCompleted(object state) {
            if ((this.AddServiceParameterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddServiceParameterCompleted(this, new AddServiceParameterCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddServiceParameterAsync(System.Guid serviceId, Queue.Model.Common.ServiceParameterType type) {
            this.AddServiceParameterAsync(serviceId, type, null);
        }
        
        public void AddServiceParameterAsync(System.Guid serviceId, Queue.Model.Common.ServiceParameterType type, object userState) {
            if ((this.onBeginAddServiceParameterDelegate == null)) {
                this.onBeginAddServiceParameterDelegate = new BeginOperationDelegate(this.OnBeginAddServiceParameter);
            }
            if ((this.onEndAddServiceParameterDelegate == null)) {
                this.onEndAddServiceParameterDelegate = new EndOperationDelegate(this.OnEndAddServiceParameter);
            }
            if ((this.onAddServiceParameterCompletedDelegate == null)) {
                this.onAddServiceParameterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddServiceParameterCompleted);
            }
            base.InvokeAsync(this.onBeginAddServiceParameterDelegate, new object[] {
                        serviceId,
                        type}, this.onEndAddServiceParameterDelegate, this.onAddServiceParameterCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginEditNumberServiceParameter(System.Guid parameterId, string name, string tooltip, bool isRequire, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditNumberServiceParameter(parameterId, name, tooltip, isRequire, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.ServiceParameter Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndEditNumberServiceParameter(System.IAsyncResult result) {
            return base.Channel.EndEditNumberServiceParameter(result);
        }
        
        private System.IAsyncResult OnBeginEditNumberServiceParameter(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid parameterId = ((System.Guid)(inValues[0]));
            string name = ((string)(inValues[1]));
            string tooltip = ((string)(inValues[2]));
            bool isRequire = ((bool)(inValues[3]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginEditNumberServiceParameter(parameterId, name, tooltip, isRequire, callback, asyncState);
        }
        
        private object[] OnEndEditNumberServiceParameter(System.IAsyncResult result) {
            Queue.Services.DTO.ServiceParameter retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndEditNumberServiceParameter(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditNumberServiceParameterCompleted(object state) {
            if ((this.EditNumberServiceParameterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditNumberServiceParameterCompleted(this, new EditNumberServiceParameterCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditNumberServiceParameterAsync(System.Guid parameterId, string name, string tooltip, bool isRequire) {
            this.EditNumberServiceParameterAsync(parameterId, name, tooltip, isRequire, null);
        }
        
        public void EditNumberServiceParameterAsync(System.Guid parameterId, string name, string tooltip, bool isRequire, object userState) {
            if ((this.onBeginEditNumberServiceParameterDelegate == null)) {
                this.onBeginEditNumberServiceParameterDelegate = new BeginOperationDelegate(this.OnBeginEditNumberServiceParameter);
            }
            if ((this.onEndEditNumberServiceParameterDelegate == null)) {
                this.onEndEditNumberServiceParameterDelegate = new EndOperationDelegate(this.OnEndEditNumberServiceParameter);
            }
            if ((this.onEditNumberServiceParameterCompletedDelegate == null)) {
                this.onEditNumberServiceParameterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditNumberServiceParameterCompleted);
            }
            base.InvokeAsync(this.onBeginEditNumberServiceParameterDelegate, new object[] {
                        parameterId,
                        name,
                        tooltip,
                        isRequire}, this.onEndEditNumberServiceParameterDelegate, this.onEditNumberServiceParameterCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginEditTextServiceParameter(System.Guid parameterId, string name, string tooltip, bool isRequire, int minLength, int maxLength, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditTextServiceParameter(parameterId, name, tooltip, isRequire, minLength, maxLength, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.ServiceParameter Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndEditTextServiceParameter(System.IAsyncResult result) {
            return base.Channel.EndEditTextServiceParameter(result);
        }
        
        private System.IAsyncResult OnBeginEditTextServiceParameter(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid parameterId = ((System.Guid)(inValues[0]));
            string name = ((string)(inValues[1]));
            string tooltip = ((string)(inValues[2]));
            bool isRequire = ((bool)(inValues[3]));
            int minLength = ((int)(inValues[4]));
            int maxLength = ((int)(inValues[5]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginEditTextServiceParameter(parameterId, name, tooltip, isRequire, minLength, maxLength, callback, asyncState);
        }
        
        private object[] OnEndEditTextServiceParameter(System.IAsyncResult result) {
            Queue.Services.DTO.ServiceParameter retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndEditTextServiceParameter(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditTextServiceParameterCompleted(object state) {
            if ((this.EditTextServiceParameterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditTextServiceParameterCompleted(this, new EditTextServiceParameterCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditTextServiceParameterAsync(System.Guid parameterId, string name, string tooltip, bool isRequire, int minLength, int maxLength) {
            this.EditTextServiceParameterAsync(parameterId, name, tooltip, isRequire, minLength, maxLength, null);
        }
        
        public void EditTextServiceParameterAsync(System.Guid parameterId, string name, string tooltip, bool isRequire, int minLength, int maxLength, object userState) {
            if ((this.onBeginEditTextServiceParameterDelegate == null)) {
                this.onBeginEditTextServiceParameterDelegate = new BeginOperationDelegate(this.OnBeginEditTextServiceParameter);
            }
            if ((this.onEndEditTextServiceParameterDelegate == null)) {
                this.onEndEditTextServiceParameterDelegate = new EndOperationDelegate(this.OnEndEditTextServiceParameter);
            }
            if ((this.onEditTextServiceParameterCompletedDelegate == null)) {
                this.onEditTextServiceParameterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditTextServiceParameterCompleted);
            }
            base.InvokeAsync(this.onBeginEditTextServiceParameterDelegate, new object[] {
                        parameterId,
                        name,
                        tooltip,
                        isRequire,
                        minLength,
                        maxLength}, this.onEndEditTextServiceParameterDelegate, this.onEditTextServiceParameterCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginEditOptionsServiceParameter(System.Guid parameterId, string name, string tooltip, bool isRequire, string options, bool isMultiple, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditOptionsServiceParameter(parameterId, name, tooltip, isRequire, options, isMultiple, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.ServiceParameter Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndEditOptionsServiceParameter(System.IAsyncResult result) {
            return base.Channel.EndEditOptionsServiceParameter(result);
        }
        
        private System.IAsyncResult OnBeginEditOptionsServiceParameter(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid parameterId = ((System.Guid)(inValues[0]));
            string name = ((string)(inValues[1]));
            string tooltip = ((string)(inValues[2]));
            bool isRequire = ((bool)(inValues[3]));
            string options = ((string)(inValues[4]));
            bool isMultiple = ((bool)(inValues[5]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginEditOptionsServiceParameter(parameterId, name, tooltip, isRequire, options, isMultiple, callback, asyncState);
        }
        
        private object[] OnEndEditOptionsServiceParameter(System.IAsyncResult result) {
            Queue.Services.DTO.ServiceParameter retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndEditOptionsServiceParameter(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditOptionsServiceParameterCompleted(object state) {
            if ((this.EditOptionsServiceParameterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditOptionsServiceParameterCompleted(this, new EditOptionsServiceParameterCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditOptionsServiceParameterAsync(System.Guid parameterId, string name, string tooltip, bool isRequire, string options, bool isMultiple) {
            this.EditOptionsServiceParameterAsync(parameterId, name, tooltip, isRequire, options, isMultiple, null);
        }
        
        public void EditOptionsServiceParameterAsync(System.Guid parameterId, string name, string tooltip, bool isRequire, string options, bool isMultiple, object userState) {
            if ((this.onBeginEditOptionsServiceParameterDelegate == null)) {
                this.onBeginEditOptionsServiceParameterDelegate = new BeginOperationDelegate(this.OnBeginEditOptionsServiceParameter);
            }
            if ((this.onEndEditOptionsServiceParameterDelegate == null)) {
                this.onEndEditOptionsServiceParameterDelegate = new EndOperationDelegate(this.OnEndEditOptionsServiceParameter);
            }
            if ((this.onEditOptionsServiceParameterCompletedDelegate == null)) {
                this.onEditOptionsServiceParameterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditOptionsServiceParameterCompleted);
            }
            base.InvokeAsync(this.onBeginEditOptionsServiceParameterDelegate, new object[] {
                        parameterId,
                        name,
                        tooltip,
                        isRequire,
                        options,
                        isMultiple}, this.onEndEditOptionsServiceParameterDelegate, this.onEditOptionsServiceParameterCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginDeleteServiceParameter(System.Guid serviceParameterId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteServiceParameter(serviceParameterId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndDeleteServiceParameter(System.IAsyncResult result) {
            base.Channel.EndDeleteServiceParameter(result);
        }
        
        private System.IAsyncResult OnBeginDeleteServiceParameter(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid serviceParameterId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginDeleteServiceParameter(serviceParameterId, callback, asyncState);
        }
        
        private object[] OnEndDeleteServiceParameter(System.IAsyncResult result) {
            ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndDeleteServiceParameter(result);
            return null;
        }
        
        private void OnDeleteServiceParameterCompleted(object state) {
            if ((this.DeleteServiceParameterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteServiceParameterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteServiceParameterAsync(System.Guid serviceParameterId) {
            this.DeleteServiceParameterAsync(serviceParameterId, null);
        }
        
        public void DeleteServiceParameterAsync(System.Guid serviceParameterId, object userState) {
            if ((this.onBeginDeleteServiceParameterDelegate == null)) {
                this.onBeginDeleteServiceParameterDelegate = new BeginOperationDelegate(this.OnBeginDeleteServiceParameter);
            }
            if ((this.onEndDeleteServiceParameterDelegate == null)) {
                this.onEndDeleteServiceParameterDelegate = new EndOperationDelegate(this.OnEndDeleteServiceParameter);
            }
            if ((this.onDeleteServiceParameterCompletedDelegate == null)) {
                this.onDeleteServiceParameterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteServiceParameterCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteServiceParameterDelegate, new object[] {
                        serviceParameterId}, this.onEndDeleteServiceParameterDelegate, this.onDeleteServiceParameterCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetServiceRatingReport(System.Collections.Generic.List<System.Guid> servicesIds, Queue.Model.Common.ServiceRatingReportDetailLavel detailLavel, Queue.Model.Common.ServiceRatingReportSettings settings, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetServiceRatingReport(servicesIds, detailLavel, settings, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetServiceRatingReport(System.IAsyncResult result) {
            return base.Channel.EndGetServiceRatingReport(result);
        }
        
        private System.IAsyncResult OnBeginGetServiceRatingReport(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Collections.Generic.List<System.Guid> servicesIds = ((System.Collections.Generic.List<System.Guid>)(inValues[0]));
            Queue.Model.Common.ServiceRatingReportDetailLavel detailLavel = ((Queue.Model.Common.ServiceRatingReportDetailLavel)(inValues[1]));
            Queue.Model.Common.ServiceRatingReportSettings settings = ((Queue.Model.Common.ServiceRatingReportSettings)(inValues[2]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetServiceRatingReport(servicesIds, detailLavel, settings, callback, asyncState);
        }
        
        private object[] OnEndGetServiceRatingReport(System.IAsyncResult result) {
            byte[] retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetServiceRatingReport(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetServiceRatingReportCompleted(object state) {
            if ((this.GetServiceRatingReportCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetServiceRatingReportCompleted(this, new GetServiceRatingReportCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetServiceRatingReportAsync(System.Collections.Generic.List<System.Guid> servicesIds, Queue.Model.Common.ServiceRatingReportDetailLavel detailLavel, Queue.Model.Common.ServiceRatingReportSettings settings) {
            this.GetServiceRatingReportAsync(servicesIds, detailLavel, settings, null);
        }
        
        public void GetServiceRatingReportAsync(System.Collections.Generic.List<System.Guid> servicesIds, Queue.Model.Common.ServiceRatingReportDetailLavel detailLavel, Queue.Model.Common.ServiceRatingReportSettings settings, object userState) {
            if ((this.onBeginGetServiceRatingReportDelegate == null)) {
                this.onBeginGetServiceRatingReportDelegate = new BeginOperationDelegate(this.OnBeginGetServiceRatingReport);
            }
            if ((this.onEndGetServiceRatingReportDelegate == null)) {
                this.onEndGetServiceRatingReportDelegate = new EndOperationDelegate(this.OnEndGetServiceRatingReport);
            }
            if ((this.onGetServiceRatingReportCompletedDelegate == null)) {
                this.onGetServiceRatingReportCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetServiceRatingReportCompleted);
            }
            base.InvokeAsync(this.onBeginGetServiceRatingReportDelegate, new object[] {
                        servicesIds,
                        detailLavel,
                        settings}, this.onEndGetServiceRatingReportDelegate, this.onGetServiceRatingReportCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetExceptionScheduleReport(System.DateTime fromDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetExceptionScheduleReport(fromDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetExceptionScheduleReport(System.IAsyncResult result) {
            return base.Channel.EndGetExceptionScheduleReport(result);
        }
        
        private System.IAsyncResult OnBeginGetExceptionScheduleReport(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.DateTime fromDate = ((System.DateTime)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetExceptionScheduleReport(fromDate, callback, asyncState);
        }
        
        private object[] OnEndGetExceptionScheduleReport(System.IAsyncResult result) {
            byte[] retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetExceptionScheduleReport(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetExceptionScheduleReportCompleted(object state) {
            if ((this.GetExceptionScheduleReportCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetExceptionScheduleReportCompleted(this, new GetExceptionScheduleReportCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetExceptionScheduleReportAsync(System.DateTime fromDate) {
            this.GetExceptionScheduleReportAsync(fromDate, null);
        }
        
        public void GetExceptionScheduleReportAsync(System.DateTime fromDate, object userState) {
            if ((this.onBeginGetExceptionScheduleReportDelegate == null)) {
                this.onBeginGetExceptionScheduleReportDelegate = new BeginOperationDelegate(this.OnBeginGetExceptionScheduleReport);
            }
            if ((this.onEndGetExceptionScheduleReportDelegate == null)) {
                this.onEndGetExceptionScheduleReportDelegate = new EndOperationDelegate(this.OnEndGetExceptionScheduleReport);
            }
            if ((this.onGetExceptionScheduleReportCompletedDelegate == null)) {
                this.onGetExceptionScheduleReportCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetExceptionScheduleReportCompleted);
            }
            base.InvokeAsync(this.onBeginGetExceptionScheduleReportDelegate, new object[] {
                        fromDate}, this.onEndGetExceptionScheduleReportDelegate, this.onGetExceptionScheduleReportCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetClientRequestReport(System.Guid clientRequestId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetClientRequestReport(clientRequestId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetClientRequestReport(System.IAsyncResult result) {
            return base.Channel.EndGetClientRequestReport(result);
        }
        
        private System.IAsyncResult OnBeginGetClientRequestReport(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid clientRequestId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetClientRequestReport(clientRequestId, callback, asyncState);
        }
        
        private object[] OnEndGetClientRequestReport(System.IAsyncResult result) {
            byte[] retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetClientRequestReport(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetClientRequestReportCompleted(object state) {
            if ((this.GetClientRequestReportCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetClientRequestReportCompleted(this, new GetClientRequestReportCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetClientRequestReportAsync(System.Guid clientRequestId) {
            this.GetClientRequestReportAsync(clientRequestId, null);
        }
        
        public void GetClientRequestReportAsync(System.Guid clientRequestId, object userState) {
            if ((this.onBeginGetClientRequestReportDelegate == null)) {
                this.onBeginGetClientRequestReportDelegate = new BeginOperationDelegate(this.OnBeginGetClientRequestReport);
            }
            if ((this.onEndGetClientRequestReportDelegate == null)) {
                this.onEndGetClientRequestReportDelegate = new EndOperationDelegate(this.OnEndGetClientRequestReport);
            }
            if ((this.onGetClientRequestReportCompletedDelegate == null)) {
                this.onGetClientRequestReportCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetClientRequestReportCompleted);
            }
            base.InvokeAsync(this.onBeginGetClientRequestReportDelegate, new object[] {
                        clientRequestId}, this.onEndGetClientRequestReportDelegate, this.onGetClientRequestReportCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetDefaultConfig(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDefaultConfig(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.DefaultConfig Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetDefaultConfig(System.IAsyncResult result) {
            return base.Channel.EndGetDefaultConfig(result);
        }
        
        private System.IAsyncResult OnBeginGetDefaultConfig(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetDefaultConfig(callback, asyncState);
        }
        
        private object[] OnEndGetDefaultConfig(System.IAsyncResult result) {
            Queue.Services.DTO.DefaultConfig retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetDefaultConfig(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDefaultConfigCompleted(object state) {
            if ((this.GetDefaultConfigCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDefaultConfigCompleted(this, new GetDefaultConfigCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDefaultConfigAsync() {
            this.GetDefaultConfigAsync(null);
        }
        
        public void GetDefaultConfigAsync(object userState) {
            if ((this.onBeginGetDefaultConfigDelegate == null)) {
                this.onBeginGetDefaultConfigDelegate = new BeginOperationDelegate(this.OnBeginGetDefaultConfig);
            }
            if ((this.onEndGetDefaultConfigDelegate == null)) {
                this.onEndGetDefaultConfigDelegate = new EndOperationDelegate(this.OnEndGetDefaultConfig);
            }
            if ((this.onGetDefaultConfigCompletedDelegate == null)) {
                this.onGetDefaultConfigCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDefaultConfigCompleted);
            }
            base.InvokeAsync(this.onBeginGetDefaultConfigDelegate, null, this.onEndGetDefaultConfigDelegate, this.onGetDefaultConfigCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginEditDefaultConfig(string queueName, System.TimeSpan workStartTime, System.TimeSpan workFinishTime, int maxClientRequests, int maxRenderingTime, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditDefaultConfig(queueName, workStartTime, workFinishTime, maxClientRequests, maxRenderingTime, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.DefaultConfig Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndEditDefaultConfig(System.IAsyncResult result) {
            return base.Channel.EndEditDefaultConfig(result);
        }
        
        private System.IAsyncResult OnBeginEditDefaultConfig(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string queueName = ((string)(inValues[0]));
            System.TimeSpan workStartTime = ((System.TimeSpan)(inValues[1]));
            System.TimeSpan workFinishTime = ((System.TimeSpan)(inValues[2]));
            int maxClientRequests = ((int)(inValues[3]));
            int maxRenderingTime = ((int)(inValues[4]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginEditDefaultConfig(queueName, workStartTime, workFinishTime, maxClientRequests, maxRenderingTime, callback, asyncState);
        }
        
        private object[] OnEndEditDefaultConfig(System.IAsyncResult result) {
            Queue.Services.DTO.DefaultConfig retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndEditDefaultConfig(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditDefaultConfigCompleted(object state) {
            if ((this.EditDefaultConfigCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditDefaultConfigCompleted(this, new EditDefaultConfigCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditDefaultConfigAsync(string queueName, System.TimeSpan workStartTime, System.TimeSpan workFinishTime, int maxClientRequests, int maxRenderingTime) {
            this.EditDefaultConfigAsync(queueName, workStartTime, workFinishTime, maxClientRequests, maxRenderingTime, null);
        }
        
        public void EditDefaultConfigAsync(string queueName, System.TimeSpan workStartTime, System.TimeSpan workFinishTime, int maxClientRequests, int maxRenderingTime, object userState) {
            if ((this.onBeginEditDefaultConfigDelegate == null)) {
                this.onBeginEditDefaultConfigDelegate = new BeginOperationDelegate(this.OnBeginEditDefaultConfig);
            }
            if ((this.onEndEditDefaultConfigDelegate == null)) {
                this.onEndEditDefaultConfigDelegate = new EndOperationDelegate(this.OnEndEditDefaultConfig);
            }
            if ((this.onEditDefaultConfigCompletedDelegate == null)) {
                this.onEditDefaultConfigCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditDefaultConfigCompleted);
            }
            base.InvokeAsync(this.onBeginEditDefaultConfigDelegate, new object[] {
                        queueName,
                        workStartTime,
                        workFinishTime,
                        maxClientRequests,
                        maxRenderingTime}, this.onEndEditDefaultConfigDelegate, this.onEditDefaultConfigCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetDesignConfig(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDesignConfig(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.DesignConfig Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetDesignConfig(System.IAsyncResult result) {
            return base.Channel.EndGetDesignConfig(result);
        }
        
        private System.IAsyncResult OnBeginGetDesignConfig(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetDesignConfig(callback, asyncState);
        }
        
        private object[] OnEndGetDesignConfig(System.IAsyncResult result) {
            Queue.Services.DTO.DesignConfig retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetDesignConfig(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDesignConfigCompleted(object state) {
            if ((this.GetDesignConfigCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDesignConfigCompleted(this, new GetDesignConfigCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDesignConfigAsync() {
            this.GetDesignConfigAsync(null);
        }
        
        public void GetDesignConfigAsync(object userState) {
            if ((this.onBeginGetDesignConfigDelegate == null)) {
                this.onBeginGetDesignConfigDelegate = new BeginOperationDelegate(this.OnBeginGetDesignConfig);
            }
            if ((this.onEndGetDesignConfigDelegate == null)) {
                this.onEndGetDesignConfigDelegate = new EndOperationDelegate(this.OnEndGetDesignConfig);
            }
            if ((this.onGetDesignConfigCompletedDelegate == null)) {
                this.onGetDesignConfigCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDesignConfigCompleted);
            }
            base.InvokeAsync(this.onBeginGetDesignConfigDelegate, null, this.onEndGetDesignConfigDelegate, this.onGetDesignConfigCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginEditDesignConfig(byte[] logoSmall, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditDesignConfig(logoSmall, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.DesignConfig Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndEditDesignConfig(System.IAsyncResult result) {
            return base.Channel.EndEditDesignConfig(result);
        }
        
        private System.IAsyncResult OnBeginEditDesignConfig(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            byte[] logoSmall = ((byte[])(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginEditDesignConfig(logoSmall, callback, asyncState);
        }
        
        private object[] OnEndEditDesignConfig(System.IAsyncResult result) {
            Queue.Services.DTO.DesignConfig retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndEditDesignConfig(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditDesignConfigCompleted(object state) {
            if ((this.EditDesignConfigCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditDesignConfigCompleted(this, new EditDesignConfigCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditDesignConfigAsync(byte[] logoSmall) {
            this.EditDesignConfigAsync(logoSmall, null);
        }
        
        public void EditDesignConfigAsync(byte[] logoSmall, object userState) {
            if ((this.onBeginEditDesignConfigDelegate == null)) {
                this.onBeginEditDesignConfigDelegate = new BeginOperationDelegate(this.OnBeginEditDesignConfig);
            }
            if ((this.onEndEditDesignConfigDelegate == null)) {
                this.onEndEditDesignConfigDelegate = new EndOperationDelegate(this.OnEndEditDesignConfig);
            }
            if ((this.onEditDesignConfigCompletedDelegate == null)) {
                this.onEditDesignConfigCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditDesignConfigCompleted);
            }
            base.InvokeAsync(this.onBeginEditDesignConfigDelegate, new object[] {
                        logoSmall}, this.onEndEditDesignConfigDelegate, this.onEditDesignConfigCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetCouponConfig(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCouponConfig(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.CouponConfig Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetCouponConfig(System.IAsyncResult result) {
            return base.Channel.EndGetCouponConfig(result);
        }
        
        private System.IAsyncResult OnBeginGetCouponConfig(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetCouponConfig(callback, asyncState);
        }
        
        private object[] OnEndGetCouponConfig(System.IAsyncResult result) {
            Queue.Services.DTO.CouponConfig retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetCouponConfig(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCouponConfigCompleted(object state) {
            if ((this.GetCouponConfigCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCouponConfigCompleted(this, new GetCouponConfigCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCouponConfigAsync() {
            this.GetCouponConfigAsync(null);
        }
        
        public void GetCouponConfigAsync(object userState) {
            if ((this.onBeginGetCouponConfigDelegate == null)) {
                this.onBeginGetCouponConfigDelegate = new BeginOperationDelegate(this.OnBeginGetCouponConfig);
            }
            if ((this.onEndGetCouponConfigDelegate == null)) {
                this.onEndGetCouponConfigDelegate = new EndOperationDelegate(this.OnEndGetCouponConfig);
            }
            if ((this.onGetCouponConfigCompletedDelegate == null)) {
                this.onGetCouponConfigCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCouponConfigCompleted);
            }
            base.InvokeAsync(this.onBeginGetCouponConfigDelegate, null, this.onEndGetCouponConfigDelegate, this.onGetCouponConfigCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetCouponTemplate(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCouponTemplate(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetCouponTemplate(System.IAsyncResult result) {
            return base.Channel.EndGetCouponTemplate(result);
        }
        
        private System.IAsyncResult OnBeginGetCouponTemplate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetCouponTemplate(callback, asyncState);
        }
        
        private object[] OnEndGetCouponTemplate(System.IAsyncResult result) {
            string retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetCouponTemplate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCouponTemplateCompleted(object state) {
            if ((this.GetCouponTemplateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCouponTemplateCompleted(this, new GetCouponTemplateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCouponTemplateAsync() {
            this.GetCouponTemplateAsync(null);
        }
        
        public void GetCouponTemplateAsync(object userState) {
            if ((this.onBeginGetCouponTemplateDelegate == null)) {
                this.onBeginGetCouponTemplateDelegate = new BeginOperationDelegate(this.OnBeginGetCouponTemplate);
            }
            if ((this.onEndGetCouponTemplateDelegate == null)) {
                this.onEndGetCouponTemplateDelegate = new EndOperationDelegate(this.OnEndGetCouponTemplate);
            }
            if ((this.onGetCouponTemplateCompletedDelegate == null)) {
                this.onGetCouponTemplateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCouponTemplateCompleted);
            }
            base.InvokeAsync(this.onBeginGetCouponTemplateDelegate, null, this.onEndGetCouponTemplateDelegate, this.onGetCouponTemplateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginEditCouponConfig(string template, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditCouponConfig(template, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.CouponConfig Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndEditCouponConfig(System.IAsyncResult result) {
            return base.Channel.EndEditCouponConfig(result);
        }
        
        private System.IAsyncResult OnBeginEditCouponConfig(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string template = ((string)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginEditCouponConfig(template, callback, asyncState);
        }
        
        private object[] OnEndEditCouponConfig(System.IAsyncResult result) {
            Queue.Services.DTO.CouponConfig retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndEditCouponConfig(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditCouponConfigCompleted(object state) {
            if ((this.EditCouponConfigCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditCouponConfigCompleted(this, new EditCouponConfigCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditCouponConfigAsync(string template) {
            this.EditCouponConfigAsync(template, null);
        }
        
        public void EditCouponConfigAsync(string template, object userState) {
            if ((this.onBeginEditCouponConfigDelegate == null)) {
                this.onBeginEditCouponConfigDelegate = new BeginOperationDelegate(this.OnBeginEditCouponConfig);
            }
            if ((this.onEndEditCouponConfigDelegate == null)) {
                this.onEndEditCouponConfigDelegate = new EndOperationDelegate(this.OnEndEditCouponConfig);
            }
            if ((this.onEditCouponConfigCompletedDelegate == null)) {
                this.onEditCouponConfigCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditCouponConfigCompleted);
            }
            base.InvokeAsync(this.onBeginEditCouponConfigDelegate, new object[] {
                        template}, this.onEndEditCouponConfigDelegate, this.onEditCouponConfigCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetSMTPConfig(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSMTPConfig(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.SMTPConfig Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetSMTPConfig(System.IAsyncResult result) {
            return base.Channel.EndGetSMTPConfig(result);
        }
        
        private System.IAsyncResult OnBeginGetSMTPConfig(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetSMTPConfig(callback, asyncState);
        }
        
        private object[] OnEndGetSMTPConfig(System.IAsyncResult result) {
            Queue.Services.DTO.SMTPConfig retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetSMTPConfig(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSMTPConfigCompleted(object state) {
            if ((this.GetSMTPConfigCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSMTPConfigCompleted(this, new GetSMTPConfigCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSMTPConfigAsync() {
            this.GetSMTPConfigAsync(null);
        }
        
        public void GetSMTPConfigAsync(object userState) {
            if ((this.onBeginGetSMTPConfigDelegate == null)) {
                this.onBeginGetSMTPConfigDelegate = new BeginOperationDelegate(this.OnBeginGetSMTPConfig);
            }
            if ((this.onEndGetSMTPConfigDelegate == null)) {
                this.onEndGetSMTPConfigDelegate = new EndOperationDelegate(this.OnEndGetSMTPConfig);
            }
            if ((this.onGetSMTPConfigCompletedDelegate == null)) {
                this.onGetSMTPConfigCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSMTPConfigCompleted);
            }
            base.InvokeAsync(this.onBeginGetSMTPConfigDelegate, null, this.onEndGetSMTPConfigDelegate, this.onGetSMTPConfigCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginEditSMTPConfig(string server, string user, string password, string from, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditSMTPConfig(server, user, password, from, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.SMTPConfig Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndEditSMTPConfig(System.IAsyncResult result) {
            return base.Channel.EndEditSMTPConfig(result);
        }
        
        private System.IAsyncResult OnBeginEditSMTPConfig(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string server = ((string)(inValues[0]));
            string user = ((string)(inValues[1]));
            string password = ((string)(inValues[2]));
            string from = ((string)(inValues[3]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginEditSMTPConfig(server, user, password, from, callback, asyncState);
        }
        
        private object[] OnEndEditSMTPConfig(System.IAsyncResult result) {
            Queue.Services.DTO.SMTPConfig retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndEditSMTPConfig(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditSMTPConfigCompleted(object state) {
            if ((this.EditSMTPConfigCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditSMTPConfigCompleted(this, new EditSMTPConfigCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditSMTPConfigAsync(string server, string user, string password, string from) {
            this.EditSMTPConfigAsync(server, user, password, from, null);
        }
        
        public void EditSMTPConfigAsync(string server, string user, string password, string from, object userState) {
            if ((this.onBeginEditSMTPConfigDelegate == null)) {
                this.onBeginEditSMTPConfigDelegate = new BeginOperationDelegate(this.OnBeginEditSMTPConfig);
            }
            if ((this.onEndEditSMTPConfigDelegate == null)) {
                this.onEndEditSMTPConfigDelegate = new EndOperationDelegate(this.OnEndEditSMTPConfig);
            }
            if ((this.onEditSMTPConfigCompletedDelegate == null)) {
                this.onEditSMTPConfigCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditSMTPConfigCompleted);
            }
            base.InvokeAsync(this.onBeginEditSMTPConfigDelegate, new object[] {
                        server,
                        user,
                        password,
                        from}, this.onEndEditSMTPConfigDelegate, this.onEditSMTPConfigCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetPortalConfig(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPortalConfig(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.PortalConfig Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetPortalConfig(System.IAsyncResult result) {
            return base.Channel.EndGetPortalConfig(result);
        }
        
        private System.IAsyncResult OnBeginGetPortalConfig(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetPortalConfig(callback, asyncState);
        }
        
        private object[] OnEndGetPortalConfig(System.IAsyncResult result) {
            Queue.Services.DTO.PortalConfig retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetPortalConfig(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPortalConfigCompleted(object state) {
            if ((this.GetPortalConfigCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPortalConfigCompleted(this, new GetPortalConfigCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPortalConfigAsync() {
            this.GetPortalConfigAsync(null);
        }
        
        public void GetPortalConfigAsync(object userState) {
            if ((this.onBeginGetPortalConfigDelegate == null)) {
                this.onBeginGetPortalConfigDelegate = new BeginOperationDelegate(this.OnBeginGetPortalConfig);
            }
            if ((this.onEndGetPortalConfigDelegate == null)) {
                this.onEndGetPortalConfigDelegate = new EndOperationDelegate(this.OnEndGetPortalConfig);
            }
            if ((this.onGetPortalConfigCompletedDelegate == null)) {
                this.onGetPortalConfigCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPortalConfigCompleted);
            }
            base.InvokeAsync(this.onBeginGetPortalConfigDelegate, null, this.onEndGetPortalConfigDelegate, this.onGetPortalConfigCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginEditPortalConfig(string header, string footer, bool currentDayRecording, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditPortalConfig(header, footer, currentDayRecording, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.PortalConfig Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndEditPortalConfig(System.IAsyncResult result) {
            return base.Channel.EndEditPortalConfig(result);
        }
        
        private System.IAsyncResult OnBeginEditPortalConfig(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string header = ((string)(inValues[0]));
            string footer = ((string)(inValues[1]));
            bool currentDayRecording = ((bool)(inValues[2]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginEditPortalConfig(header, footer, currentDayRecording, callback, asyncState);
        }
        
        private object[] OnEndEditPortalConfig(System.IAsyncResult result) {
            Queue.Services.DTO.PortalConfig retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndEditPortalConfig(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditPortalConfigCompleted(object state) {
            if ((this.EditPortalConfigCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditPortalConfigCompleted(this, new EditPortalConfigCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditPortalConfigAsync(string header, string footer, bool currentDayRecording) {
            this.EditPortalConfigAsync(header, footer, currentDayRecording, null);
        }
        
        public void EditPortalConfigAsync(string header, string footer, bool currentDayRecording, object userState) {
            if ((this.onBeginEditPortalConfigDelegate == null)) {
                this.onBeginEditPortalConfigDelegate = new BeginOperationDelegate(this.OnBeginEditPortalConfig);
            }
            if ((this.onEndEditPortalConfigDelegate == null)) {
                this.onEndEditPortalConfigDelegate = new EndOperationDelegate(this.OnEndEditPortalConfig);
            }
            if ((this.onEditPortalConfigCompletedDelegate == null)) {
                this.onEditPortalConfigCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditPortalConfigCompleted);
            }
            base.InvokeAsync(this.onBeginEditPortalConfigDelegate, new object[] {
                        header,
                        footer,
                        currentDayRecording}, this.onEndEditPortalConfigDelegate, this.onEditPortalConfigCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetMediaConfig(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMediaConfig(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.MediaConfig Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetMediaConfig(System.IAsyncResult result) {
            return base.Channel.EndGetMediaConfig(result);
        }
        
        private System.IAsyncResult OnBeginGetMediaConfig(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetMediaConfig(callback, asyncState);
        }
        
        private object[] OnEndGetMediaConfig(System.IAsyncResult result) {
            Queue.Services.DTO.MediaConfig retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetMediaConfig(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMediaConfigCompleted(object state) {
            if ((this.GetMediaConfigCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMediaConfigCompleted(this, new GetMediaConfigCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMediaConfigAsync() {
            this.GetMediaConfigAsync(null);
        }
        
        public void GetMediaConfigAsync(object userState) {
            if ((this.onBeginGetMediaConfigDelegate == null)) {
                this.onBeginGetMediaConfigDelegate = new BeginOperationDelegate(this.OnBeginGetMediaConfig);
            }
            if ((this.onEndGetMediaConfigDelegate == null)) {
                this.onEndGetMediaConfigDelegate = new EndOperationDelegate(this.OnEndGetMediaConfig);
            }
            if ((this.onGetMediaConfigCompletedDelegate == null)) {
                this.onGetMediaConfigCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMediaConfigCompleted);
            }
            base.InvokeAsync(this.onBeginGetMediaConfigDelegate, null, this.onEndGetMediaConfigDelegate, this.onGetMediaConfigCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginEditMediaConfig(string serviceUrl, string ticker, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditMediaConfig(serviceUrl, ticker, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.MediaConfig Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndEditMediaConfig(System.IAsyncResult result) {
            return base.Channel.EndEditMediaConfig(result);
        }
        
        private System.IAsyncResult OnBeginEditMediaConfig(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string serviceUrl = ((string)(inValues[0]));
            string ticker = ((string)(inValues[1]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginEditMediaConfig(serviceUrl, ticker, callback, asyncState);
        }
        
        private object[] OnEndEditMediaConfig(System.IAsyncResult result) {
            Queue.Services.DTO.MediaConfig retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndEditMediaConfig(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditMediaConfigCompleted(object state) {
            if ((this.EditMediaConfigCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditMediaConfigCompleted(this, new EditMediaConfigCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditMediaConfigAsync(string serviceUrl, string ticker) {
            this.EditMediaConfigAsync(serviceUrl, ticker, null);
        }
        
        public void EditMediaConfigAsync(string serviceUrl, string ticker, object userState) {
            if ((this.onBeginEditMediaConfigDelegate == null)) {
                this.onBeginEditMediaConfigDelegate = new BeginOperationDelegate(this.OnBeginEditMediaConfig);
            }
            if ((this.onEndEditMediaConfigDelegate == null)) {
                this.onEndEditMediaConfigDelegate = new EndOperationDelegate(this.OnEndEditMediaConfig);
            }
            if ((this.onEditMediaConfigCompletedDelegate == null)) {
                this.onEditMediaConfigCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditMediaConfigCompleted);
            }
            base.InvokeAsync(this.onBeginEditMediaConfigDelegate, new object[] {
                        serviceUrl,
                        ticker}, this.onEndEditMediaConfigDelegate, this.onEditMediaConfigCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginAddMediaConfigFile(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddMediaConfigFile(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.MediaConfigFile Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndAddMediaConfigFile(System.IAsyncResult result) {
            return base.Channel.EndAddMediaConfigFile(result);
        }
        
        private System.IAsyncResult OnBeginAddMediaConfigFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginAddMediaConfigFile(callback, asyncState);
        }
        
        private object[] OnEndAddMediaConfigFile(System.IAsyncResult result) {
            Queue.Services.DTO.MediaConfigFile retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndAddMediaConfigFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddMediaConfigFileCompleted(object state) {
            if ((this.AddMediaConfigFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddMediaConfigFileCompleted(this, new AddMediaConfigFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddMediaConfigFileAsync() {
            this.AddMediaConfigFileAsync(null);
        }
        
        public void AddMediaConfigFileAsync(object userState) {
            if ((this.onBeginAddMediaConfigFileDelegate == null)) {
                this.onBeginAddMediaConfigFileDelegate = new BeginOperationDelegate(this.OnBeginAddMediaConfigFile);
            }
            if ((this.onEndAddMediaConfigFileDelegate == null)) {
                this.onEndAddMediaConfigFileDelegate = new EndOperationDelegate(this.OnEndAddMediaConfigFile);
            }
            if ((this.onAddMediaConfigFileCompletedDelegate == null)) {
                this.onAddMediaConfigFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddMediaConfigFileCompleted);
            }
            base.InvokeAsync(this.onBeginAddMediaConfigFileDelegate, null, this.onEndAddMediaConfigFileDelegate, this.onAddMediaConfigFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginEditMediaConfigFile(System.Guid mediaConfigFileId, string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditMediaConfigFile(mediaConfigFileId, name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.MediaConfigFile Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndEditMediaConfigFile(System.IAsyncResult result) {
            return base.Channel.EndEditMediaConfigFile(result);
        }
        
        private System.IAsyncResult OnBeginEditMediaConfigFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid mediaConfigFileId = ((System.Guid)(inValues[0]));
            string name = ((string)(inValues[1]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginEditMediaConfigFile(mediaConfigFileId, name, callback, asyncState);
        }
        
        private object[] OnEndEditMediaConfigFile(System.IAsyncResult result) {
            Queue.Services.DTO.MediaConfigFile retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndEditMediaConfigFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditMediaConfigFileCompleted(object state) {
            if ((this.EditMediaConfigFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditMediaConfigFileCompleted(this, new EditMediaConfigFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditMediaConfigFileAsync(System.Guid mediaConfigFileId, string name) {
            this.EditMediaConfigFileAsync(mediaConfigFileId, name, null);
        }
        
        public void EditMediaConfigFileAsync(System.Guid mediaConfigFileId, string name, object userState) {
            if ((this.onBeginEditMediaConfigFileDelegate == null)) {
                this.onBeginEditMediaConfigFileDelegate = new BeginOperationDelegate(this.OnBeginEditMediaConfigFile);
            }
            if ((this.onEndEditMediaConfigFileDelegate == null)) {
                this.onEndEditMediaConfigFileDelegate = new EndOperationDelegate(this.OnEndEditMediaConfigFile);
            }
            if ((this.onEditMediaConfigFileCompletedDelegate == null)) {
                this.onEditMediaConfigFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditMediaConfigFileCompleted);
            }
            base.InvokeAsync(this.onBeginEditMediaConfigFileDelegate, new object[] {
                        mediaConfigFileId,
                        name}, this.onEndEditMediaConfigFileDelegate, this.onEditMediaConfigFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginDeleteMediaConfigFile(System.Guid mediaConfigFileId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteMediaConfigFile(mediaConfigFileId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndDeleteMediaConfigFile(System.IAsyncResult result) {
            base.Channel.EndDeleteMediaConfigFile(result);
        }
        
        private System.IAsyncResult OnBeginDeleteMediaConfigFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Guid mediaConfigFileId = ((System.Guid)(inValues[0]));
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginDeleteMediaConfigFile(mediaConfigFileId, callback, asyncState);
        }
        
        private object[] OnEndDeleteMediaConfigFile(System.IAsyncResult result) {
            ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndDeleteMediaConfigFile(result);
            return null;
        }
        
        private void OnDeleteMediaConfigFileCompleted(object state) {
            if ((this.DeleteMediaConfigFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteMediaConfigFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteMediaConfigFileAsync(System.Guid mediaConfigFileId) {
            this.DeleteMediaConfigFileAsync(mediaConfigFileId, null);
        }
        
        public void DeleteMediaConfigFileAsync(System.Guid mediaConfigFileId, object userState) {
            if ((this.onBeginDeleteMediaConfigFileDelegate == null)) {
                this.onBeginDeleteMediaConfigFileDelegate = new BeginOperationDelegate(this.OnBeginDeleteMediaConfigFile);
            }
            if ((this.onEndDeleteMediaConfigFileDelegate == null)) {
                this.onEndDeleteMediaConfigFileDelegate = new EndOperationDelegate(this.OnEndDeleteMediaConfigFile);
            }
            if ((this.onDeleteMediaConfigFileCompletedDelegate == null)) {
                this.onDeleteMediaConfigFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteMediaConfigFileCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteMediaConfigFileDelegate, new object[] {
                        mediaConfigFileId}, this.onEndDeleteMediaConfigFileDelegate, this.onDeleteMediaConfigFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Queue.Operator.Silverlight.QueueRemoteService.IServerService.BeginGetTerminalConfig(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTerminalConfig(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.DTO.TerminalConfig Queue.Operator.Silverlight.QueueRemoteService.IServerService.EndGetTerminalConfig(System.IAsyncResult result) {
            return base.Channel.EndGetTerminalConfig(result);
        }
        
        private System.IAsyncResult OnBeginGetTerminalConfig(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).BeginGetTerminalConfig(callback, asyncState);
        }
        
        private object[] OnEndGetTerminalConfig(System.IAsyncResult result) {
            Queue.Services.DTO.TerminalConfig retVal = ((Queue.Operator.Silverlight.QueueRemoteService.IServerService)(this)).EndGetTerminalConfig(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTerminalConfigCompleted(object state) {
            if ((this.GetTerminalConfigCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTerminalConfigCompleted(this, new GetTerminalConfigCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTerminalConfigAsync() {
            this.GetTerminalConfigAsync(null);
        }
        
        public void GetTerminalConfigAsync(object userState) {
            if ((this.onBeginGetTerminalConfigDelegate == null)) {
                this.onBeginGetTerminalConfigDelegate = new BeginOperationDelegate(this.OnBeginGetTerminalConfig);
            }
            if ((this.onEndGetTerminalConfigDelegate == null)) {
                this.onEndGetTerminalConfigDelegate = new EndOperationDelegate(this.OnEndGetTerminalConfig);
            }
            if ((this.onGetTerminalConfigCompletedDelegate == null)) {
                this.onGetTerminalConfigCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTerminalConfigCompleted);
            }
            base.InvokeAsync(this.onBeginGetTerminalConfigDelegate, null, this.onEndGetTerminalConfigDelegate, this.onGetTerminalConfigCompletedDelegate, userState);
        }
        
        private void OnCallClientReceived(object state) {
            if ((this.CallClientReceived != null)) {
                object[] results = ((object[])(state));
                this.CallClientReceived(this, new CallClientReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnClientRequestUpdatedReceived(object state) {
            if ((this.ClientRequestUpdatedReceived != null)) {
                object[] results = ((object[])(state));
                this.ClientRequestUpdatedReceived(this, new ClientRequestUpdatedReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnCurrentClientRequestUpdatedReceived(object state) {
            if ((this.CurrentClientRequestUpdatedReceived != null)) {
                object[] results = ((object[])(state));
                this.CurrentClientRequestUpdatedReceived(this, new CurrentClientRequestUpdatedReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnOperatorPlanMetricsUpdatedReceived(object state) {
            if ((this.OperatorPlanMetricsUpdatedReceived != null)) {
                object[] results = ((object[])(state));
                this.OperatorPlanMetricsUpdatedReceived(this, new OperatorPlanMetricsUpdatedReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnConfigUpdatedReceived(object state) {
            if ((this.ConfigUpdatedReceived != null)) {
                object[] results = ((object[])(state));
                this.ConfigUpdatedReceived(this, new ConfigUpdatedReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnEventReceived(object state) {
            if ((this.EventReceived != null)) {
                object[] results = ((object[])(state));
                this.EventReceived(this, new EventReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void VerifyCallbackEvents() {
            if (((this.useGeneratedCallback != true) 
                        && ((((((this.CallClientReceived != null) 
                        || (this.ClientRequestUpdatedReceived != null)) 
                        || (this.CurrentClientRequestUpdatedReceived != null)) 
                        || (this.OperatorPlanMetricsUpdatedReceived != null)) 
                        || (this.ConfigUpdatedReceived != null)) 
                        || (this.EventReceived != null)))) {
                throw new System.InvalidOperationException("События обратного вызова нельзя использовать, если указан InstanceContext обратно" +
                        "го вызова. Выберите или указание InstanceContext обратного вызова, или подписку " +
                        "на события обратного вызова.");
            }
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Queue.Operator.Silverlight.QueueRemoteService.IServerService CreateChannel() {
            return new ServerServiceClientChannel(this);
        }
        
        private class ServerServiceClientCallback : object, IServerServiceCallback {
            
            private ServerServiceClient proxy;
            
            public void Initialize(ServerServiceClient proxy) {
                this.proxy = proxy;
            }
            
            public void CallClient(Queue.Services.DTO.ClientRequest clientRequest) {
                this.proxy.OnCallClientReceived(new object[] {
                            clientRequest});
            }
            
            public void ClientRequestUpdated(Queue.Services.DTO.ClientRequest clientRequest) {
                this.proxy.OnClientRequestUpdatedReceived(new object[] {
                            clientRequest});
            }
            
            public void CurrentClientRequestUpdated(Queue.Services.DTO.ClientRequest clientRequest, Queue.Services.DTO.Operator queueOperator) {
                this.proxy.OnCurrentClientRequestUpdatedReceived(new object[] {
                            clientRequest,
                            queueOperator});
            }
            
            public void OperatorPlanMetricsUpdated(Queue.Services.DTO.OperatorPlanMetrics operatorPlanMetrics) {
                this.proxy.OnOperatorPlanMetricsUpdatedReceived(new object[] {
                            operatorPlanMetrics});
            }
            
            public void ConfigUpdated(Queue.Services.DTO.Config config) {
                this.proxy.OnConfigUpdatedReceived(new object[] {
                            config});
            }
            
            public void Event(Queue.Services.DTO.Event queueEvent) {
                this.proxy.OnEventReceived(new object[] {
                            queueEvent});
            }
        }
        
        private class ServerServiceClientChannel : ChannelBase<Queue.Operator.Silverlight.QueueRemoteService.IServerService>, Queue.Operator.Silverlight.QueueRemoteService.IServerService {
            
            public ServerServiceClientChannel(System.ServiceModel.DuplexClientBase<Queue.Operator.Silverlight.QueueRemoteService.IServerService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginEditTerminalConfig(int PIN, bool currentDayRecording, int columns, int rows, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = PIN;
                _args[1] = currentDayRecording;
                _args[2] = columns;
                _args[3] = rows;
                System.IAsyncResult _result = base.BeginInvoke("EditTerminalConfig", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.TerminalConfig EndEditTerminalConfig(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.TerminalConfig _result = ((Queue.Services.DTO.TerminalConfig)(base.EndInvoke("EditTerminalConfig", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetNotificationConfig(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetNotificationConfig", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.NotificationConfig EndGetNotificationConfig(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.NotificationConfig _result = ((Queue.Services.DTO.NotificationConfig)(base.EndInvoke("GetNotificationConfig", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditNotificationConfig(int clientRequestsLength, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = clientRequestsLength;
                System.IAsyncResult _result = base.BeginInvoke("EditNotificationConfig", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.NotificationConfig EndEditNotificationConfig(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.NotificationConfig _result = ((Queue.Services.DTO.NotificationConfig)(base.EndInvoke("EditNotificationConfig", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetQueuePlanMetric(int year, int month, int day, int hours, int minutes, int seconds, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = year;
                _args[1] = month;
                _args[2] = day;
                _args[3] = hours;
                _args[4] = minutes;
                _args[5] = seconds;
                System.IAsyncResult _result = base.BeginInvoke("GetQueuePlanMetric", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.QueuePlanMetric EndGetQueuePlanMetric(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.QueuePlanMetric _result = ((Queue.Services.DTO.QueuePlanMetric)(base.EndInvoke("GetQueuePlanMetric", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetQueuePlanServiceMetric(int year, int month, int day, int hours, int minutes, int seconds, System.Guid serviceId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = year;
                _args[1] = month;
                _args[2] = day;
                _args[3] = hours;
                _args[4] = minutes;
                _args[5] = seconds;
                _args[6] = serviceId;
                System.IAsyncResult _result = base.BeginInvoke("GetQueuePlanServiceMetric", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.QueuePlanServiceMetric EndGetQueuePlanServiceMetric(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.QueuePlanServiceMetric _result = ((Queue.Services.DTO.QueuePlanServiceMetric)(base.EndInvoke("GetQueuePlanServiceMetric", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDateTime(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetDateTime", _args, callback, asyncState);
                return _result;
            }
            
            public System.DateTime EndGetDateTime(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.DateTime _result = ((System.DateTime)(base.EndInvoke("GetDateTime", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginIsSubscribed(Queue.Operator.Silverlight.QueueRemoteService.ServerServiceEventType eventType, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = eventType;
                System.IAsyncResult _result = base.BeginInvoke("IsSubscribed", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndIsSubscribed(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("IsSubscribed", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSubscribe(Queue.Operator.Silverlight.QueueRemoteService.ServerServiceEventType eventType, Queue.Operator.Silverlight.QueueRemoteService.ServerSubscribtionArgs args, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = eventType;
                _args[1] = args;
                System.IAsyncResult _result = base.BeginInvoke("Subscribe", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSubscribe(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Subscribe", _args, result);
            }
            
            public System.IAsyncResult BeginUnSubscribe(Queue.Operator.Silverlight.QueueRemoteService.ServerServiceEventType eventType, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = eventType;
                System.IAsyncResult _result = base.BeginInvoke("UnSubscribe", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUnSubscribe(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UnSubscribe", _args, result);
            }
            
            public System.IAsyncResult BeginGetClient(System.Guid clientId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = clientId;
                System.IAsyncResult _result = base.BeginInvoke("GetClient", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.Client EndGetClient(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.Client _result = ((Queue.Services.DTO.Client)(base.EndInvoke("GetClient", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginOpenClientSession(System.Guid sessionId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sessionId;
                System.IAsyncResult _result = base.BeginInvoke("OpenClientSession", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.Client EndOpenClientSession(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.Client _result = ((Queue.Services.DTO.Client)(base.EndInvoke("OpenClientSession", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetClientByIdentity(string identity, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = identity;
                System.IAsyncResult _result = base.BeginInvoke("GetClientByIdentity", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.Client EndGetClientByIdentity(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.Client _result = ((Queue.Services.DTO.Client)(base.EndInvoke("GetClientByIdentity", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFindClients(int startIndex, int maxResults, string filter, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = startIndex;
                _args[1] = maxResults;
                _args[2] = filter;
                System.IAsyncResult _result = base.BeginInvoke("FindClients", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<Queue.Services.DTO.Client> EndFindClients(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<Queue.Services.DTO.Client> _result = ((System.Collections.Generic.List<Queue.Services.DTO.Client>)(base.EndInvoke("FindClients", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddClient(string surname, string name, string patronymic, string email, string mobile, string identity, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = surname;
                _args[1] = name;
                _args[2] = patronymic;
                _args[3] = email;
                _args[4] = mobile;
                _args[5] = identity;
                _args[6] = password;
                System.IAsyncResult _result = base.BeginInvoke("AddClient", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.Client EndAddClient(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.Client _result = ((Queue.Services.DTO.Client)(base.EndInvoke("AddClient", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginClientLogin(string email, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = email;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("ClientLogin", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.Client EndClientLogin(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.Client _result = ((Queue.Services.DTO.Client)(base.EndInvoke("ClientLogin", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginClientRestorePassword(string email, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = email;
                System.IAsyncResult _result = base.BeginInvoke("ClientRestorePassword", _args, callback, asyncState);
                return _result;
            }
            
            public void EndClientRestorePassword(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ClientRestorePassword", _args, result);
            }
            
            public System.IAsyncResult BeginEditClient(System.Guid clientId, string surname, string name, string patronymic, string email, string mobile, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = clientId;
                _args[1] = surname;
                _args[2] = name;
                _args[3] = patronymic;
                _args[4] = email;
                _args[5] = mobile;
                System.IAsyncResult _result = base.BeginInvoke("EditClient", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.Client EndEditClient(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.Client _result = ((Queue.Services.DTO.Client)(base.EndInvoke("EditClient", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginChangeClientPassword(System.Guid clientId, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = clientId;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("ChangeClientPassword", _args, callback, asyncState);
                return _result;
            }
            
            public void EndChangeClientPassword(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ChangeClientPassword", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteClient(System.Guid clientId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = clientId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteClient", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteClient(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteClient", _args, result);
            }
            
            public System.IAsyncResult BeginSendPINToEmail(string email, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = email;
                System.IAsyncResult _result = base.BeginInvoke("SendPINToEmail", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSendPINToEmail(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SendPINToEmail", _args, result);
            }
            
            public System.IAsyncResult BeginCheckPIN(string email, int source, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = email;
                _args[1] = source;
                System.IAsyncResult _result = base.BeginInvoke("CheckPIN", _args, callback, asyncState);
                return _result;
            }
            
            public void EndCheckPIN(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("CheckPIN", _args, result);
            }
            
            public System.IAsyncResult BeginFindClientRequests(int startIndex, int maxResults, Queue.Services.DTO.ClientRequestFilter filter, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = startIndex;
                _args[1] = maxResults;
                _args[2] = filter;
                System.IAsyncResult _result = base.BeginInvoke("FindClientRequests", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<Queue.Services.DTO.ClientRequest> EndFindClientRequests(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<Queue.Services.DTO.ClientRequest> _result = ((System.Collections.Generic.List<Queue.Services.DTO.ClientRequest>)(base.EndInvoke("FindClientRequests", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetClientRequest(System.Guid clientRequestId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = clientRequestId;
                System.IAsyncResult _result = base.BeginInvoke("GetClientRequest", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.ClientRequest EndGetClientRequest(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.ClientRequest _result = ((Queue.Services.DTO.ClientRequest)(base.EndInvoke("GetClientRequest", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetClientRequestEvents(System.Guid clientRequestId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = clientRequestId;
                System.IAsyncResult _result = base.BeginInvoke("GetClientRequestEvents", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<Queue.Services.DTO.ClientRequestEvent> EndGetClientRequestEvents(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<Queue.Services.DTO.ClientRequestEvent> _result = ((System.Collections.Generic.List<Queue.Services.DTO.ClientRequestEvent>)(base.EndInvoke("GetClientRequestEvents", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddEarlyClientRequest(System.Guid clientId, System.Guid serviceId, System.DateTime requestDate, System.TimeSpan requestTime, System.Collections.Generic.Dictionary<System.Guid, object> parameters, int subjects, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = clientId;
                _args[1] = serviceId;
                _args[2] = requestDate;
                _args[3] = requestTime;
                _args[4] = parameters;
                _args[5] = subjects;
                System.IAsyncResult _result = base.BeginInvoke("AddEarlyClientRequest", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.ClientRequest EndAddEarlyClientRequest(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.ClientRequest _result = ((Queue.Services.DTO.ClientRequest)(base.EndInvoke("AddEarlyClientRequest", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddLiveClientRequest(System.Guid clientId, System.Guid serviceId, bool isPriority, System.Collections.Generic.Dictionary<System.Guid, object> parameters, int subjects, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = clientId;
                _args[1] = serviceId;
                _args[2] = isPriority;
                _args[3] = parameters;
                _args[4] = subjects;
                System.IAsyncResult _result = base.BeginInvoke("AddLiveClientRequest", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.ClientRequest EndAddLiveClientRequest(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.ClientRequest _result = ((Queue.Services.DTO.ClientRequest)(base.EndInvoke("AddLiveClientRequest", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetClientRequestCoupon(System.Guid clientRequestId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = clientRequestId;
                System.IAsyncResult _result = base.BeginInvoke("GetClientRequestCoupon", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetClientRequestCoupon(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetClientRequestCoupon", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginChangeClientRequestPriority(System.Guid clientRequestId, bool isPriority, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = clientRequestId;
                _args[1] = isPriority;
                System.IAsyncResult _result = base.BeginInvoke("ChangeClientRequestPriority", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.ClientRequest EndChangeClientRequestPriority(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.ClientRequest _result = ((Queue.Services.DTO.ClientRequest)(base.EndInvoke("ChangeClientRequestPriority", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginChangeClientRequestSubjects(System.Guid clientRequestId, int subjects, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = clientRequestId;
                _args[1] = subjects;
                System.IAsyncResult _result = base.BeginInvoke("ChangeClientRequestSubjects", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.ClientRequest EndChangeClientRequestSubjects(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.ClientRequest _result = ((Queue.Services.DTO.ClientRequest)(base.EndInvoke("ChangeClientRequestSubjects", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginChangeClientRequestService(System.Guid clientRequestId, System.Guid serviceId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = clientRequestId;
                _args[1] = serviceId;
                System.IAsyncResult _result = base.BeginInvoke("ChangeClientRequestService", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.ClientRequest EndChangeClientRequestService(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.ClientRequest _result = ((Queue.Services.DTO.ClientRequest)(base.EndInvoke("ChangeClientRequestService", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginChangeClientRequestOperator(System.Guid clientRequestId, System.Guid operatorId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = clientRequestId;
                _args[1] = operatorId;
                System.IAsyncResult _result = base.BeginInvoke("ChangeClientRequestOperator", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.ClientRequest EndChangeClientRequestOperator(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.ClientRequest _result = ((Queue.Services.DTO.ClientRequest)(base.EndInvoke("ChangeClientRequestOperator", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCancelClientRequest(System.Guid clientRequestId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = clientRequestId;
                System.IAsyncResult _result = base.BeginInvoke("CancelClientRequest", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.ClientRequest EndCancelClientRequest(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.ClientRequest _result = ((Queue.Services.DTO.ClientRequest)(base.EndInvoke("CancelClientRequest", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRestoreClientRequest(System.Guid clientRequestId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = clientRequestId;
                System.IAsyncResult _result = base.BeginInvoke("RestoreClientRequest", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.ClientRequest EndRestoreClientRequest(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.ClientRequest _result = ((Queue.Services.DTO.ClientRequest)(base.EndInvoke("RestoreClientRequest", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPostponeClientRequest(System.Guid clientRequestId, System.TimeSpan postponeTime, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = clientRequestId;
                _args[1] = postponeTime;
                System.IAsyncResult _result = base.BeginInvoke("PostponeClientRequest", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.ClientRequest EndPostponeClientRequest(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.ClientRequest _result = ((Queue.Services.DTO.ClientRequest)(base.EndInvoke("PostponeClientRequest", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetOperatorClientRequestPlans(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetOperatorClientRequestPlans", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<Queue.Services.DTO.ClientRequestPlan> EndGetOperatorClientRequestPlans(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<Queue.Services.DTO.ClientRequestPlan> _result = ((System.Collections.Generic.List<Queue.Services.DTO.ClientRequestPlan>)(base.EndInvoke("GetOperatorClientRequestPlans", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCurrentClientRequests(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetCurrentClientRequests", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<Queue.Services.DTO.ClientRequest> EndGetCurrentClientRequests(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<Queue.Services.DTO.ClientRequest> _result = ((System.Collections.Generic.List<Queue.Services.DTO.ClientRequest>)(base.EndInvoke("GetCurrentClientRequests", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCurrentClientRequest(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetCurrentClientRequest", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.ClientRequest EndGetCurrentClientRequest(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.ClientRequest _result = ((Queue.Services.DTO.ClientRequest)(base.EndInvoke("GetCurrentClientRequest", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateCurrentClientRequest(Queue.Model.Common.ClientRequestState state, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = state;
                System.IAsyncResult _result = base.BeginInvoke("UpdateCurrentClientRequest", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateCurrentClientRequest(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdateCurrentClientRequest", _args, result);
            }
            
            public System.IAsyncResult BeginPostponeCurrentClientRequest(System.TimeSpan postponeTime, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = postponeTime;
                System.IAsyncResult _result = base.BeginInvoke("PostponeCurrentClientRequest", _args, callback, asyncState);
                return _result;
            }
            
            public void EndPostponeCurrentClientRequest(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("PostponeCurrentClientRequest", _args, result);
            }
            
            public System.IAsyncResult BeginReturnCurrentClientRequest(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ReturnCurrentClientRequest", _args, callback, asyncState);
                return _result;
            }
            
            public void EndReturnCurrentClientRequest(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ReturnCurrentClientRequest", _args, result);
            }
            
            public System.IAsyncResult BeginChangeCurrentClientRequestService(System.Guid serviceId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = serviceId;
                System.IAsyncResult _result = base.BeginInvoke("ChangeCurrentClientRequestService", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.ClientRequest EndChangeCurrentClientRequestService(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.ClientRequest _result = ((Queue.Services.DTO.ClientRequest)(base.EndInvoke("ChangeCurrentClientRequestService", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginChangeCurrentClientRequestServiceType(Queue.Model.Common.ServiceType serviceType, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = serviceType;
                System.IAsyncResult _result = base.BeginInvoke("ChangeCurrentClientRequestServiceType", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.ClientRequest EndChangeCurrentClientRequestServiceType(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.ClientRequest _result = ((Queue.Services.DTO.ClientRequest)(base.EndInvoke("ChangeCurrentClientRequestServiceType", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCallCurrentClient(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("CallCurrentClient", _args, callback, asyncState);
                return _result;
            }
            
            public void EndCallCurrentClient(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("CallCurrentClient", _args, result);
            }
            
            public System.IAsyncResult BeginGetQueuePlan(System.DateTime planDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = planDate;
                System.IAsyncResult _result = base.BeginInvoke("GetQueuePlan", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.QueuePlan EndGetQueuePlan(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.QueuePlan _result = ((Queue.Services.DTO.QueuePlan)(base.EndInvoke("GetQueuePlan", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFreeTime(System.Guid serviceId, System.DateTime planDate, Queue.Model.Common.ClientRequestType queueType, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = serviceId;
                _args[1] = planDate;
                _args[2] = queueType;
                System.IAsyncResult _result = base.BeginInvoke("GetFreeTime", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.ServiceFreeTime EndGetFreeTime(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.ServiceFreeTime _result = ((Queue.Services.DTO.ServiceFreeTime)(base.EndInvoke("GetFreeTime", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRefreshTodayQueuePlan(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("RefreshTodayQueuePlan", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRefreshTodayQueuePlan(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RefreshTodayQueuePlan", _args, result);
            }
            
            public System.IAsyncResult BeginGetRootServiceGroups(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetRootServiceGroups", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<Queue.Services.DTO.ServiceGroup> EndGetRootServiceGroups(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<Queue.Services.DTO.ServiceGroup> _result = ((System.Collections.Generic.List<Queue.Services.DTO.ServiceGroup>)(base.EndInvoke("GetRootServiceGroups", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetServiceGroups(System.Guid parentServiceGroupId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = parentServiceGroupId;
                System.IAsyncResult _result = base.BeginInvoke("GetServiceGroups", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<Queue.Services.DTO.ServiceGroup> EndGetServiceGroups(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<Queue.Services.DTO.ServiceGroup> _result = ((System.Collections.Generic.List<Queue.Services.DTO.ServiceGroup>)(base.EndInvoke("GetServiceGroups", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetServiceGroup(System.Guid serviceGroupId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = serviceGroupId;
                System.IAsyncResult _result = base.BeginInvoke("GetServiceGroup", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.ServiceGroup EndGetServiceGroup(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.ServiceGroup _result = ((Queue.Services.DTO.ServiceGroup)(base.EndInvoke("GetServiceGroup", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddRootServiceGroup(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("AddRootServiceGroup", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.ServiceGroup EndAddRootServiceGroup(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.ServiceGroup _result = ((Queue.Services.DTO.ServiceGroup)(base.EndInvoke("AddRootServiceGroup", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddServiceGroup(System.Guid parentServiceGroupId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = parentServiceGroupId;
                System.IAsyncResult _result = base.BeginInvoke("AddServiceGroup", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.ServiceGroup EndAddServiceGroup(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.ServiceGroup _result = ((Queue.Services.DTO.ServiceGroup)(base.EndInvoke("AddServiceGroup", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditServiceGroup(System.Guid serviceGroupId, string code, string name, string comment, string description, int columns, int rows, string color, byte[] icon, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[9];
                _args[0] = serviceGroupId;
                _args[1] = code;
                _args[2] = name;
                _args[3] = comment;
                _args[4] = description;
                _args[5] = columns;
                _args[6] = rows;
                _args[7] = color;
                _args[8] = icon;
                System.IAsyncResult _result = base.BeginInvoke("EditServiceGroup", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.ServiceGroup EndEditServiceGroup(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.ServiceGroup _result = ((Queue.Services.DTO.ServiceGroup)(base.EndInvoke("EditServiceGroup", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMoveServiceGroup(System.Guid sourceGroupId, System.Guid targetGroupId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = sourceGroupId;
                _args[1] = targetGroupId;
                System.IAsyncResult _result = base.BeginInvoke("MoveServiceGroup", _args, callback, asyncState);
                return _result;
            }
            
            public void EndMoveServiceGroup(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("MoveServiceGroup", _args, result);
            }
            
            public System.IAsyncResult BeginMoveServiceGroupToRoot(System.Guid sourceGroupId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sourceGroupId;
                System.IAsyncResult _result = base.BeginInvoke("MoveServiceGroupToRoot", _args, callback, asyncState);
                return _result;
            }
            
            public void EndMoveServiceGroupToRoot(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("MoveServiceGroupToRoot", _args, result);
            }
            
            public System.IAsyncResult BeginServiceGroupUp(System.Guid serviceGroupId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = serviceGroupId;
                System.IAsyncResult _result = base.BeginInvoke("ServiceGroupUp", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndServiceGroupUp(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("ServiceGroupUp", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginServiceGroupDown(System.Guid serviceGroupId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = serviceGroupId;
                System.IAsyncResult _result = base.BeginInvoke("ServiceGroupDown", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndServiceGroupDown(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("ServiceGroupDown", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginServiceGroupActivate(System.Guid serviceGroupId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = serviceGroupId;
                System.IAsyncResult _result = base.BeginInvoke("ServiceGroupActivate", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndServiceGroupActivate(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("ServiceGroupActivate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginServiceGroupDeactivate(System.Guid serviceGroupId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = serviceGroupId;
                System.IAsyncResult _result = base.BeginInvoke("ServiceGroupDeactivate", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndServiceGroupDeactivate(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("ServiceGroupDeactivate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteServiceGroup(System.Guid serviceGroupId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = serviceGroupId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteServiceGroup", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteServiceGroup(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteServiceGroup", _args, result);
            }
            
            public System.IAsyncResult BeginOpenUserSession(System.Guid sessionId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sessionId;
                System.IAsyncResult _result = base.BeginInvoke("OpenUserSession", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.User EndOpenUserSession(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.User _result = ((Queue.Services.DTO.User)(base.EndInvoke("OpenUserSession", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUserHeartbeat(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("UserHeartbeat", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUserHeartbeat(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UserHeartbeat", _args, result);
            }
            
            public System.IAsyncResult BeginGetUsers(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetUsers", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<Queue.Services.DTO.User> EndGetUsers(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<Queue.Services.DTO.User> _result = ((System.Collections.Generic.List<Queue.Services.DTO.User>)(base.EndInvoke("GetUsers", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUser(System.Guid userId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userId;
                System.IAsyncResult _result = base.BeginInvoke("GetUser", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.User EndGetUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.User _result = ((Queue.Services.DTO.User)(base.EndInvoke("GetUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUserList(Queue.Model.Common.UserRole userRole, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userRole;
                System.IAsyncResult _result = base.BeginInvoke("GetUserList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<System.Guid, string> EndGetUserList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<System.Guid, string> _result = ((System.Collections.Generic.Dictionary<System.Guid, string>)(base.EndInvoke("GetUserList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUserLogin(System.Guid userId, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("UserLogin", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.User EndUserLogin(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.User _result = ((Queue.Services.DTO.User)(base.EndInvoke("UserLogin", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddUser(Queue.Model.Common.UserRole role, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = role;
                System.IAsyncResult _result = base.BeginInvoke("AddUser", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.User EndAddUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.User _result = ((Queue.Services.DTO.User)(base.EndInvoke("AddUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditUser(System.Guid userId, string surname, string name, string patronymic, string email, string mobile, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = userId;
                _args[1] = surname;
                _args[2] = name;
                _args[3] = patronymic;
                _args[4] = email;
                _args[5] = mobile;
                System.IAsyncResult _result = base.BeginInvoke("EditUser", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.User EndEditUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.User _result = ((Queue.Services.DTO.User)(base.EndInvoke("EditUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteUser(System.Guid userId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteUser", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteUser", _args, result);
            }
            
            public System.IAsyncResult BeginChangeUserPassword(System.Guid userId, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("ChangeUserPassword", _args, callback, asyncState);
                return _result;
            }
            
            public void EndChangeUserPassword(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ChangeUserPassword", _args, result);
            }
            
            public System.IAsyncResult BeginEditOperator(System.Guid operatorId, System.Guid workplaceId, bool isInterruption, System.TimeSpan interruptionStartTime, System.TimeSpan interruptionFinishTime, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = operatorId;
                _args[1] = workplaceId;
                _args[2] = isInterruption;
                _args[3] = interruptionStartTime;
                _args[4] = interruptionFinishTime;
                System.IAsyncResult _result = base.BeginInvoke("EditOperator", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.Operator EndEditOperator(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.Operator _result = ((Queue.Services.DTO.Operator)(base.EndInvoke("EditOperator", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetOffices(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetOffices", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<Queue.Services.DTO.Office> EndGetOffices(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<Queue.Services.DTO.Office> _result = ((System.Collections.Generic.List<Queue.Services.DTO.Office>)(base.EndInvoke("GetOffices", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetOffice(System.Guid officeId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = officeId;
                System.IAsyncResult _result = base.BeginInvoke("GetOffice", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.Office EndGetOffice(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.Office _result = ((Queue.Services.DTO.Office)(base.EndInvoke("GetOffice", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddOffice(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("AddOffice", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.Office EndAddOffice(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.Office _result = ((Queue.Services.DTO.Office)(base.EndInvoke("AddOffice", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditOffice(System.Guid officeId, string name, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = officeId;
                _args[1] = name;
                System.IAsyncResult _result = base.BeginInvoke("EditOffice", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.Office EndEditOffice(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.Office _result = ((Queue.Services.DTO.Office)(base.EndInvoke("EditOffice", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditOfficeLogin(System.Guid officeId, string endpoint, System.Guid sessionId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = officeId;
                _args[1] = endpoint;
                _args[2] = sessionId;
                System.IAsyncResult _result = base.BeginInvoke("EditOfficeLogin", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.Office EndEditOfficeLogin(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.Office _result = ((Queue.Services.DTO.Office)(base.EndInvoke("EditOfficeLogin", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteOffice(System.Guid officeId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = officeId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteOffice", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteOffice(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteOffice", _args, result);
            }
            
            public System.IAsyncResult BeginGetWorkplacesList(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetWorkplacesList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<System.Guid, string> EndGetWorkplacesList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<System.Guid, string> _result = ((System.Collections.Generic.Dictionary<System.Guid, string>)(base.EndInvoke("GetWorkplacesList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetWorkplaces(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetWorkplaces", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<Queue.Services.DTO.Workplace> EndGetWorkplaces(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<Queue.Services.DTO.Workplace> _result = ((System.Collections.Generic.List<Queue.Services.DTO.Workplace>)(base.EndInvoke("GetWorkplaces", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetWorkplace(System.Guid workplaceId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = workplaceId;
                System.IAsyncResult _result = base.BeginInvoke("GetWorkplace", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.Workplace EndGetWorkplace(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.Workplace _result = ((Queue.Services.DTO.Workplace)(base.EndInvoke("GetWorkplace", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddWorkplace(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("AddWorkplace", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.Workplace EndAddWorkplace(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.Workplace _result = ((Queue.Services.DTO.Workplace)(base.EndInvoke("AddWorkplace", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditWorkplace(System.Guid workplaceId, Queue.Model.Common.WorkplaceType type, int number, Queue.Model.Common.WorkplaceModificator modificator, string comment, byte display, byte sections, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = workplaceId;
                _args[1] = type;
                _args[2] = number;
                _args[3] = modificator;
                _args[4] = comment;
                _args[5] = display;
                _args[6] = sections;
                System.IAsyncResult _result = base.BeginInvoke("EditWorkplace", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.Workplace EndEditWorkplace(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.Workplace _result = ((Queue.Services.DTO.Workplace)(base.EndInvoke("EditWorkplace", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteWorkplace(System.Guid workplaceId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = workplaceId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteWorkplace", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteWorkplace(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteWorkplace", _args, result);
            }
            
            public System.IAsyncResult BeginGetServiceList(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetServiceList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<System.Guid, string> EndGetServiceList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<System.Guid, string> _result = ((System.Collections.Generic.Dictionary<System.Guid, string>)(base.EndInvoke("GetServiceList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRootServices(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetRootServices", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<Queue.Services.DTO.Service> EndGetRootServices(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<Queue.Services.DTO.Service> _result = ((System.Collections.Generic.List<Queue.Services.DTO.Service>)(base.EndInvoke("GetRootServices", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetServices(System.Guid serviceGroupId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = serviceGroupId;
                System.IAsyncResult _result = base.BeginInvoke("GetServices", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<Queue.Services.DTO.Service> EndGetServices(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<Queue.Services.DTO.Service> _result = ((System.Collections.Generic.List<Queue.Services.DTO.Service>)(base.EndInvoke("GetServices", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetService(System.Guid serviceId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = serviceId;
                System.IAsyncResult _result = base.BeginInvoke("GetService", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.Service EndGetService(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.Service _result = ((Queue.Services.DTO.Service)(base.EndInvoke("GetService", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFindServices(int startIndex, int maxResults, string filter, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = startIndex;
                _args[1] = maxResults;
                _args[2] = filter;
                System.IAsyncResult _result = base.BeginInvoke("FindServices", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<Queue.Services.DTO.Service> EndFindServices(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<Queue.Services.DTO.Service> _result = ((System.Collections.Generic.List<Queue.Services.DTO.Service>)(base.EndInvoke("FindServices", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddRootService(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("AddRootService", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.Service EndAddRootService(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.Service _result = ((Queue.Services.DTO.Service)(base.EndInvoke("AddRootService", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddService(System.Guid serviceGroupId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = serviceGroupId;
                System.IAsyncResult _result = base.BeginInvoke("AddService", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.Service EndAddService(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.Service _result = ((Queue.Services.DTO.Service)(base.EndInvoke("AddService", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditService(
                        System.Guid serviceId, 
                        string code, 
                        int priority, 
                        string name, 
                        string comment, 
                        string tags, 
                        string description, 
                        string link, 
                        int maxSubjects, 
                        int maxEarlyDays, 
                        bool clientRequire, 
                        Queue.Model.Common.ServiceType type, 
                        Queue.Model.Common.ClientRequestRegistrator liveRegistrator, 
                        Queue.Model.Common.ClientRequestRegistrator earlyRegistrator, 
                        System.AsyncCallback callback, 
                        object asyncState) {
                object[] _args = new object[14];
                _args[0] = serviceId;
                _args[1] = code;
                _args[2] = priority;
                _args[3] = name;
                _args[4] = comment;
                _args[5] = tags;
                _args[6] = description;
                _args[7] = link;
                _args[8] = maxSubjects;
                _args[9] = maxEarlyDays;
                _args[10] = clientRequire;
                _args[11] = type;
                _args[12] = liveRegistrator;
                _args[13] = earlyRegistrator;
                System.IAsyncResult _result = base.BeginInvoke("EditService", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.Service EndEditService(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.Service _result = ((Queue.Services.DTO.Service)(base.EndInvoke("EditService", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMoveService(System.Guid serviceId, System.Guid serviceGroupId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = serviceId;
                _args[1] = serviceGroupId;
                System.IAsyncResult _result = base.BeginInvoke("MoveService", _args, callback, asyncState);
                return _result;
            }
            
            public void EndMoveService(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("MoveService", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteService(System.Guid serviceId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = serviceId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteService", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteService(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteService", _args, result);
            }
            
            public System.IAsyncResult BeginServiceUp(System.Guid serviceId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = serviceId;
                System.IAsyncResult _result = base.BeginInvoke("ServiceUp", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndServiceUp(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("ServiceUp", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginServiceDown(System.Guid serviceId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = serviceId;
                System.IAsyncResult _result = base.BeginInvoke("ServiceDown", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndServiceDown(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("ServiceDown", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginChangeServiceActivity(System.Guid serviceId, bool isActive, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = serviceId;
                _args[1] = isActive;
                System.IAsyncResult _result = base.BeginInvoke("ChangeServiceActivity", _args, callback, asyncState);
                return _result;
            }
            
            public void EndChangeServiceActivity(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ChangeServiceActivity", _args, result);
            }
            
            public System.IAsyncResult BeginGetServiceCurrentSchedule(System.Guid serviceId, System.DateTime planDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = serviceId;
                _args[1] = planDate;
                System.IAsyncResult _result = base.BeginInvoke("GetServiceCurrentSchedule", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.Schedule EndGetServiceCurrentSchedule(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.Schedule _result = ((Queue.Services.DTO.Schedule)(base.EndInvoke("GetServiceCurrentSchedule", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetServiceWeekdaySchedule(System.Guid serviceId, Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek dayOfWeek, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = serviceId;
                _args[1] = dayOfWeek;
                System.IAsyncResult _result = base.BeginInvoke("GetServiceWeekdaySchedule", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.ServiceWeekdaySchedule EndGetServiceWeekdaySchedule(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.ServiceWeekdaySchedule _result = ((Queue.Services.DTO.ServiceWeekdaySchedule)(base.EndInvoke("GetServiceWeekdaySchedule", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditServiceWeekdaySchedule(
                        System.Guid serviceId, 
                        Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek dayOfWeek, 
                        System.TimeSpan startTime, 
                        System.TimeSpan finishTime, 
                        bool isWorked, 
                        bool isInterruption, 
                        System.TimeSpan interruptionStartTime, 
                        System.TimeSpan interruptionFinishTime, 
                        System.TimeSpan clientInterval, 
                        System.TimeSpan intersection, 
                        Queue.Model.Common.ServiceRenderingMode renderingMode, 
                        System.TimeSpan earlyStartTime, 
                        System.TimeSpan earlyFinishTime, 
                        int earlyReservation, 
                        int maxClientRequests, 
                        System.Collections.Generic.Dictionary<System.Guid, Queue.Model.Common.ServiceRenderingMode> renderings, 
                        System.AsyncCallback callback, 
                        object asyncState) {
                object[] _args = new object[16];
                _args[0] = serviceId;
                _args[1] = dayOfWeek;
                _args[2] = startTime;
                _args[3] = finishTime;
                _args[4] = isWorked;
                _args[5] = isInterruption;
                _args[6] = interruptionStartTime;
                _args[7] = interruptionFinishTime;
                _args[8] = clientInterval;
                _args[9] = intersection;
                _args[10] = renderingMode;
                _args[11] = earlyStartTime;
                _args[12] = earlyFinishTime;
                _args[13] = earlyReservation;
                _args[14] = maxClientRequests;
                _args[15] = renderings;
                System.IAsyncResult _result = base.BeginInvoke("EditServiceWeekdaySchedule", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.ServiceWeekdaySchedule EndEditServiceWeekdaySchedule(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.ServiceWeekdaySchedule _result = ((Queue.Services.DTO.ServiceWeekdaySchedule)(base.EndInvoke("EditServiceWeekdaySchedule", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteServiceWeekdaySchedule(System.Guid serviceId, Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek dayOfWeek, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = serviceId;
                _args[1] = dayOfWeek;
                System.IAsyncResult _result = base.BeginInvoke("DeleteServiceWeekdaySchedule", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteServiceWeekdaySchedule(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteServiceWeekdaySchedule", _args, result);
            }
            
            public System.IAsyncResult BeginGetServiceExceptionSchedule(System.Guid serviceId, System.DateTime scheduleDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = serviceId;
                _args[1] = scheduleDate;
                System.IAsyncResult _result = base.BeginInvoke("GetServiceExceptionSchedule", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.ServiceExceptionSchedule EndGetServiceExceptionSchedule(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.ServiceExceptionSchedule _result = ((Queue.Services.DTO.ServiceExceptionSchedule)(base.EndInvoke("GetServiceExceptionSchedule", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditServiceExceptionSchedule(
                        System.Guid serviceId, 
                        System.DateTime scheduleDate, 
                        System.TimeSpan startTime, 
                        System.TimeSpan finishTime, 
                        bool isWorked, 
                        bool isInterruption, 
                        System.TimeSpan interruptionStartTime, 
                        System.TimeSpan interruptionFinishTime, 
                        System.TimeSpan clientInterval, 
                        System.TimeSpan intersection, 
                        Queue.Model.Common.ServiceRenderingMode renderingMode, 
                        System.TimeSpan earlyStartTime, 
                        System.TimeSpan earlyFinishTime, 
                        int earlyReservation, 
                        int maxClientRequests, 
                        System.Collections.Generic.Dictionary<System.Guid, Queue.Model.Common.ServiceRenderingMode> renderings, 
                        System.AsyncCallback callback, 
                        object asyncState) {
                object[] _args = new object[16];
                _args[0] = serviceId;
                _args[1] = scheduleDate;
                _args[2] = startTime;
                _args[3] = finishTime;
                _args[4] = isWorked;
                _args[5] = isInterruption;
                _args[6] = interruptionStartTime;
                _args[7] = interruptionFinishTime;
                _args[8] = clientInterval;
                _args[9] = intersection;
                _args[10] = renderingMode;
                _args[11] = earlyStartTime;
                _args[12] = earlyFinishTime;
                _args[13] = earlyReservation;
                _args[14] = maxClientRequests;
                _args[15] = renderings;
                System.IAsyncResult _result = base.BeginInvoke("EditServiceExceptionSchedule", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.ServiceExceptionSchedule EndEditServiceExceptionSchedule(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.ServiceExceptionSchedule _result = ((Queue.Services.DTO.ServiceExceptionSchedule)(base.EndInvoke("EditServiceExceptionSchedule", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteServiceExceptionSchedule(System.Guid serviceId, System.DateTime scheduleDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = serviceId;
                _args[1] = scheduleDate;
                System.IAsyncResult _result = base.BeginInvoke("DeleteServiceExceptionSchedule", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteServiceExceptionSchedule(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteServiceExceptionSchedule", _args, result);
            }
            
            public System.IAsyncResult BeginGetDefaultWeekdaySchedule(Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek dayOfWeek, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = dayOfWeek;
                System.IAsyncResult _result = base.BeginInvoke("GetDefaultWeekdaySchedule", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.DefaultWeekdaySchedule EndGetDefaultWeekdaySchedule(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.DefaultWeekdaySchedule _result = ((Queue.Services.DTO.DefaultWeekdaySchedule)(base.EndInvoke("GetDefaultWeekdaySchedule", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditDefaultWeekdaySchedule(
                        Queue.Operator.Silverlight.QueueRemoteService.DayOfWeek dayOfWeek, 
                        System.TimeSpan startTime, 
                        System.TimeSpan finishTime, 
                        bool isWorked, 
                        bool isInterruption, 
                        System.TimeSpan interruptionStartTime, 
                        System.TimeSpan interruptionFinishTime, 
                        System.TimeSpan clientInterval, 
                        System.TimeSpan intersection, 
                        Queue.Model.Common.ServiceRenderingMode renderingMode, 
                        System.TimeSpan earlyStartTime, 
                        System.TimeSpan earlyFinishTime, 
                        int earlyReservation, 
                        int maxClientRequests, 
                        System.Collections.Generic.Dictionary<System.Guid, Queue.Model.Common.ServiceRenderingMode> renderings, 
                        System.AsyncCallback callback, 
                        object asyncState) {
                object[] _args = new object[15];
                _args[0] = dayOfWeek;
                _args[1] = startTime;
                _args[2] = finishTime;
                _args[3] = isWorked;
                _args[4] = isInterruption;
                _args[5] = interruptionStartTime;
                _args[6] = interruptionFinishTime;
                _args[7] = clientInterval;
                _args[8] = intersection;
                _args[9] = renderingMode;
                _args[10] = earlyStartTime;
                _args[11] = earlyFinishTime;
                _args[12] = earlyReservation;
                _args[13] = maxClientRequests;
                _args[14] = renderings;
                System.IAsyncResult _result = base.BeginInvoke("EditDefaultWeekdaySchedule", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.DefaultWeekdaySchedule EndEditDefaultWeekdaySchedule(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.DefaultWeekdaySchedule _result = ((Queue.Services.DTO.DefaultWeekdaySchedule)(base.EndInvoke("EditDefaultWeekdaySchedule", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDefaultExceptionSchedule(System.DateTime scheduleDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = scheduleDate;
                System.IAsyncResult _result = base.BeginInvoke("GetDefaultExceptionSchedule", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.DefaultExceptionSchedule EndGetDefaultExceptionSchedule(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.DefaultExceptionSchedule _result = ((Queue.Services.DTO.DefaultExceptionSchedule)(base.EndInvoke("GetDefaultExceptionSchedule", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditDefaultExceptionSchedule(
                        System.DateTime scheduleDate, 
                        System.TimeSpan startTime, 
                        System.TimeSpan finishTime, 
                        bool isWorked, 
                        bool isInterruption, 
                        System.TimeSpan interruptionStartTime, 
                        System.TimeSpan interruptionFinishTime, 
                        System.TimeSpan clientInterval, 
                        System.TimeSpan intersection, 
                        Queue.Model.Common.ServiceRenderingMode renderingMode, 
                        System.TimeSpan earlyStartTime, 
                        System.TimeSpan earlyFinishTime, 
                        int earlyReservation, 
                        int maxClientRequests, 
                        System.Collections.Generic.Dictionary<System.Guid, Queue.Model.Common.ServiceRenderingMode> renderings, 
                        System.AsyncCallback callback, 
                        object asyncState) {
                object[] _args = new object[15];
                _args[0] = scheduleDate;
                _args[1] = startTime;
                _args[2] = finishTime;
                _args[3] = isWorked;
                _args[4] = isInterruption;
                _args[5] = interruptionStartTime;
                _args[6] = interruptionFinishTime;
                _args[7] = clientInterval;
                _args[8] = intersection;
                _args[9] = renderingMode;
                _args[10] = earlyStartTime;
                _args[11] = earlyFinishTime;
                _args[12] = earlyReservation;
                _args[13] = maxClientRequests;
                _args[14] = renderings;
                System.IAsyncResult _result = base.BeginInvoke("EditDefaultExceptionSchedule", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.DefaultExceptionSchedule EndEditDefaultExceptionSchedule(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.DefaultExceptionSchedule _result = ((Queue.Services.DTO.DefaultExceptionSchedule)(base.EndInvoke("EditDefaultExceptionSchedule", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteDefaultExceptionSchedule(System.DateTime scheduleDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = scheduleDate;
                System.IAsyncResult _result = base.BeginInvoke("DeleteDefaultExceptionSchedule", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteDefaultExceptionSchedule(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteDefaultExceptionSchedule", _args, result);
            }
            
            public System.IAsyncResult BeginGetServiceParameters(System.Guid serviceId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = serviceId;
                System.IAsyncResult _result = base.BeginInvoke("GetServiceParameters", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<Queue.Services.DTO.ServiceParameter> EndGetServiceParameters(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<Queue.Services.DTO.ServiceParameter> _result = ((System.Collections.Generic.List<Queue.Services.DTO.ServiceParameter>)(base.EndInvoke("GetServiceParameters", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddServiceParameter(System.Guid serviceId, Queue.Model.Common.ServiceParameterType type, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = serviceId;
                _args[1] = type;
                System.IAsyncResult _result = base.BeginInvoke("AddServiceParameter", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.ServiceParameter EndAddServiceParameter(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.ServiceParameter _result = ((Queue.Services.DTO.ServiceParameter)(base.EndInvoke("AddServiceParameter", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditNumberServiceParameter(System.Guid parameterId, string name, string tooltip, bool isRequire, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = parameterId;
                _args[1] = name;
                _args[2] = tooltip;
                _args[3] = isRequire;
                System.IAsyncResult _result = base.BeginInvoke("EditNumberServiceParameter", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.ServiceParameter EndEditNumberServiceParameter(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.ServiceParameter _result = ((Queue.Services.DTO.ServiceParameter)(base.EndInvoke("EditNumberServiceParameter", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditTextServiceParameter(System.Guid parameterId, string name, string tooltip, bool isRequire, int minLength, int maxLength, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = parameterId;
                _args[1] = name;
                _args[2] = tooltip;
                _args[3] = isRequire;
                _args[4] = minLength;
                _args[5] = maxLength;
                System.IAsyncResult _result = base.BeginInvoke("EditTextServiceParameter", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.ServiceParameter EndEditTextServiceParameter(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.ServiceParameter _result = ((Queue.Services.DTO.ServiceParameter)(base.EndInvoke("EditTextServiceParameter", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditOptionsServiceParameter(System.Guid parameterId, string name, string tooltip, bool isRequire, string options, bool isMultiple, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = parameterId;
                _args[1] = name;
                _args[2] = tooltip;
                _args[3] = isRequire;
                _args[4] = options;
                _args[5] = isMultiple;
                System.IAsyncResult _result = base.BeginInvoke("EditOptionsServiceParameter", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.ServiceParameter EndEditOptionsServiceParameter(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.ServiceParameter _result = ((Queue.Services.DTO.ServiceParameter)(base.EndInvoke("EditOptionsServiceParameter", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteServiceParameter(System.Guid serviceParameterId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = serviceParameterId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteServiceParameter", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteServiceParameter(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteServiceParameter", _args, result);
            }
            
            public System.IAsyncResult BeginGetServiceRatingReport(System.Collections.Generic.List<System.Guid> servicesIds, Queue.Model.Common.ServiceRatingReportDetailLavel detailLavel, Queue.Model.Common.ServiceRatingReportSettings settings, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = servicesIds;
                _args[1] = detailLavel;
                _args[2] = settings;
                System.IAsyncResult _result = base.BeginInvoke("GetServiceRatingReport", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndGetServiceRatingReport(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("GetServiceRatingReport", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetExceptionScheduleReport(System.DateTime fromDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = fromDate;
                System.IAsyncResult _result = base.BeginInvoke("GetExceptionScheduleReport", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndGetExceptionScheduleReport(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("GetExceptionScheduleReport", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetClientRequestReport(System.Guid clientRequestId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = clientRequestId;
                System.IAsyncResult _result = base.BeginInvoke("GetClientRequestReport", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndGetClientRequestReport(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("GetClientRequestReport", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDefaultConfig(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetDefaultConfig", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.DefaultConfig EndGetDefaultConfig(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.DefaultConfig _result = ((Queue.Services.DTO.DefaultConfig)(base.EndInvoke("GetDefaultConfig", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditDefaultConfig(string queueName, System.TimeSpan workStartTime, System.TimeSpan workFinishTime, int maxClientRequests, int maxRenderingTime, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = queueName;
                _args[1] = workStartTime;
                _args[2] = workFinishTime;
                _args[3] = maxClientRequests;
                _args[4] = maxRenderingTime;
                System.IAsyncResult _result = base.BeginInvoke("EditDefaultConfig", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.DefaultConfig EndEditDefaultConfig(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.DefaultConfig _result = ((Queue.Services.DTO.DefaultConfig)(base.EndInvoke("EditDefaultConfig", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDesignConfig(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetDesignConfig", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.DesignConfig EndGetDesignConfig(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.DesignConfig _result = ((Queue.Services.DTO.DesignConfig)(base.EndInvoke("GetDesignConfig", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditDesignConfig(byte[] logoSmall, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = logoSmall;
                System.IAsyncResult _result = base.BeginInvoke("EditDesignConfig", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.DesignConfig EndEditDesignConfig(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.DesignConfig _result = ((Queue.Services.DTO.DesignConfig)(base.EndInvoke("EditDesignConfig", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCouponConfig(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetCouponConfig", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.CouponConfig EndGetCouponConfig(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.CouponConfig _result = ((Queue.Services.DTO.CouponConfig)(base.EndInvoke("GetCouponConfig", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCouponTemplate(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetCouponTemplate", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetCouponTemplate(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetCouponTemplate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditCouponConfig(string template, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = template;
                System.IAsyncResult _result = base.BeginInvoke("EditCouponConfig", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.CouponConfig EndEditCouponConfig(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.CouponConfig _result = ((Queue.Services.DTO.CouponConfig)(base.EndInvoke("EditCouponConfig", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSMTPConfig(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetSMTPConfig", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.SMTPConfig EndGetSMTPConfig(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.SMTPConfig _result = ((Queue.Services.DTO.SMTPConfig)(base.EndInvoke("GetSMTPConfig", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditSMTPConfig(string server, string user, string password, string from, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = server;
                _args[1] = user;
                _args[2] = password;
                _args[3] = from;
                System.IAsyncResult _result = base.BeginInvoke("EditSMTPConfig", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.SMTPConfig EndEditSMTPConfig(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.SMTPConfig _result = ((Queue.Services.DTO.SMTPConfig)(base.EndInvoke("EditSMTPConfig", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetPortalConfig(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetPortalConfig", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.PortalConfig EndGetPortalConfig(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.PortalConfig _result = ((Queue.Services.DTO.PortalConfig)(base.EndInvoke("GetPortalConfig", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditPortalConfig(string header, string footer, bool currentDayRecording, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = header;
                _args[1] = footer;
                _args[2] = currentDayRecording;
                System.IAsyncResult _result = base.BeginInvoke("EditPortalConfig", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.PortalConfig EndEditPortalConfig(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.PortalConfig _result = ((Queue.Services.DTO.PortalConfig)(base.EndInvoke("EditPortalConfig", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetMediaConfig(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetMediaConfig", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.MediaConfig EndGetMediaConfig(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.MediaConfig _result = ((Queue.Services.DTO.MediaConfig)(base.EndInvoke("GetMediaConfig", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditMediaConfig(string serviceUrl, string ticker, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = serviceUrl;
                _args[1] = ticker;
                System.IAsyncResult _result = base.BeginInvoke("EditMediaConfig", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.MediaConfig EndEditMediaConfig(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.MediaConfig _result = ((Queue.Services.DTO.MediaConfig)(base.EndInvoke("EditMediaConfig", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddMediaConfigFile(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("AddMediaConfigFile", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.MediaConfigFile EndAddMediaConfigFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.MediaConfigFile _result = ((Queue.Services.DTO.MediaConfigFile)(base.EndInvoke("AddMediaConfigFile", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditMediaConfigFile(System.Guid mediaConfigFileId, string name, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = mediaConfigFileId;
                _args[1] = name;
                System.IAsyncResult _result = base.BeginInvoke("EditMediaConfigFile", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.MediaConfigFile EndEditMediaConfigFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.MediaConfigFile _result = ((Queue.Services.DTO.MediaConfigFile)(base.EndInvoke("EditMediaConfigFile", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteMediaConfigFile(System.Guid mediaConfigFileId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = mediaConfigFileId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteMediaConfigFile", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteMediaConfigFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteMediaConfigFile", _args, result);
            }
            
            public System.IAsyncResult BeginGetTerminalConfig(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetTerminalConfig", _args, callback, asyncState);
                return _result;
            }
            
            public Queue.Services.DTO.TerminalConfig EndGetTerminalConfig(System.IAsyncResult result) {
                object[] _args = new object[0];
                Queue.Services.DTO.TerminalConfig _result = ((Queue.Services.DTO.TerminalConfig)(base.EndInvoke("GetTerminalConfig", _args, result)));
                return _result;
            }
        }
    }
    
    public class CallClientReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CallClientReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.ClientRequest clientRequest {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.ClientRequest)(this.results[0]));
            }
        }
    }
    
    public class ClientRequestUpdatedReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ClientRequestUpdatedReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.ClientRequest clientRequest {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.ClientRequest)(this.results[0]));
            }
        }
    }
    
    public class CurrentClientRequestUpdatedReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CurrentClientRequestUpdatedReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.ClientRequest clientRequest {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.ClientRequest)(this.results[0]));
            }
        }
        
        public Queue.Services.DTO.Operator queueOperator {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.Operator)(this.results[1]));
            }
        }
    }
    
    public class OperatorPlanMetricsUpdatedReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public OperatorPlanMetricsUpdatedReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.OperatorPlanMetrics operatorPlanMetrics {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.OperatorPlanMetrics)(this.results[0]));
            }
        }
    }
    
    public class ConfigUpdatedReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ConfigUpdatedReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.Config config {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.Config)(this.results[0]));
            }
        }
    }
    
    public class EventReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EventReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Queue.Services.DTO.Event queueEvent {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Queue.Services.DTO.Event)(this.results[0]));
            }
        }
    }
}
