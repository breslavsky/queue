//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.18444
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Queue.Services.Server.Tests.ServerServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Entity", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Config))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.DefaultConfig))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.DesignConfig))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.CouponConfig))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.SMTPConfig))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.PortalConfig))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.MediaConfig))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.TerminalConfig))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.NotificationConfig))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceGroup))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntityLink))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceRendering))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.User))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Administrator))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Operator))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Workplace))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Schedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.DefaultWeekdaySchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.DefaultExceptionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceExceptionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceWeekdaySchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceParameter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceParameterText))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceParameterNumber))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceParameterOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.MediaConfigFile))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Metric))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.QueuePlanMetric))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.QueuePlanServiceMetric))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Client))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ClientRequest))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Event))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestEvent))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.UserEvent))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestParameter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestAdditionalService))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.AdditionalService))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.QueuePlan.ClientRequest))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.QueuePlan.Operator))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.OperatorInterruption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Office))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Service))]
    public partial class Entity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Config", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.DefaultConfig))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.DesignConfig))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.CouponConfig))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.SMTPConfig))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.PortalConfig))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.MediaConfig))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.TerminalConfig))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.NotificationConfig))]
    public partial class Config : Queue.Services.Server.Tests.ServerServiceReference.Entity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.ConfigType TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.ConfigType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DefaultConfig", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class DefaultConfig : Queue.Services.Server.Tests.ServerServiceReference.Config {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDebugField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxClientRequestsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxRenderingTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QueueNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan WorkFinishTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan WorkStartTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDebug {
            get {
                return this.IsDebugField;
            }
            set {
                if ((this.IsDebugField.Equals(value) != true)) {
                    this.IsDebugField = value;
                    this.RaisePropertyChanged("IsDebug");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxClientRequests {
            get {
                return this.MaxClientRequestsField;
            }
            set {
                if ((this.MaxClientRequestsField.Equals(value) != true)) {
                    this.MaxClientRequestsField = value;
                    this.RaisePropertyChanged("MaxClientRequests");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxRenderingTime {
            get {
                return this.MaxRenderingTimeField;
            }
            set {
                if ((this.MaxRenderingTimeField.Equals(value) != true)) {
                    this.MaxRenderingTimeField = value;
                    this.RaisePropertyChanged("MaxRenderingTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QueueName {
            get {
                return this.QueueNameField;
            }
            set {
                if ((object.ReferenceEquals(this.QueueNameField, value) != true)) {
                    this.QueueNameField = value;
                    this.RaisePropertyChanged("QueueName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan WorkFinishTime {
            get {
                return this.WorkFinishTimeField;
            }
            set {
                if ((this.WorkFinishTimeField.Equals(value) != true)) {
                    this.WorkFinishTimeField = value;
                    this.RaisePropertyChanged("WorkFinishTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan WorkStartTime {
            get {
                return this.WorkStartTimeField;
            }
            set {
                if ((this.WorkStartTimeField.Equals(value) != true)) {
                    this.WorkStartTimeField = value;
                    this.RaisePropertyChanged("WorkStartTime");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DesignConfig", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class DesignConfig : Queue.Services.Server.Tests.ServerServiceReference.Config {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] LogoSmallField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] LogoSmall {
            get {
                return this.LogoSmallField;
            }
            set {
                if ((object.ReferenceEquals(this.LogoSmallField, value) != true)) {
                    this.LogoSmallField = value;
                    this.RaisePropertyChanged("LogoSmall");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CouponConfig", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class CouponConfig : Queue.Services.Server.Tests.ServerServiceReference.Config {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TemplateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Template {
            get {
                return this.TemplateField;
            }
            set {
                if ((object.ReferenceEquals(this.TemplateField, value) != true)) {
                    this.TemplateField = value;
                    this.RaisePropertyChanged("Template");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SMTPConfig", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class SMTPConfig : Queue.Services.Server.Tests.ServerServiceReference.Config {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EnableSslField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool EnableSsl {
            get {
                return this.EnableSslField;
            }
            set {
                if ((this.EnableSslField.Equals(value) != true)) {
                    this.EnableSslField = value;
                    this.RaisePropertyChanged("EnableSsl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string From {
            get {
                return this.FromField;
            }
            set {
                if ((object.ReferenceEquals(this.FromField, value) != true)) {
                    this.FromField = value;
                    this.RaisePropertyChanged("From");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Port {
            get {
                return this.PortField;
            }
            set {
                if ((this.PortField.Equals(value) != true)) {
                    this.PortField = value;
                    this.RaisePropertyChanged("Port");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Server {
            get {
                return this.ServerField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerField, value) != true)) {
                    this.ServerField = value;
                    this.RaisePropertyChanged("Server");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PortalConfig", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class PortalConfig : Queue.Services.Server.Tests.ServerServiceReference.Config {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CurrentDayRecordingField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CurrentDayRecording {
            get {
                return this.CurrentDayRecordingField;
            }
            set {
                if ((this.CurrentDayRecordingField.Equals(value) != true)) {
                    this.CurrentDayRecordingField = value;
                    this.RaisePropertyChanged("CurrentDayRecording");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MediaConfig", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class MediaConfig : Queue.Services.Server.Tests.ServerServiceReference.Config {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TickerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TickerSpeedField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceUrl {
            get {
                return this.ServiceUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceUrlField, value) != true)) {
                    this.ServiceUrlField = value;
                    this.RaisePropertyChanged("ServiceUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ticker {
            get {
                return this.TickerField;
            }
            set {
                if ((object.ReferenceEquals(this.TickerField, value) != true)) {
                    this.TickerField = value;
                    this.RaisePropertyChanged("Ticker");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TickerSpeed {
            get {
                return this.TickerSpeedField;
            }
            set {
                if ((this.TickerSpeedField.Equals(value) != true)) {
                    this.TickerSpeedField = value;
                    this.RaisePropertyChanged("TickerSpeed");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TerminalConfig", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class TerminalConfig : Queue.Services.Server.Tests.ServerServiceReference.Config {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ColumnsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CurrentDayRecordingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PINField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RowsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Columns {
            get {
                return this.ColumnsField;
            }
            set {
                if ((this.ColumnsField.Equals(value) != true)) {
                    this.ColumnsField = value;
                    this.RaisePropertyChanged("Columns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CurrentDayRecording {
            get {
                return this.CurrentDayRecordingField;
            }
            set {
                if ((this.CurrentDayRecordingField.Equals(value) != true)) {
                    this.CurrentDayRecordingField = value;
                    this.RaisePropertyChanged("CurrentDayRecording");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PIN {
            get {
                return this.PINField;
            }
            set {
                if ((this.PINField.Equals(value) != true)) {
                    this.PINField = value;
                    this.RaisePropertyChanged("PIN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Rows {
            get {
                return this.RowsField;
            }
            set {
                if ((this.RowsField.Equals(value) != true)) {
                    this.RowsField = value;
                    this.RaisePropertyChanged("Rows");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NotificationConfig", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class NotificationConfig : Queue.Services.Server.Tests.ServerServiceReference.Config {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ClientRequestsLengthField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ClientRequestsLength {
            get {
                return this.ClientRequestsLengthField;
            }
            set {
                if ((this.ClientRequestsLengthField.Equals(value) != true)) {
                    this.ClientRequestsLengthField = value;
                    this.RaisePropertyChanged("ClientRequestsLength");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IdentifiedEntity", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceGroup))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntityLink))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceRendering))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.User))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Administrator))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Operator))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Workplace))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Schedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.DefaultWeekdaySchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.DefaultExceptionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceExceptionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceWeekdaySchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceParameter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceParameterText))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceParameterNumber))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceParameterOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.MediaConfigFile))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Metric))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.QueuePlanMetric))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.QueuePlanServiceMetric))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Client))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ClientRequest))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Event))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestEvent))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.UserEvent))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestParameter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestAdditionalService))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.AdditionalService))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.QueuePlan.ClientRequest))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.QueuePlan.Operator))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.OperatorInterruption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Office))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Service))]
    public partial class IdentifiedEntity : Queue.Services.Server.Tests.ServerServiceReference.Entity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceGroup", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class ServiceGroup : Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ColumnsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float FontSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.ServiceGroup ParentGroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RowsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Color {
            get {
                return this.ColorField;
            }
            set {
                if ((object.ReferenceEquals(this.ColorField, value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Columns {
            get {
                return this.ColumnsField;
            }
            set {
                if ((this.ColumnsField.Equals(value) != true)) {
                    this.ColumnsField = value;
                    this.RaisePropertyChanged("Columns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float FontSize {
            get {
                return this.FontSizeField;
            }
            set {
                if ((this.FontSizeField.Equals(value) != true)) {
                    this.FontSizeField = value;
                    this.RaisePropertyChanged("FontSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceGroup ParentGroup {
            get {
                return this.ParentGroupField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentGroupField, value) != true)) {
                    this.ParentGroupField = value;
                    this.RaisePropertyChanged("ParentGroup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Rows {
            get {
                return this.RowsField;
            }
            set {
                if ((this.RowsField.Equals(value) != true)) {
                    this.RowsField = value;
                    this.RaisePropertyChanged("Rows");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IdentifiedEntityLink", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class IdentifiedEntityLink : Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PresentationField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Presentation {
            get {
                return this.PresentationField;
            }
            set {
                if ((object.ReferenceEquals(this.PresentationField, value) != true)) {
                    this.PresentationField = value;
                    this.RaisePropertyChanged("Presentation");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceStep", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class ServiceStep : Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.Service ServiceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.Service Service {
            get {
                return this.ServiceField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceField, value) != true)) {
                    this.ServiceField = value;
                    this.RaisePropertyChanged("Service");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceRendering", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class ServiceRendering : Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.ServiceRenderingMode ModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.Operator OperatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.Schedule ScheduleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.ServiceStep ServiceStepField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceRenderingMode Mode {
            get {
                return this.ModeField;
            }
            set {
                if ((this.ModeField.Equals(value) != true)) {
                    this.ModeField = value;
                    this.RaisePropertyChanged("Mode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.Operator Operator {
            get {
                return this.OperatorField;
            }
            set {
                if ((object.ReferenceEquals(this.OperatorField, value) != true)) {
                    this.OperatorField = value;
                    this.RaisePropertyChanged("Operator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.Schedule Schedule {
            get {
                return this.ScheduleField;
            }
            set {
                if ((object.ReferenceEquals(this.ScheduleField, value) != true)) {
                    this.ScheduleField = value;
                    this.RaisePropertyChanged("Schedule");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceStep ServiceStep {
            get {
                return this.ServiceStepField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceStepField, value) != true)) {
                    this.ServiceStepField = value;
                    this.RaisePropertyChanged("ServiceStep");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Administrator))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Operator))]
    public partial class User : Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime HeartbeatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MobileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool OnlineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatronymicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid SessionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SurnameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDate {
            get {
                return this.CreateDateField;
            }
            set {
                if ((this.CreateDateField.Equals(value) != true)) {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Heartbeat {
            get {
                return this.HeartbeatField;
            }
            set {
                if ((this.HeartbeatField.Equals(value) != true)) {
                    this.HeartbeatField = value;
                    this.RaisePropertyChanged("Heartbeat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mobile {
            get {
                return this.MobileField;
            }
            set {
                if ((object.ReferenceEquals(this.MobileField, value) != true)) {
                    this.MobileField = value;
                    this.RaisePropertyChanged("Mobile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Online {
            get {
                return this.OnlineField;
            }
            set {
                if ((this.OnlineField.Equals(value) != true)) {
                    this.OnlineField = value;
                    this.RaisePropertyChanged("Online");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Patronymic {
            get {
                return this.PatronymicField;
            }
            set {
                if ((object.ReferenceEquals(this.PatronymicField, value) != true)) {
                    this.PatronymicField = value;
                    this.RaisePropertyChanged("Patronymic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SessionId {
            get {
                return this.SessionIdField;
            }
            set {
                if ((this.SessionIdField.Equals(value) != true)) {
                    this.SessionIdField = value;
                    this.RaisePropertyChanged("SessionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Surname {
            get {
                return this.SurnameField;
            }
            set {
                if ((object.ReferenceEquals(this.SurnameField, value) != true)) {
                    this.SurnameField = value;
                    this.RaisePropertyChanged("Surname");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Administrator", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class Administrator : Queue.Services.Server.Tests.ServerServiceReference.User {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.AdministratorPermissions PermissionsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.AdministratorPermissions Permissions {
            get {
                return this.PermissionsField;
            }
            set {
                if ((this.PermissionsField.Equals(value) != true)) {
                    this.PermissionsField = value;
                    this.RaisePropertyChanged("Permissions");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Operator", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class Operator : Queue.Services.Server.Tests.ServerServiceReference.User {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.Workplace WorkplaceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.Workplace Workplace {
            get {
                return this.WorkplaceField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkplaceField, value) != true)) {
                    this.WorkplaceField = value;
                    this.RaisePropertyChanged("Workplace");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Workplace", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class Workplace : Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte DisplayDeviceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.WorkplaceModificator ModificatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte QualityPanelDeviceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.WorkplaceType TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte DisplayDeviceId {
            get {
                return this.DisplayDeviceIdField;
            }
            set {
                if ((this.DisplayDeviceIdField.Equals(value) != true)) {
                    this.DisplayDeviceIdField = value;
                    this.RaisePropertyChanged("DisplayDeviceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.WorkplaceModificator Modificator {
            get {
                return this.ModificatorField;
            }
            set {
                if ((this.ModificatorField.Equals(value) != true)) {
                    this.ModificatorField = value;
                    this.RaisePropertyChanged("Modificator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Number {
            get {
                return this.NumberField;
            }
            set {
                if ((this.NumberField.Equals(value) != true)) {
                    this.NumberField = value;
                    this.RaisePropertyChanged("Number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte QualityPanelDeviceId {
            get {
                return this.QualityPanelDeviceIdField;
            }
            set {
                if ((this.QualityPanelDeviceIdField.Equals(value) != true)) {
                    this.QualityPanelDeviceIdField = value;
                    this.RaisePropertyChanged("QualityPanelDeviceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.WorkplaceType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Schedule", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.DefaultWeekdaySchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.DefaultExceptionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceExceptionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceWeekdaySchedule))]
    public partial class Schedule : Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan EarlyClientIntervalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan EarlyFinishTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EarlyReservationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan EarlyStartTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan FinishTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan IntersectionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsWorkedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan LiveClientIntervalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxClientRequestsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.ServiceRenderingMode RenderingModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan StartTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan EarlyClientInterval {
            get {
                return this.EarlyClientIntervalField;
            }
            set {
                if ((this.EarlyClientIntervalField.Equals(value) != true)) {
                    this.EarlyClientIntervalField = value;
                    this.RaisePropertyChanged("EarlyClientInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan EarlyFinishTime {
            get {
                return this.EarlyFinishTimeField;
            }
            set {
                if ((this.EarlyFinishTimeField.Equals(value) != true)) {
                    this.EarlyFinishTimeField = value;
                    this.RaisePropertyChanged("EarlyFinishTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EarlyReservation {
            get {
                return this.EarlyReservationField;
            }
            set {
                if ((this.EarlyReservationField.Equals(value) != true)) {
                    this.EarlyReservationField = value;
                    this.RaisePropertyChanged("EarlyReservation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan EarlyStartTime {
            get {
                return this.EarlyStartTimeField;
            }
            set {
                if ((this.EarlyStartTimeField.Equals(value) != true)) {
                    this.EarlyStartTimeField = value;
                    this.RaisePropertyChanged("EarlyStartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan FinishTime {
            get {
                return this.FinishTimeField;
            }
            set {
                if ((this.FinishTimeField.Equals(value) != true)) {
                    this.FinishTimeField = value;
                    this.RaisePropertyChanged("FinishTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Intersection {
            get {
                return this.IntersectionField;
            }
            set {
                if ((this.IntersectionField.Equals(value) != true)) {
                    this.IntersectionField = value;
                    this.RaisePropertyChanged("Intersection");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsWorked {
            get {
                return this.IsWorkedField;
            }
            set {
                if ((this.IsWorkedField.Equals(value) != true)) {
                    this.IsWorkedField = value;
                    this.RaisePropertyChanged("IsWorked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan LiveClientInterval {
            get {
                return this.LiveClientIntervalField;
            }
            set {
                if ((this.LiveClientIntervalField.Equals(value) != true)) {
                    this.LiveClientIntervalField = value;
                    this.RaisePropertyChanged("LiveClientInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxClientRequests {
            get {
                return this.MaxClientRequestsField;
            }
            set {
                if ((this.MaxClientRequestsField.Equals(value) != true)) {
                    this.MaxClientRequestsField = value;
                    this.RaisePropertyChanged("MaxClientRequests");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceRenderingMode RenderingMode {
            get {
                return this.RenderingModeField;
            }
            set {
                if ((this.RenderingModeField.Equals(value) != true)) {
                    this.RenderingModeField = value;
                    this.RaisePropertyChanged("RenderingMode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DefaultWeekdaySchedule", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class DefaultWeekdaySchedule : Queue.Services.Server.Tests.ServerServiceReference.Schedule {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DayOfWeek DayOfWeekField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DayOfWeek DayOfWeek {
            get {
                return this.DayOfWeekField;
            }
            set {
                if ((this.DayOfWeekField.Equals(value) != true)) {
                    this.DayOfWeekField = value;
                    this.RaisePropertyChanged("DayOfWeek");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DefaultExceptionSchedule", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class DefaultExceptionSchedule : Queue.Services.Server.Tests.ServerServiceReference.Schedule {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ScheduleDateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ScheduleDate {
            get {
                return this.ScheduleDateField;
            }
            set {
                if ((this.ScheduleDateField.Equals(value) != true)) {
                    this.ScheduleDateField = value;
                    this.RaisePropertyChanged("ScheduleDate");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceSchedule", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceExceptionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceWeekdaySchedule))]
    public partial class ServiceSchedule : Queue.Services.Server.Tests.ServerServiceReference.Schedule {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.Service ServiceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.Service Service {
            get {
                return this.ServiceField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceField, value) != true)) {
                    this.ServiceField = value;
                    this.RaisePropertyChanged("Service");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceExceptionSchedule", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class ServiceExceptionSchedule : Queue.Services.Server.Tests.ServerServiceReference.ServiceSchedule {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ScheduleDateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ScheduleDate {
            get {
                return this.ScheduleDateField;
            }
            set {
                if ((this.ScheduleDateField.Equals(value) != true)) {
                    this.ScheduleDateField = value;
                    this.RaisePropertyChanged("ScheduleDate");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceWeekdaySchedule", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class ServiceWeekdaySchedule : Queue.Services.Server.Tests.ServerServiceReference.ServiceSchedule {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DayOfWeek DayOfWeekField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DayOfWeek DayOfWeek {
            get {
                return this.DayOfWeekField;
            }
            set {
                if ((this.DayOfWeekField.Equals(value) != true)) {
                    this.DayOfWeekField = value;
                    this.RaisePropertyChanged("DayOfWeek");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceParameter", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceParameterText))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceParameterNumber))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceParameterOptions))]
    public partial class ServiceParameter : Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsRequireField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.Service ServiceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SortIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ToolTipField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRequire {
            get {
                return this.IsRequireField;
            }
            set {
                if ((this.IsRequireField.Equals(value) != true)) {
                    this.IsRequireField = value;
                    this.RaisePropertyChanged("IsRequire");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.Service Service {
            get {
                return this.ServiceField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceField, value) != true)) {
                    this.ServiceField = value;
                    this.RaisePropertyChanged("Service");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SortId {
            get {
                return this.SortIdField;
            }
            set {
                if ((this.SortIdField.Equals(value) != true)) {
                    this.SortIdField = value;
                    this.RaisePropertyChanged("SortId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ToolTip {
            get {
                return this.ToolTipField;
            }
            set {
                if ((object.ReferenceEquals(this.ToolTipField, value) != true)) {
                    this.ToolTipField = value;
                    this.RaisePropertyChanged("ToolTip");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceParameterText", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class ServiceParameterText : Queue.Services.Server.Tests.ServerServiceReference.ServiceParameter {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxLengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MinLengthField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxLength {
            get {
                return this.MaxLengthField;
            }
            set {
                if ((this.MaxLengthField.Equals(value) != true)) {
                    this.MaxLengthField = value;
                    this.RaisePropertyChanged("MaxLength");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MinLength {
            get {
                return this.MinLengthField;
            }
            set {
                if ((this.MinLengthField.Equals(value) != true)) {
                    this.MinLengthField = value;
                    this.RaisePropertyChanged("MinLength");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceParameterNumber", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class ServiceParameterNumber : Queue.Services.Server.Tests.ServerServiceReference.ServiceParameter {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceParameterOptions", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class ServiceParameterOptions : Queue.Services.Server.Tests.ServerServiceReference.ServiceParameter {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsMultipleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OptionsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsMultiple {
            get {
                return this.IsMultipleField;
            }
            set {
                if ((this.IsMultipleField.Equals(value) != true)) {
                    this.IsMultipleField = value;
                    this.RaisePropertyChanged("IsMultiple");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Options {
            get {
                return this.OptionsField;
            }
            set {
                if ((object.ReferenceEquals(this.OptionsField, value) != true)) {
                    this.OptionsField = value;
                    this.RaisePropertyChanged("Options");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MediaConfigFile", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class MediaConfigFile : Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Metric", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.QueuePlanMetric))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.QueuePlanServiceMetric))]
    public partial class Metric : Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HourField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MinuteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MonthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SecondField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int YearField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Day {
            get {
                return this.DayField;
            }
            set {
                if ((this.DayField.Equals(value) != true)) {
                    this.DayField = value;
                    this.RaisePropertyChanged("Day");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Hour {
            get {
                return this.HourField;
            }
            set {
                if ((this.HourField.Equals(value) != true)) {
                    this.HourField = value;
                    this.RaisePropertyChanged("Hour");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Minute {
            get {
                return this.MinuteField;
            }
            set {
                if ((this.MinuteField.Equals(value) != true)) {
                    this.MinuteField = value;
                    this.RaisePropertyChanged("Minute");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Month {
            get {
                return this.MonthField;
            }
            set {
                if ((this.MonthField.Equals(value) != true)) {
                    this.MonthField = value;
                    this.RaisePropertyChanged("Month");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Second {
            get {
                return this.SecondField;
            }
            set {
                if ((this.SecondField.Equals(value) != true)) {
                    this.SecondField = value;
                    this.RaisePropertyChanged("Second");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Year {
            get {
                return this.YearField;
            }
            set {
                if ((this.YearField.Equals(value) != true)) {
                    this.YearField = value;
                    this.RaisePropertyChanged("Year");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueuePlanMetric", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class QueuePlanMetric : Queue.Services.Server.Tests.ServerServiceReference.Metric {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EarlyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float ProductivityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan RenderTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RenderedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WaitingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan WaitingTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Early {
            get {
                return this.EarlyField;
            }
            set {
                if ((this.EarlyField.Equals(value) != true)) {
                    this.EarlyField = value;
                    this.RaisePropertyChanged("Early");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Live {
            get {
                return this.LiveField;
            }
            set {
                if ((this.LiveField.Equals(value) != true)) {
                    this.LiveField = value;
                    this.RaisePropertyChanged("Live");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Productivity {
            get {
                return this.ProductivityField;
            }
            set {
                if ((this.ProductivityField.Equals(value) != true)) {
                    this.ProductivityField = value;
                    this.RaisePropertyChanged("Productivity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan RenderTime {
            get {
                return this.RenderTimeField;
            }
            set {
                if ((this.RenderTimeField.Equals(value) != true)) {
                    this.RenderTimeField = value;
                    this.RaisePropertyChanged("RenderTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Rendered {
            get {
                return this.RenderedField;
            }
            set {
                if ((this.RenderedField.Equals(value) != true)) {
                    this.RenderedField = value;
                    this.RaisePropertyChanged("Rendered");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Waiting {
            get {
                return this.WaitingField;
            }
            set {
                if ((this.WaitingField.Equals(value) != true)) {
                    this.WaitingField = value;
                    this.RaisePropertyChanged("Waiting");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan WaitingTime {
            get {
                return this.WaitingTimeField;
            }
            set {
                if ((this.WaitingTimeField.Equals(value) != true)) {
                    this.WaitingTimeField = value;
                    this.RaisePropertyChanged("WaitingTime");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueuePlanServiceMetric", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class QueuePlanServiceMetric : Queue.Services.Server.Tests.ServerServiceReference.Metric {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EarlyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float ProductivityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan RenderTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RenderedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.Service ServiceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WaitingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan WaitingTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Early {
            get {
                return this.EarlyField;
            }
            set {
                if ((this.EarlyField.Equals(value) != true)) {
                    this.EarlyField = value;
                    this.RaisePropertyChanged("Early");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Live {
            get {
                return this.LiveField;
            }
            set {
                if ((this.LiveField.Equals(value) != true)) {
                    this.LiveField = value;
                    this.RaisePropertyChanged("Live");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Productivity {
            get {
                return this.ProductivityField;
            }
            set {
                if ((this.ProductivityField.Equals(value) != true)) {
                    this.ProductivityField = value;
                    this.RaisePropertyChanged("Productivity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan RenderTime {
            get {
                return this.RenderTimeField;
            }
            set {
                if ((this.RenderTimeField.Equals(value) != true)) {
                    this.RenderTimeField = value;
                    this.RaisePropertyChanged("RenderTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Rendered {
            get {
                return this.RenderedField;
            }
            set {
                if ((this.RenderedField.Equals(value) != true)) {
                    this.RenderedField = value;
                    this.RaisePropertyChanged("Rendered");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.Service Service {
            get {
                return this.ServiceField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceField, value) != true)) {
                    this.ServiceField = value;
                    this.RaisePropertyChanged("Service");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Waiting {
            get {
                return this.WaitingField;
            }
            set {
                if ((this.WaitingField.Equals(value) != true)) {
                    this.WaitingField = value;
                    this.RaisePropertyChanged("Waiting");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan WaitingTime {
            get {
                return this.WaitingTimeField;
            }
            set {
                if ((this.WaitingTimeField.Equals(value) != true)) {
                    this.WaitingTimeField = value;
                    this.RaisePropertyChanged("WaitingTime");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Client", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class Client : Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdentityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MobileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatronymicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime RegisterDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid SessionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SurnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool VIPField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Identity {
            get {
                return this.IdentityField;
            }
            set {
                if ((object.ReferenceEquals(this.IdentityField, value) != true)) {
                    this.IdentityField = value;
                    this.RaisePropertyChanged("Identity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mobile {
            get {
                return this.MobileField;
            }
            set {
                if ((object.ReferenceEquals(this.MobileField, value) != true)) {
                    this.MobileField = value;
                    this.RaisePropertyChanged("Mobile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Patronymic {
            get {
                return this.PatronymicField;
            }
            set {
                if ((object.ReferenceEquals(this.PatronymicField, value) != true)) {
                    this.PatronymicField = value;
                    this.RaisePropertyChanged("Patronymic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime RegisterDate {
            get {
                return this.RegisterDateField;
            }
            set {
                if ((this.RegisterDateField.Equals(value) != true)) {
                    this.RegisterDateField = value;
                    this.RaisePropertyChanged("RegisterDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SessionId {
            get {
                return this.SessionIdField;
            }
            set {
                if ((this.SessionIdField.Equals(value) != true)) {
                    this.SessionIdField = value;
                    this.RaisePropertyChanged("SessionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Surname {
            get {
                return this.SurnameField;
            }
            set {
                if ((object.ReferenceEquals(this.SurnameField, value) != true)) {
                    this.SurnameField = value;
                    this.RaisePropertyChanged("Surname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool VIP {
            get {
                return this.VIPField;
            }
            set {
                if ((this.VIPField.Equals(value) != true)) {
                    this.VIPField = value;
                    this.RaisePropertyChanged("VIP");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientRequest", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class ClientRequest : Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan CallingFinishTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan CallingStartTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.Client ClientField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ClientRecallsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsClosedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEditableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.Operator OperatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float ProductivityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RatingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan RenderFinishTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan RenderStartTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime RequestDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan RequestTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.Service ServiceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.ServiceStep ServiceStepField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.ServiceType ServiceTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.ClientRequestState StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SubjectsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.ClientRequestType TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan WaitingStartTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan CallingFinishTime {
            get {
                return this.CallingFinishTimeField;
            }
            set {
                if ((this.CallingFinishTimeField.Equals(value) != true)) {
                    this.CallingFinishTimeField = value;
                    this.RaisePropertyChanged("CallingFinishTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan CallingStartTime {
            get {
                return this.CallingStartTimeField;
            }
            set {
                if ((this.CallingStartTimeField.Equals(value) != true)) {
                    this.CallingStartTimeField = value;
                    this.RaisePropertyChanged("CallingStartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.Client Client {
            get {
                return this.ClientField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientField, value) != true)) {
                    this.ClientField = value;
                    this.RaisePropertyChanged("Client");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ClientRecalls {
            get {
                return this.ClientRecallsField;
            }
            set {
                if ((this.ClientRecallsField.Equals(value) != true)) {
                    this.ClientRecallsField = value;
                    this.RaisePropertyChanged("ClientRecalls");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDate {
            get {
                return this.CreateDateField;
            }
            set {
                if ((this.CreateDateField.Equals(value) != true)) {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsClosed {
            get {
                return this.IsClosedField;
            }
            set {
                if ((this.IsClosedField.Equals(value) != true)) {
                    this.IsClosedField = value;
                    this.RaisePropertyChanged("IsClosed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEditable {
            get {
                return this.IsEditableField;
            }
            set {
                if ((this.IsEditableField.Equals(value) != true)) {
                    this.IsEditableField = value;
                    this.RaisePropertyChanged("IsEditable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPriority {
            get {
                return this.IsPriorityField;
            }
            set {
                if ((this.IsPriorityField.Equals(value) != true)) {
                    this.IsPriorityField = value;
                    this.RaisePropertyChanged("IsPriority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Number {
            get {
                return this.NumberField;
            }
            set {
                if ((this.NumberField.Equals(value) != true)) {
                    this.NumberField = value;
                    this.RaisePropertyChanged("Number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.Operator Operator {
            get {
                return this.OperatorField;
            }
            set {
                if ((object.ReferenceEquals(this.OperatorField, value) != true)) {
                    this.OperatorField = value;
                    this.RaisePropertyChanged("Operator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Productivity {
            get {
                return this.ProductivityField;
            }
            set {
                if ((this.ProductivityField.Equals(value) != true)) {
                    this.ProductivityField = value;
                    this.RaisePropertyChanged("Productivity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Rating {
            get {
                return this.RatingField;
            }
            set {
                if ((this.RatingField.Equals(value) != true)) {
                    this.RatingField = value;
                    this.RaisePropertyChanged("Rating");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan RenderFinishTime {
            get {
                return this.RenderFinishTimeField;
            }
            set {
                if ((this.RenderFinishTimeField.Equals(value) != true)) {
                    this.RenderFinishTimeField = value;
                    this.RaisePropertyChanged("RenderFinishTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan RenderStartTime {
            get {
                return this.RenderStartTimeField;
            }
            set {
                if ((this.RenderStartTimeField.Equals(value) != true)) {
                    this.RenderStartTimeField = value;
                    this.RaisePropertyChanged("RenderStartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime RequestDate {
            get {
                return this.RequestDateField;
            }
            set {
                if ((this.RequestDateField.Equals(value) != true)) {
                    this.RequestDateField = value;
                    this.RaisePropertyChanged("RequestDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan RequestTime {
            get {
                return this.RequestTimeField;
            }
            set {
                if ((this.RequestTimeField.Equals(value) != true)) {
                    this.RequestTimeField = value;
                    this.RaisePropertyChanged("RequestTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.Service Service {
            get {
                return this.ServiceField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceField, value) != true)) {
                    this.ServiceField = value;
                    this.RaisePropertyChanged("Service");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceStep ServiceStep {
            get {
                return this.ServiceStepField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceStepField, value) != true)) {
                    this.ServiceStepField = value;
                    this.RaisePropertyChanged("ServiceStep");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceType ServiceType {
            get {
                return this.ServiceTypeField;
            }
            set {
                if ((this.ServiceTypeField.Equals(value) != true)) {
                    this.ServiceTypeField = value;
                    this.RaisePropertyChanged("ServiceType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequestState State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Subjects {
            get {
                return this.SubjectsField;
            }
            set {
                if ((this.SubjectsField.Equals(value) != true)) {
                    this.SubjectsField = value;
                    this.RaisePropertyChanged("Subjects");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequestType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Version {
            get {
                return this.VersionField;
            }
            set {
                if ((this.VersionField.Equals(value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan WaitingStartTime {
            get {
                return this.WaitingStartTimeField;
            }
            set {
                if ((this.WaitingStartTimeField.Equals(value) != true)) {
                    this.WaitingStartTimeField = value;
                    this.RaisePropertyChanged("WaitingStartTime");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Event", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestEvent))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.UserEvent))]
    public partial class Event : Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.EventType TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDate {
            get {
                return this.CreateDateField;
            }
            set {
                if ((this.CreateDateField.Equals(value) != true)) {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.EventType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientRequestEvent", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class ClientRequestEvent : Queue.Services.Server.Tests.ServerServiceReference.Event {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.ClientRequest ClientRequestField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequest ClientRequest {
            get {
                return this.ClientRequestField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientRequestField, value) != true)) {
                    this.ClientRequestField = value;
                    this.RaisePropertyChanged("ClientRequest");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserEvent", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class UserEvent : Queue.Services.Server.Tests.ServerServiceReference.Event {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.User UserField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientRequestParameter", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class ClientRequestParameter : Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientRequestAdditionalService", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class ClientRequestAdditionalService : Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.AdditionalService AdditionalServiceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.ClientRequest ClientRequestField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float QuantityField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.AdditionalService AdditionalService {
            get {
                return this.AdditionalServiceField;
            }
            set {
                if ((object.ReferenceEquals(this.AdditionalServiceField, value) != true)) {
                    this.AdditionalServiceField = value;
                    this.RaisePropertyChanged("AdditionalService");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequest ClientRequest {
            get {
                return this.ClientRequestField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientRequestField, value) != true)) {
                    this.ClientRequestField = value;
                    this.RaisePropertyChanged("ClientRequest");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AdditionalService", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class AdditionalService : Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MeasureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal PriceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Measure {
            get {
                return this.MeasureField;
            }
            set {
                if ((object.ReferenceEquals(this.MeasureField, value) != true)) {
                    this.MeasureField = value;
                    this.RaisePropertyChanged("Measure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueuePlan", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class QueuePlan : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.QueuePlan.NotDistributedClientRequest[] NotDistributedClientRequestsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.QueuePlan.OperatorPlan[] OperatorsPlansField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PlanDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan PlanTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ReportField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.QueuePlan.NotDistributedClientRequest[] NotDistributedClientRequests {
            get {
                return this.NotDistributedClientRequestsField;
            }
            set {
                if ((object.ReferenceEquals(this.NotDistributedClientRequestsField, value) != true)) {
                    this.NotDistributedClientRequestsField = value;
                    this.RaisePropertyChanged("NotDistributedClientRequests");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.QueuePlan.OperatorPlan[] OperatorsPlans {
            get {
                return this.OperatorsPlansField;
            }
            set {
                if ((object.ReferenceEquals(this.OperatorsPlansField, value) != true)) {
                    this.OperatorsPlansField = value;
                    this.RaisePropertyChanged("OperatorsPlans");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PlanDate {
            get {
                return this.PlanDateField;
            }
            set {
                if ((this.PlanDateField.Equals(value) != true)) {
                    this.PlanDateField = value;
                    this.RaisePropertyChanged("PlanDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan PlanTime {
            get {
                return this.PlanTimeField;
            }
            set {
                if ((this.PlanTimeField.Equals(value) != true)) {
                    this.PlanTimeField = value;
                    this.RaisePropertyChanged("PlanTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Report {
            get {
                return this.ReportField;
            }
            set {
                if ((object.ReferenceEquals(this.ReportField, value) != true)) {
                    this.ReportField = value;
                    this.RaisePropertyChanged("Report");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Version {
            get {
                return this.VersionField;
            }
            set {
                if ((this.VersionField.Equals(value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="QueuePlan.ClientRequest", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
        [System.SerializableAttribute()]
        public partial class ClientRequest : Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntity {
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string ClientField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private bool IsClosedField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private bool IsEditableField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private bool IsPriorityField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private int NumberField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private System.TimeSpan RequestTimeField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string ServiceField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private Queue.Services.Server.Tests.ServerServiceReference.ClientRequestState StateField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private int SubjectsField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private Queue.Services.Server.Tests.ServerServiceReference.ClientRequestType TypeField;
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string Client {
                get {
                    return this.ClientField;
                }
                set {
                    if ((object.ReferenceEquals(this.ClientField, value) != true)) {
                        this.ClientField = value;
                        this.RaisePropertyChanged("Client");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public bool IsClosed {
                get {
                    return this.IsClosedField;
                }
                set {
                    if ((this.IsClosedField.Equals(value) != true)) {
                        this.IsClosedField = value;
                        this.RaisePropertyChanged("IsClosed");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public bool IsEditable {
                get {
                    return this.IsEditableField;
                }
                set {
                    if ((this.IsEditableField.Equals(value) != true)) {
                        this.IsEditableField = value;
                        this.RaisePropertyChanged("IsEditable");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public bool IsPriority {
                get {
                    return this.IsPriorityField;
                }
                set {
                    if ((this.IsPriorityField.Equals(value) != true)) {
                        this.IsPriorityField = value;
                        this.RaisePropertyChanged("IsPriority");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public int Number {
                get {
                    return this.NumberField;
                }
                set {
                    if ((this.NumberField.Equals(value) != true)) {
                        this.NumberField = value;
                        this.RaisePropertyChanged("Number");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public System.TimeSpan RequestTime {
                get {
                    return this.RequestTimeField;
                }
                set {
                    if ((this.RequestTimeField.Equals(value) != true)) {
                        this.RequestTimeField = value;
                        this.RaisePropertyChanged("RequestTime");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string Service {
                get {
                    return this.ServiceField;
                }
                set {
                    if ((object.ReferenceEquals(this.ServiceField, value) != true)) {
                        this.ServiceField = value;
                        this.RaisePropertyChanged("Service");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public Queue.Services.Server.Tests.ServerServiceReference.ClientRequestState State {
                get {
                    return this.StateField;
                }
                set {
                    if ((this.StateField.Equals(value) != true)) {
                        this.StateField = value;
                        this.RaisePropertyChanged("State");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public int Subjects {
                get {
                    return this.SubjectsField;
                }
                set {
                    if ((this.SubjectsField.Equals(value) != true)) {
                        this.SubjectsField = value;
                        this.RaisePropertyChanged("Subjects");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public Queue.Services.Server.Tests.ServerServiceReference.ClientRequestType Type {
                get {
                    return this.TypeField;
                }
                set {
                    if ((this.TypeField.Equals(value) != true)) {
                        this.TypeField = value;
                        this.RaisePropertyChanged("Type");
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="QueuePlan.Operator", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
        [System.SerializableAttribute()]
        public partial class Operator : Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntity {
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private System.DateTime HeartbeatField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string NameField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private bool OnlineField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string SurnameField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string WorkplaceField;
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public System.DateTime Heartbeat {
                get {
                    return this.HeartbeatField;
                }
                set {
                    if ((this.HeartbeatField.Equals(value) != true)) {
                        this.HeartbeatField = value;
                        this.RaisePropertyChanged("Heartbeat");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string Name {
                get {
                    return this.NameField;
                }
                set {
                    if ((object.ReferenceEquals(this.NameField, value) != true)) {
                        this.NameField = value;
                        this.RaisePropertyChanged("Name");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public bool Online {
                get {
                    return this.OnlineField;
                }
                set {
                    if ((this.OnlineField.Equals(value) != true)) {
                        this.OnlineField = value;
                        this.RaisePropertyChanged("Online");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string Surname {
                get {
                    return this.SurnameField;
                }
                set {
                    if ((object.ReferenceEquals(this.SurnameField, value) != true)) {
                        this.SurnameField = value;
                        this.RaisePropertyChanged("Surname");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string Workplace {
                get {
                    return this.WorkplaceField;
                }
                set {
                    if ((object.ReferenceEquals(this.WorkplaceField, value) != true)) {
                        this.WorkplaceField = value;
                        this.RaisePropertyChanged("Workplace");
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="QueuePlan.NotDistributedClientRequest", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
        [System.SerializableAttribute()]
        public partial class NotDistributedClientRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
            
            [System.NonSerializedAttribute()]
            private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private Queue.Services.Server.Tests.ServerServiceReference.QueuePlan.ClientRequest ClientRequestField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string ReasonField;
            
            public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
                get {
                    return this.extensionDataField;
                }
                set {
                    this.extensionDataField = value;
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public Queue.Services.Server.Tests.ServerServiceReference.QueuePlan.ClientRequest ClientRequest {
                get {
                    return this.ClientRequestField;
                }
                set {
                    if ((object.ReferenceEquals(this.ClientRequestField, value) != true)) {
                        this.ClientRequestField = value;
                        this.RaisePropertyChanged("ClientRequest");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string Reason {
                get {
                    return this.ReasonField;
                }
                set {
                    if ((object.ReferenceEquals(this.ReasonField, value) != true)) {
                        this.ReasonField = value;
                        this.RaisePropertyChanged("Reason");
                    }
                }
            }
            
            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
            
            protected void RaisePropertyChanged(string propertyName) {
                System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
                if ((propertyChanged != null)) {
                    propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="QueuePlan.OperatorPlan", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
        [System.SerializableAttribute()]
        public partial class OperatorPlan : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
            
            [System.NonSerializedAttribute()]
            private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private Queue.Services.Server.Tests.ServerServiceReference.QueuePlan.ClientRequestPlan[] ClientRequestPlansField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private Queue.Services.Server.Tests.ServerServiceReference.QueuePlan.Operator OperatorField;
            
            public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
                get {
                    return this.extensionDataField;
                }
                set {
                    this.extensionDataField = value;
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public Queue.Services.Server.Tests.ServerServiceReference.QueuePlan.ClientRequestPlan[] ClientRequestPlans {
                get {
                    return this.ClientRequestPlansField;
                }
                set {
                    if ((object.ReferenceEquals(this.ClientRequestPlansField, value) != true)) {
                        this.ClientRequestPlansField = value;
                        this.RaisePropertyChanged("ClientRequestPlans");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public Queue.Services.Server.Tests.ServerServiceReference.QueuePlan.Operator Operator {
                get {
                    return this.OperatorField;
                }
                set {
                    if ((object.ReferenceEquals(this.OperatorField, value) != true)) {
                        this.OperatorField = value;
                        this.RaisePropertyChanged("Operator");
                    }
                }
            }
            
            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
            
            protected void RaisePropertyChanged(string propertyName) {
                System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
                if ((propertyChanged != null)) {
                    propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="QueuePlan.ClientRequestPlan", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
        [System.SerializableAttribute()]
        public partial class ClientRequestPlan : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
            
            [System.NonSerializedAttribute()]
            private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private Queue.Services.Server.Tests.ServerServiceReference.QueuePlan.ClientRequest ClientRequestField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private System.TimeSpan FinishTimeField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private System.TimeSpan StartTimeField;
            
            public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
                get {
                    return this.extensionDataField;
                }
                set {
                    this.extensionDataField = value;
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public Queue.Services.Server.Tests.ServerServiceReference.QueuePlan.ClientRequest ClientRequest {
                get {
                    return this.ClientRequestField;
                }
                set {
                    if ((object.ReferenceEquals(this.ClientRequestField, value) != true)) {
                        this.ClientRequestField = value;
                        this.RaisePropertyChanged("ClientRequest");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public System.TimeSpan FinishTime {
                get {
                    return this.FinishTimeField;
                }
                set {
                    if ((this.FinishTimeField.Equals(value) != true)) {
                        this.FinishTimeField = value;
                        this.RaisePropertyChanged("FinishTime");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public System.TimeSpan StartTime {
                get {
                    return this.StartTimeField;
                }
                set {
                    if ((this.StartTimeField.Equals(value) != true)) {
                        this.StartTimeField = value;
                        this.RaisePropertyChanged("StartTime");
                    }
                }
            }
            
            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
            
            protected void RaisePropertyChanged(string propertyName) {
                System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
                if ((propertyChanged != null)) {
                    propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperatorInterruption", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class OperatorInterruption : Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DayOfWeek DayOfWeekField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan FinishTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.Operator OperatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan StartTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TargetDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.OperatorInterruptionType TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DayOfWeek DayOfWeek {
            get {
                return this.DayOfWeekField;
            }
            set {
                if ((this.DayOfWeekField.Equals(value) != true)) {
                    this.DayOfWeekField = value;
                    this.RaisePropertyChanged("DayOfWeek");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan FinishTime {
            get {
                return this.FinishTimeField;
            }
            set {
                if ((this.FinishTimeField.Equals(value) != true)) {
                    this.FinishTimeField = value;
                    this.RaisePropertyChanged("FinishTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.Operator Operator {
            get {
                return this.OperatorField;
            }
            set {
                if ((object.ReferenceEquals(this.OperatorField, value) != true)) {
                    this.OperatorField = value;
                    this.RaisePropertyChanged("Operator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TargetDate {
            get {
                return this.TargetDateField;
            }
            set {
                if ((this.TargetDateField.Equals(value) != true)) {
                    this.TargetDateField = value;
                    this.RaisePropertyChanged("TargetDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.OperatorInterruptionType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Office", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class Office : Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EndpointField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid SessionIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Endpoint {
            get {
                return this.EndpointField;
            }
            set {
                if ((object.ReferenceEquals(this.EndpointField, value) != true)) {
                    this.EndpointField = value;
                    this.RaisePropertyChanged("Endpoint");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SessionId {
            get {
                return this.SessionIdField;
            }
            set {
                if ((this.SessionIdField.Equals(value) != true)) {
                    this.SessionIdField = value;
                    this.RaisePropertyChanged("SessionId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Service", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class Service : Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan ClientCallDelayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ClientRequireField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.ClientRequestRegistrator EarlyRegistratorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float FontSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPlanSubjectsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsUseTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LinkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.ClientRequestRegistrator LiveRegistratorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxClientRecallsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxEarlyDaysField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxSubjectsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.ServiceGroup ServiceGroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SortIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan TimeIntervalRoundingField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan ClientCallDelay {
            get {
                return this.ClientCallDelayField;
            }
            set {
                if ((this.ClientCallDelayField.Equals(value) != true)) {
                    this.ClientCallDelayField = value;
                    this.RaisePropertyChanged("ClientCallDelay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ClientRequire {
            get {
                return this.ClientRequireField;
            }
            set {
                if ((this.ClientRequireField.Equals(value) != true)) {
                    this.ClientRequireField = value;
                    this.RaisePropertyChanged("ClientRequire");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Color {
            get {
                return this.ColorField;
            }
            set {
                if ((object.ReferenceEquals(this.ColorField, value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequestRegistrator EarlyRegistrator {
            get {
                return this.EarlyRegistratorField;
            }
            set {
                if ((this.EarlyRegistratorField.Equals(value) != true)) {
                    this.EarlyRegistratorField = value;
                    this.RaisePropertyChanged("EarlyRegistrator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float FontSize {
            get {
                return this.FontSizeField;
            }
            set {
                if ((this.FontSizeField.Equals(value) != true)) {
                    this.FontSizeField = value;
                    this.RaisePropertyChanged("FontSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPlanSubjects {
            get {
                return this.IsPlanSubjectsField;
            }
            set {
                if ((this.IsPlanSubjectsField.Equals(value) != true)) {
                    this.IsPlanSubjectsField = value;
                    this.RaisePropertyChanged("IsPlanSubjects");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsUseType {
            get {
                return this.IsUseTypeField;
            }
            set {
                if ((this.IsUseTypeField.Equals(value) != true)) {
                    this.IsUseTypeField = value;
                    this.RaisePropertyChanged("IsUseType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Link {
            get {
                return this.LinkField;
            }
            set {
                if ((object.ReferenceEquals(this.LinkField, value) != true)) {
                    this.LinkField = value;
                    this.RaisePropertyChanged("Link");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequestRegistrator LiveRegistrator {
            get {
                return this.LiveRegistratorField;
            }
            set {
                if ((this.LiveRegistratorField.Equals(value) != true)) {
                    this.LiveRegistratorField = value;
                    this.RaisePropertyChanged("LiveRegistrator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxClientRecalls {
            get {
                return this.MaxClientRecallsField;
            }
            set {
                if ((this.MaxClientRecallsField.Equals(value) != true)) {
                    this.MaxClientRecallsField = value;
                    this.RaisePropertyChanged("MaxClientRecalls");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxEarlyDays {
            get {
                return this.MaxEarlyDaysField;
            }
            set {
                if ((this.MaxEarlyDaysField.Equals(value) != true)) {
                    this.MaxEarlyDaysField = value;
                    this.RaisePropertyChanged("MaxEarlyDays");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxSubjects {
            get {
                return this.MaxSubjectsField;
            }
            set {
                if ((this.MaxSubjectsField.Equals(value) != true)) {
                    this.MaxSubjectsField = value;
                    this.RaisePropertyChanged("MaxSubjects");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceGroup ServiceGroup {
            get {
                return this.ServiceGroupField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceGroupField, value) != true)) {
                    this.ServiceGroupField = value;
                    this.RaisePropertyChanged("ServiceGroup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SortId {
            get {
                return this.SortIdField;
            }
            set {
                if ((this.SortIdField.Equals(value) != true)) {
                    this.SortIdField = value;
                    this.RaisePropertyChanged("SortId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tags {
            get {
                return this.TagsField;
            }
            set {
                if ((object.ReferenceEquals(this.TagsField, value) != true)) {
                    this.TagsField = value;
                    this.RaisePropertyChanged("Tags");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan TimeIntervalRounding {
            get {
                return this.TimeIntervalRoundingField;
            }
            set {
                if ((this.TimeIntervalRoundingField.Equals(value) != true)) {
                    this.TimeIntervalRoundingField = value;
                    this.RaisePropertyChanged("TimeIntervalRounding");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientRequestRegistrator", Namespace="http://schemas.datacontract.org/2004/07/Queue.Model.Common")]
    public enum ClientRequestRegistrator : long {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Terminal = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Manager = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Portal = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConfigType", Namespace="http://schemas.datacontract.org/2004/07/Queue.Model.Common")]
    public enum ConfigType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Default = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Design = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Coupon = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SMTP = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Portal = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Media = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Terminal = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        QueuePlan = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Notification = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Scheme = 1000,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceRenderingMode", Namespace="http://schemas.datacontract.org/2004/07/Queue.Model.Common")]
    public enum ServiceRenderingMode : long {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LiveRequests = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EarlyRequests = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AllRequests = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="AdministratorPermissions", Namespace="http://schemas.datacontract.org/2004/07/Queue.Model.Common")]
    public enum AdministratorPermissions : long {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Config = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Clients = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ClientsRequests = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Users = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DefaultSchedule = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Workplaces = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Services = 64,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CurrentSchedule = 128,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        QueuePlan = 256,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Reports = 512,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Offices = 1024,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AdditionalServices = 2048,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OperatorInterruptions = 4096,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkplaceModificator", Namespace="http://schemas.datacontract.org/2004/07/Queue.Model.Common")]
    public enum WorkplaceModificator : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        A_EN = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        B_EN = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        C_EN = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        D_EN = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        E_EN = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        F_EN = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        G_EN = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        H_EN = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CHAR1 = 101,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CHAR2 = 102,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CHAR3 = 103,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CHAR4 = 104,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CHAR5 = 105,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CHAR6 = 106,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CHAR7 = 107,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CHAR8 = 108,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkplaceType", Namespace="http://schemas.datacontract.org/2004/07/Queue.Model.Common")]
    public enum WorkplaceType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Window = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Cabinet = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Room = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Box = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Department = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Area = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PayDesk = 6,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceType", Namespace="http://schemas.datacontract.org/2004/07/Queue.Model.Common")]
    public enum ServiceType : long {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Consultation = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ReceiptOfDocuments = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ReleaseOfDocuments = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientRequestState", Namespace="http://schemas.datacontract.org/2004/07/Queue.Model.Common")]
    public enum ClientRequestState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Waiting = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Calling = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Absence = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Rendering = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Postponed = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Rendered = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Canceled = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Redirected = 7,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientRequestType", Namespace="http://schemas.datacontract.org/2004/07/Queue.Model.Common")]
    public enum ClientRequestType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Live = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Early = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventType", Namespace="http://schemas.datacontract.org/2004/07/Queue.Model.Common")]
    public enum EventType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Info = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Warning = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperatorInterruptionType", Namespace="http://schemas.datacontract.org/2004/07/Queue.Model.Common")]
    public enum OperatorInterruptionType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Weekday = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TargetDate = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Service))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Entity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceGroup))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntityLink[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntityLink))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceStep[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceRendering[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceRendering))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Operator))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.User))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Administrator))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Workplace))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Schedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.DefaultWeekdaySchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.DefaultExceptionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceExceptionSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceSchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceWeekdaySchedule))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceParameter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceParameterText))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceParameterNumber))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceParameterOptions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceParameter[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.DefaultConfig))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Config))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.DesignConfig))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.CouponConfig))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.SMTPConfig))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.PortalConfig))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.MediaConfig))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.MediaConfigFile[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.MediaConfigFile))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.TerminalConfig))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.NotificationConfig))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.QueuePlanMetric))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Metric))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.QueuePlanServiceMetric))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Client))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Client[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestFilter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ClientRequest[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ClientRequest))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestEvent[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestEvent))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Event))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.UserEvent))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestCoupon))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestParameter[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestParameter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Workplace[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestAdditionalService[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestAdditionalService))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.AdditionalService))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestPlan[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestPlan))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.QueuePlan))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.QueuePlan.NotDistributedClientRequest[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.QueuePlan.NotDistributedClientRequest))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.QueuePlan.ClientRequest))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.QueuePlan.OperatorPlan[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.QueuePlan.OperatorPlan))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.QueuePlan.ClientRequestPlan[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.QueuePlan.ClientRequestPlan))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.QueuePlan.Operator))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceFreeTime))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceGroup[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.User[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.OperatorInterruptionFilter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.OperatorInterruption[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.OperatorInterruption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Office[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Office))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.AdditionalService[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Operator[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.Service[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestRegistrator))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceRenderingMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.AdministratorPermissions))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.WorkplaceModificator))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.WorkplaceType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceRatingReportSettings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.RatingReportSettings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ReportDetailLevel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.OperatorRatingReportSettings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.AdditionalServicesRatingReportSettings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ConfigType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.EventType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.UserRole))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.OperatorInterruptionType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DayOfWeek))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Guid[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<System.Guid, object>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<Queue.Services.Server.Tests.ServerServiceReference.Operator, Queue.Services.Server.Tests.ServerServiceReference.ClientRequestPlan>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(string[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.TimeSpan[]))]
    public partial class ObjectNotFoundFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object ObjectIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object ObjectId {
            get {
                return this.ObjectIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ObjectIdField, value) != true)) {
                    this.ObjectIdField = value;
                    this.RaisePropertyChanged("ObjectId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientRequestFilter", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class ClientRequestFilter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ClientIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsClientField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsOperatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsRequestDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsServiceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid OperatorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QueryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime RequestDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ServiceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.ClientRequestState StateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ClientId {
            get {
                return this.ClientIdField;
            }
            set {
                if ((this.ClientIdField.Equals(value) != true)) {
                    this.ClientIdField = value;
                    this.RaisePropertyChanged("ClientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsClient {
            get {
                return this.IsClientField;
            }
            set {
                if ((this.IsClientField.Equals(value) != true)) {
                    this.IsClientField = value;
                    this.RaisePropertyChanged("IsClient");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOperator {
            get {
                return this.IsOperatorField;
            }
            set {
                if ((this.IsOperatorField.Equals(value) != true)) {
                    this.IsOperatorField = value;
                    this.RaisePropertyChanged("IsOperator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRequestDate {
            get {
                return this.IsRequestDateField;
            }
            set {
                if ((this.IsRequestDateField.Equals(value) != true)) {
                    this.IsRequestDateField = value;
                    this.RaisePropertyChanged("IsRequestDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsService {
            get {
                return this.IsServiceField;
            }
            set {
                if ((this.IsServiceField.Equals(value) != true)) {
                    this.IsServiceField = value;
                    this.RaisePropertyChanged("IsService");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsState {
            get {
                return this.IsStateField;
            }
            set {
                if ((this.IsStateField.Equals(value) != true)) {
                    this.IsStateField = value;
                    this.RaisePropertyChanged("IsState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid OperatorId {
            get {
                return this.OperatorIdField;
            }
            set {
                if ((this.OperatorIdField.Equals(value) != true)) {
                    this.OperatorIdField = value;
                    this.RaisePropertyChanged("OperatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Query {
            get {
                return this.QueryField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryField, value) != true)) {
                    this.QueryField = value;
                    this.RaisePropertyChanged("Query");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime RequestDate {
            get {
                return this.RequestDateField;
            }
            set {
                if ((this.RequestDateField.Equals(value) != true)) {
                    this.RequestDateField = value;
                    this.RaisePropertyChanged("RequestDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ServiceId {
            get {
                return this.ServiceIdField;
            }
            set {
                if ((this.ServiceIdField.Equals(value) != true)) {
                    this.ServiceIdField = value;
                    this.RaisePropertyChanged("ServiceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequestState State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientRequestCoupon", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class ClientRequestCoupon : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.Client ClientField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasPlannedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsTodayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.ClientRequestParameter[] ParametersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QueueNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime RequestDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan RequestTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.Service ServiceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SubjectsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan WaitingTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.Workplace[] WorkplacesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.Client Client {
            get {
                return this.ClientField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientField, value) != true)) {
                    this.ClientField = value;
                    this.RaisePropertyChanged("Client");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDate {
            get {
                return this.CreateDateField;
            }
            set {
                if ((this.CreateDateField.Equals(value) != true)) {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasPlanned {
            get {
                return this.HasPlannedField;
            }
            set {
                if ((this.HasPlannedField.Equals(value) != true)) {
                    this.HasPlannedField = value;
                    this.RaisePropertyChanged("HasPlanned");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsToday {
            get {
                return this.IsTodayField;
            }
            set {
                if ((this.IsTodayField.Equals(value) != true)) {
                    this.IsTodayField = value;
                    this.RaisePropertyChanged("IsToday");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Number {
            get {
                return this.NumberField;
            }
            set {
                if ((this.NumberField.Equals(value) != true)) {
                    this.NumberField = value;
                    this.RaisePropertyChanged("Number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequestParameter[] Parameters {
            get {
                return this.ParametersField;
            }
            set {
                if ((object.ReferenceEquals(this.ParametersField, value) != true)) {
                    this.ParametersField = value;
                    this.RaisePropertyChanged("Parameters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QueueName {
            get {
                return this.QueueNameField;
            }
            set {
                if ((object.ReferenceEquals(this.QueueNameField, value) != true)) {
                    this.QueueNameField = value;
                    this.RaisePropertyChanged("QueueName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime RequestDate {
            get {
                return this.RequestDateField;
            }
            set {
                if ((this.RequestDateField.Equals(value) != true)) {
                    this.RequestDateField = value;
                    this.RaisePropertyChanged("RequestDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan RequestTime {
            get {
                return this.RequestTimeField;
            }
            set {
                if ((this.RequestTimeField.Equals(value) != true)) {
                    this.RequestTimeField = value;
                    this.RaisePropertyChanged("RequestTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.Service Service {
            get {
                return this.ServiceField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceField, value) != true)) {
                    this.ServiceField = value;
                    this.RaisePropertyChanged("Service");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Subjects {
            get {
                return this.SubjectsField;
            }
            set {
                if ((this.SubjectsField.Equals(value) != true)) {
                    this.SubjectsField = value;
                    this.RaisePropertyChanged("Subjects");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan WaitingTime {
            get {
                return this.WaitingTimeField;
            }
            set {
                if ((this.WaitingTimeField.Equals(value) != true)) {
                    this.WaitingTimeField = value;
                    this.RaisePropertyChanged("WaitingTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.Workplace[] Workplaces {
            get {
                return this.WorkplacesField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkplacesField, value) != true)) {
                    this.WorkplacesField = value;
                    this.RaisePropertyChanged("Workplaces");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientRequestPlan", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class ClientRequestPlan : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.ClientRequest ClientRequestField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan FinishTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan StartTimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequest ClientRequest {
            get {
                return this.ClientRequestField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientRequestField, value) != true)) {
                    this.ClientRequestField = value;
                    this.RaisePropertyChanged("ClientRequest");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan FinishTime {
            get {
                return this.FinishTimeField;
            }
            set {
                if ((this.FinishTimeField.Equals(value) != true)) {
                    this.FinishTimeField = value;
                    this.RaisePropertyChanged("FinishTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceFreeTime", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class ServiceFreeTime : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FreeTimeIntervalsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ReportField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.Schedule ScheduleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.Service ServiceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan[] TimeIntervalsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FreeTimeIntervals {
            get {
                return this.FreeTimeIntervalsField;
            }
            set {
                if ((this.FreeTimeIntervalsField.Equals(value) != true)) {
                    this.FreeTimeIntervalsField = value;
                    this.RaisePropertyChanged("FreeTimeIntervals");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Report {
            get {
                return this.ReportField;
            }
            set {
                if ((object.ReferenceEquals(this.ReportField, value) != true)) {
                    this.ReportField = value;
                    this.RaisePropertyChanged("Report");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.Schedule Schedule {
            get {
                return this.ScheduleField;
            }
            set {
                if ((object.ReferenceEquals(this.ScheduleField, value) != true)) {
                    this.ScheduleField = value;
                    this.RaisePropertyChanged("Schedule");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.Service Service {
            get {
                return this.ServiceField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceField, value) != true)) {
                    this.ServiceField = value;
                    this.RaisePropertyChanged("Service");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan[] TimeIntervals {
            get {
                return this.TimeIntervalsField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeIntervalsField, value) != true)) {
                    this.TimeIntervalsField = value;
                    this.RaisePropertyChanged("TimeIntervals");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperatorInterruptionFilter", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class OperatorInterruptionFilter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsOperatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid OperatorIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOperator {
            get {
                return this.IsOperatorField;
            }
            set {
                if ((this.IsOperatorField.Equals(value) != true)) {
                    this.IsOperatorField = value;
                    this.RaisePropertyChanged("IsOperator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid OperatorId {
            get {
                return this.OperatorIdField;
            }
            set {
                if ((this.OperatorIdField.Equals(value) != true)) {
                    this.OperatorIdField = value;
                    this.RaisePropertyChanged("OperatorId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceRatingReportSettings", Namespace="http://schemas.datacontract.org/2004/07/Queue.Model.Common")]
    [System.SerializableAttribute()]
    public partial class ServiceRatingReportSettings : Queue.Services.Server.Tests.ServerServiceReference.RatingReportSettings {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsServiceTypesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] ServicesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsServiceTypes {
            get {
                return this.IsServiceTypesField;
            }
            set {
                if ((this.IsServiceTypesField.Equals(value) != true)) {
                    this.IsServiceTypesField = value;
                    this.RaisePropertyChanged("IsServiceTypes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] Services {
            get {
                return this.ServicesField;
            }
            set {
                if ((object.ReferenceEquals(this.ServicesField, value) != true)) {
                    this.ServicesField = value;
                    this.RaisePropertyChanged("Services");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RatingReportSettings", Namespace="http://schemas.datacontract.org/2004/07/Queue.Model.Common")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.OperatorRatingReportSettings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.AdditionalServicesRatingReportSettings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ServiceRatingReportSettings))]
    public partial class RatingReportSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Queue.Services.Server.Tests.ServerServiceReference.ReportDetailLevel DetailLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FinishDayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FinishMonthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FinishYearField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StartDayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StartMonthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StartYearField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TargetDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Queue.Services.Server.Tests.ServerServiceReference.ReportDetailLevel DetailLevel {
            get {
                return this.DetailLevelField;
            }
            set {
                if ((this.DetailLevelField.Equals(value) != true)) {
                    this.DetailLevelField = value;
                    this.RaisePropertyChanged("DetailLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FinishDay {
            get {
                return this.FinishDayField;
            }
            set {
                if ((this.FinishDayField.Equals(value) != true)) {
                    this.FinishDayField = value;
                    this.RaisePropertyChanged("FinishDay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FinishMonth {
            get {
                return this.FinishMonthField;
            }
            set {
                if ((this.FinishMonthField.Equals(value) != true)) {
                    this.FinishMonthField = value;
                    this.RaisePropertyChanged("FinishMonth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FinishYear {
            get {
                return this.FinishYearField;
            }
            set {
                if ((this.FinishYearField.Equals(value) != true)) {
                    this.FinishYearField = value;
                    this.RaisePropertyChanged("FinishYear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StartDay {
            get {
                return this.StartDayField;
            }
            set {
                if ((this.StartDayField.Equals(value) != true)) {
                    this.StartDayField = value;
                    this.RaisePropertyChanged("StartDay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StartMonth {
            get {
                return this.StartMonthField;
            }
            set {
                if ((this.StartMonthField.Equals(value) != true)) {
                    this.StartMonthField = value;
                    this.RaisePropertyChanged("StartMonth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StartYear {
            get {
                return this.StartYearField;
            }
            set {
                if ((this.StartYearField.Equals(value) != true)) {
                    this.StartYearField = value;
                    this.RaisePropertyChanged("StartYear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TargetDate {
            get {
                return this.TargetDateField;
            }
            set {
                if ((this.TargetDateField.Equals(value) != true)) {
                    this.TargetDateField = value;
                    this.RaisePropertyChanged("TargetDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReportDetailLevel", Namespace="http://schemas.datacontract.org/2004/07/Queue.Model.Common")]
    public enum ReportDetailLevel : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Year = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Month = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Day = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Hour = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperatorRatingReportSettings", Namespace="http://schemas.datacontract.org/2004/07/Queue.Model.Common")]
    [System.SerializableAttribute()]
    public partial class OperatorRatingReportSettings : Queue.Services.Server.Tests.ServerServiceReference.RatingReportSettings {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] OperatorsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] Operators {
            get {
                return this.OperatorsField;
            }
            set {
                if ((object.ReferenceEquals(this.OperatorsField, value) != true)) {
                    this.OperatorsField = value;
                    this.RaisePropertyChanged("Operators");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AdditionalServicesRatingReportSettings", Namespace="http://schemas.datacontract.org/2004/07/Queue.Model.Common")]
    [System.SerializableAttribute()]
    public partial class AdditionalServicesRatingReportSettings : Queue.Services.Server.Tests.ServerServiceReference.RatingReportSettings {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] ServicesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] Services {
            get {
                return this.ServicesField;
            }
            set {
                if ((object.ReferenceEquals(this.ServicesField, value) != true)) {
                    this.ServicesField = value;
                    this.RaisePropertyChanged("Services");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserRole", Namespace="http://schemas.datacontract.org/2004/07/Queue.Model.Common")]
    public enum UserRole : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Administrator = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Operator = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServerServiceReference.IServerHttpService")]
    public interface IServerHttpService {
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения EditServiceRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditService", ReplyAction="http://queue.name/server-service/IServerService/EditServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/EditServiceObjectNotFoundFaultFau" +
            "lt", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.EditServiceResponse EditService(Queue.Services.Server.Tests.ServerServiceReference.EditServiceRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditService", ReplyAction="http://queue.name/server-service/IServerService/EditServiceResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditServiceResponse> EditServiceAsync(Queue.Services.Server.Tests.ServerServiceReference.EditServiceRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения MoveServiceRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/MoveService", ReplyAction="http://queue.name/server-service/IServerService/MoveServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/MoveServiceObjectNotFoundFaultFau" +
            "lt", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.MoveServiceResponse MoveService(Queue.Services.Server.Tests.ServerServiceReference.MoveServiceRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/MoveService", ReplyAction="http://queue.name/server-service/IServerService/MoveServiceResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.MoveServiceResponse> MoveServiceAsync(Queue.Services.Server.Tests.ServerServiceReference.MoveServiceRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения DeleteServiceRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/DeleteService", ReplyAction="http://queue.name/server-service/IServerService/DeleteServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/DeleteServiceObjectNotFoundFaultF" +
            "ault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceResponse DeleteService(Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/DeleteService", ReplyAction="http://queue.name/server-service/IServerService/DeleteServiceResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceResponse> DeleteServiceAsync(Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения ServiceUpRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/ServiceUp", ReplyAction="http://queue.name/server-service/IServerService/ServiceUpResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/ServiceUpObjectNotFoundFaultFault" +
            "", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.ServiceUpResponse ServiceUp(Queue.Services.Server.Tests.ServerServiceReference.ServiceUpRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/ServiceUp", ReplyAction="http://queue.name/server-service/IServerService/ServiceUpResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.ServiceUpResponse> ServiceUpAsync(Queue.Services.Server.Tests.ServerServiceReference.ServiceUpRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения ServiceDownRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/ServiceDown", ReplyAction="http://queue.name/server-service/IServerService/ServiceDownResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/ServiceDownObjectNotFoundFaultFau" +
            "lt", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.ServiceDownResponse ServiceDown(Queue.Services.Server.Tests.ServerServiceReference.ServiceDownRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/ServiceDown", ReplyAction="http://queue.name/server-service/IServerService/ServiceDownResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.ServiceDownResponse> ServiceDownAsync(Queue.Services.Server.Tests.ServerServiceReference.ServiceDownRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetServiceStepLinksRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetServiceStepLinks", ReplyAction="http://queue.name/server-service/IServerService/GetServiceStepLinksResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepLinksResponse GetServiceStepLinks(Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepLinksRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetServiceStepLinks", ReplyAction="http://queue.name/server-service/IServerService/GetServiceStepLinksResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepLinksResponse> GetServiceStepLinksAsync(Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepLinksRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetServiceStepsRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetServiceSteps", ReplyAction="http://queue.name/server-service/IServerService/GetServiceStepsResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepsResponse GetServiceSteps(Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetServiceSteps", ReplyAction="http://queue.name/server-service/IServerService/GetServiceStepsResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepsResponse> GetServiceStepsAsync(Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepsRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetServiceStepRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetServiceStep", ReplyAction="http://queue.name/server-service/IServerService/GetServiceStepResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepResponse GetServiceStep(Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetServiceStep", ReplyAction="http://queue.name/server-service/IServerService/GetServiceStepResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepResponse> GetServiceStepAsync(Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения EditServiceStepRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditServiceStep", ReplyAction="http://queue.name/server-service/IServerService/EditServiceStepResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/EditServiceStepObjectNotFoundFaul" +
            "tFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.EditServiceStepResponse EditServiceStep(Queue.Services.Server.Tests.ServerServiceReference.EditServiceStepRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditServiceStep", ReplyAction="http://queue.name/server-service/IServerService/EditServiceStepResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditServiceStepResponse> EditServiceStepAsync(Queue.Services.Server.Tests.ServerServiceReference.EditServiceStepRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения DeleteServiceStepRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/DeleteServiceStep", ReplyAction="http://queue.name/server-service/IServerService/DeleteServiceStepResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/DeleteServiceStepObjectNotFoundFa" +
            "ultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceStepResponse DeleteServiceStep(Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceStepRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/DeleteServiceStep", ReplyAction="http://queue.name/server-service/IServerService/DeleteServiceStepResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceStepResponse> DeleteServiceStepAsync(Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceStepRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения ServiceStepUpRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/ServiceStepUp", ReplyAction="http://queue.name/server-service/IServerService/ServiceStepUpResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/ServiceStepUpObjectNotFoundFaultF" +
            "ault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.ServiceStepUpResponse ServiceStepUp(Queue.Services.Server.Tests.ServerServiceReference.ServiceStepUpRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/ServiceStepUp", ReplyAction="http://queue.name/server-service/IServerService/ServiceStepUpResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.ServiceStepUpResponse> ServiceStepUpAsync(Queue.Services.Server.Tests.ServerServiceReference.ServiceStepUpRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения ServiceStepDownRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/ServiceStepDown", ReplyAction="http://queue.name/server-service/IServerService/ServiceStepDownResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/ServiceStepDownObjectNotFoundFaul" +
            "tFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.ServiceStepDownResponse ServiceStepDown(Queue.Services.Server.Tests.ServerServiceReference.ServiceStepDownRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/ServiceStepDown", ReplyAction="http://queue.name/server-service/IServerService/ServiceStepDownResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.ServiceStepDownResponse> ServiceStepDownAsync(Queue.Services.Server.Tests.ServerServiceReference.ServiceStepDownRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetServiceRenderingsRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetServiceRenderings", ReplyAction="http://queue.name/server-service/IServerService/GetServiceRenderingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/GetServiceRenderingsObjectNotFoun" +
            "dFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.GetServiceRenderingsResponse GetServiceRenderings(Queue.Services.Server.Tests.ServerServiceReference.GetServiceRenderingsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetServiceRenderings", ReplyAction="http://queue.name/server-service/IServerService/GetServiceRenderingsResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceRenderingsResponse> GetServiceRenderingsAsync(Queue.Services.Server.Tests.ServerServiceReference.GetServiceRenderingsRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetServiceRenderingRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetServiceRendering", ReplyAction="http://queue.name/server-service/IServerService/GetServiceRenderingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/GetServiceRenderingObjectNotFound" +
            "FaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.GetServiceRenderingResponse GetServiceRendering(Queue.Services.Server.Tests.ServerServiceReference.GetServiceRenderingRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetServiceRendering", ReplyAction="http://queue.name/server-service/IServerService/GetServiceRenderingResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceRenderingResponse> GetServiceRenderingAsync(Queue.Services.Server.Tests.ServerServiceReference.GetServiceRenderingRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения EditServiceRenderingRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditServiceRendering", ReplyAction="http://queue.name/server-service/IServerService/EditServiceRenderingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/EditServiceRenderingObjectNotFoun" +
            "dFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.EditServiceRenderingResponse EditServiceRendering(Queue.Services.Server.Tests.ServerServiceReference.EditServiceRenderingRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditServiceRendering", ReplyAction="http://queue.name/server-service/IServerService/EditServiceRenderingResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditServiceRenderingResponse> EditServiceRenderingAsync(Queue.Services.Server.Tests.ServerServiceReference.EditServiceRenderingRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения DeleteServiceRenderingRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/DeleteServiceRendering", ReplyAction="http://queue.name/server-service/IServerService/DeleteServiceRenderingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/DeleteServiceRenderingObjectNotFo" +
            "undFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceRenderingResponse DeleteServiceRendering(Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceRenderingRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/DeleteServiceRendering", ReplyAction="http://queue.name/server-service/IServerService/DeleteServiceRenderingResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceRenderingResponse> DeleteServiceRenderingAsync(Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceRenderingRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetDefaultWeekdayScheduleRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetDefaultWeekdaySchedule", ReplyAction="http://queue.name/server-service/IServerService/GetDefaultWeekdayScheduleResponse" +
            "")]
        Queue.Services.Server.Tests.ServerServiceReference.GetDefaultWeekdayScheduleResponse GetDefaultWeekdaySchedule(Queue.Services.Server.Tests.ServerServiceReference.GetDefaultWeekdayScheduleRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetDefaultWeekdaySchedule", ReplyAction="http://queue.name/server-service/IServerService/GetDefaultWeekdayScheduleResponse" +
            "")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetDefaultWeekdayScheduleResponse> GetDefaultWeekdayScheduleAsync(Queue.Services.Server.Tests.ServerServiceReference.GetDefaultWeekdayScheduleRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetDefaultExceptionScheduleRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetDefaultExceptionSchedule", ReplyAction="http://queue.name/server-service/IServerService/GetDefaultExceptionScheduleRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/GetDefaultExceptionScheduleObject" +
            "NotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.GetDefaultExceptionScheduleResponse GetDefaultExceptionSchedule(Queue.Services.Server.Tests.ServerServiceReference.GetDefaultExceptionScheduleRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetDefaultExceptionSchedule", ReplyAction="http://queue.name/server-service/IServerService/GetDefaultExceptionScheduleRespon" +
            "se")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetDefaultExceptionScheduleResponse> GetDefaultExceptionScheduleAsync(Queue.Services.Server.Tests.ServerServiceReference.GetDefaultExceptionScheduleRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения AddDefaultExceptionScheduleRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/AddDefaultExceptionSchedule", ReplyAction="http://queue.name/server-service/IServerService/AddDefaultExceptionScheduleRespon" +
            "se")]
        Queue.Services.Server.Tests.ServerServiceReference.AddDefaultExceptionScheduleResponse AddDefaultExceptionSchedule(Queue.Services.Server.Tests.ServerServiceReference.AddDefaultExceptionScheduleRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/AddDefaultExceptionSchedule", ReplyAction="http://queue.name/server-service/IServerService/AddDefaultExceptionScheduleRespon" +
            "se")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.AddDefaultExceptionScheduleResponse> AddDefaultExceptionScheduleAsync(Queue.Services.Server.Tests.ServerServiceReference.AddDefaultExceptionScheduleRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetServiceWeekdayScheduleRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetServiceWeekdaySchedule", ReplyAction="http://queue.name/server-service/IServerService/GetServiceWeekdayScheduleResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/GetServiceWeekdayScheduleObjectNo" +
            "tFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.GetServiceWeekdayScheduleResponse GetServiceWeekdaySchedule(Queue.Services.Server.Tests.ServerServiceReference.GetServiceWeekdayScheduleRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetServiceWeekdaySchedule", ReplyAction="http://queue.name/server-service/IServerService/GetServiceWeekdayScheduleResponse" +
            "")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceWeekdayScheduleResponse> GetServiceWeekdayScheduleAsync(Queue.Services.Server.Tests.ServerServiceReference.GetServiceWeekdayScheduleRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения AddServiceWeekdayScheduleRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/AddServiceWeekdaySchedule", ReplyAction="http://queue.name/server-service/IServerService/AddServiceWeekdayScheduleResponse" +
            "")]
        Queue.Services.Server.Tests.ServerServiceReference.AddServiceWeekdayScheduleResponse AddServiceWeekdaySchedule(Queue.Services.Server.Tests.ServerServiceReference.AddServiceWeekdayScheduleRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/AddServiceWeekdaySchedule", ReplyAction="http://queue.name/server-service/IServerService/AddServiceWeekdayScheduleResponse" +
            "")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.AddServiceWeekdayScheduleResponse> AddServiceWeekdayScheduleAsync(Queue.Services.Server.Tests.ServerServiceReference.AddServiceWeekdayScheduleRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetServiceExceptionScheduleRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetServiceExceptionSchedule", ReplyAction="http://queue.name/server-service/IServerService/GetServiceExceptionScheduleRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/GetServiceExceptionScheduleObject" +
            "NotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.GetServiceExceptionScheduleResponse GetServiceExceptionSchedule(Queue.Services.Server.Tests.ServerServiceReference.GetServiceExceptionScheduleRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetServiceExceptionSchedule", ReplyAction="http://queue.name/server-service/IServerService/GetServiceExceptionScheduleRespon" +
            "se")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceExceptionScheduleResponse> GetServiceExceptionScheduleAsync(Queue.Services.Server.Tests.ServerServiceReference.GetServiceExceptionScheduleRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения AddServiceExceptionScheduleRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/AddServiceExceptionSchedule", ReplyAction="http://queue.name/server-service/IServerService/AddServiceExceptionScheduleRespon" +
            "se")]
        Queue.Services.Server.Tests.ServerServiceReference.AddServiceExceptionScheduleResponse AddServiceExceptionSchedule(Queue.Services.Server.Tests.ServerServiceReference.AddServiceExceptionScheduleRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/AddServiceExceptionSchedule", ReplyAction="http://queue.name/server-service/IServerService/AddServiceExceptionScheduleRespon" +
            "se")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.AddServiceExceptionScheduleResponse> AddServiceExceptionScheduleAsync(Queue.Services.Server.Tests.ServerServiceReference.AddServiceExceptionScheduleRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetScheduleRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetSchedule", ReplyAction="http://queue.name/server-service/IServerService/GetScheduleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/GetScheduleObjectNotFoundFaultFau" +
            "lt", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.GetScheduleResponse GetSchedule(Queue.Services.Server.Tests.ServerServiceReference.GetScheduleRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetSchedule", ReplyAction="http://queue.name/server-service/IServerService/GetScheduleResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetScheduleResponse> GetScheduleAsync(Queue.Services.Server.Tests.ServerServiceReference.GetScheduleRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения EditScheduleRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditSchedule", ReplyAction="http://queue.name/server-service/IServerService/EditScheduleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/EditScheduleObjectNotFoundFaultFa" +
            "ult", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.EditScheduleResponse EditSchedule(Queue.Services.Server.Tests.ServerServiceReference.EditScheduleRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditSchedule", ReplyAction="http://queue.name/server-service/IServerService/EditScheduleResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditScheduleResponse> EditScheduleAsync(Queue.Services.Server.Tests.ServerServiceReference.EditScheduleRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения DeleteScheduleRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/DeleteSchedule", ReplyAction="http://queue.name/server-service/IServerService/DeleteScheduleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/DeleteScheduleObjectNotFoundFault" +
            "Fault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.DeleteScheduleResponse DeleteSchedule(Queue.Services.Server.Tests.ServerServiceReference.DeleteScheduleRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/DeleteSchedule", ReplyAction="http://queue.name/server-service/IServerService/DeleteScheduleResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteScheduleResponse> DeleteScheduleAsync(Queue.Services.Server.Tests.ServerServiceReference.DeleteScheduleRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetServiceParameterRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetServiceParameter", ReplyAction="http://queue.name/server-service/IServerService/GetServiceParameterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/GetServiceParameterObjectNotFound" +
            "FaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.GetServiceParameterResponse GetServiceParameter(Queue.Services.Server.Tests.ServerServiceReference.GetServiceParameterRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetServiceParameter", ReplyAction="http://queue.name/server-service/IServerService/GetServiceParameterResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceParameterResponse> GetServiceParameterAsync(Queue.Services.Server.Tests.ServerServiceReference.GetServiceParameterRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetServiceParametersRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetServiceParameters", ReplyAction="http://queue.name/server-service/IServerService/GetServiceParametersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/GetServiceParametersObjectNotFoun" +
            "dFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.GetServiceParametersResponse GetServiceParameters(Queue.Services.Server.Tests.ServerServiceReference.GetServiceParametersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetServiceParameters", ReplyAction="http://queue.name/server-service/IServerService/GetServiceParametersResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceParametersResponse> GetServiceParametersAsync(Queue.Services.Server.Tests.ServerServiceReference.GetServiceParametersRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения EditServiceParameterNumberRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditServiceParameterNumber", ReplyAction="http://queue.name/server-service/IServerService/EditServiceParameterNumberRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/EditServiceParameterNumberObjectN" +
            "otFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterNumberResponse EditServiceParameterNumber(Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterNumberRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditServiceParameterNumber", ReplyAction="http://queue.name/server-service/IServerService/EditServiceParameterNumberRespons" +
            "e")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterNumberResponse> EditServiceParameterNumberAsync(Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterNumberRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения EditServiceParameterTextRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditServiceParameterText", ReplyAction="http://queue.name/server-service/IServerService/EditServiceParameterTextResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/EditServiceParameterTextObjectNot" +
            "FoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterTextResponse EditServiceParameterText(Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterTextRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditServiceParameterText", ReplyAction="http://queue.name/server-service/IServerService/EditServiceParameterTextResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterTextResponse> EditServiceParameterTextAsync(Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterTextRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения EditServiceParameterOptionsRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditServiceParameterOptions", ReplyAction="http://queue.name/server-service/IServerService/EditServiceParameterOptionsRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/EditServiceParameterOptionsObject" +
            "NotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterOptionsResponse EditServiceParameterOptions(Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterOptionsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditServiceParameterOptions", ReplyAction="http://queue.name/server-service/IServerService/EditServiceParameterOptionsRespon" +
            "se")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterOptionsResponse> EditServiceParameterOptionsAsync(Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterOptionsRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения DeleteServiceParameterRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/DeleteServiceParameter", ReplyAction="http://queue.name/server-service/IServerService/DeleteServiceParameterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/DeleteServiceParameterObjectNotFo" +
            "undFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceParameterResponse DeleteServiceParameter(Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceParameterRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/DeleteServiceParameter", ReplyAction="http://queue.name/server-service/IServerService/DeleteServiceParameterResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceParameterResponse> DeleteServiceParameterAsync(Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceParameterRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetServiceRatingReportRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetServiceRatingReport", ReplyAction="http://queue.name/server-service/IServerService/GetServiceRatingReportResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.GetServiceRatingReportResponse GetServiceRatingReport(Queue.Services.Server.Tests.ServerServiceReference.GetServiceRatingReportRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetServiceRatingReport", ReplyAction="http://queue.name/server-service/IServerService/GetServiceRatingReportResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceRatingReportResponse> GetServiceRatingReportAsync(Queue.Services.Server.Tests.ServerServiceReference.GetServiceRatingReportRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetOperatorRatingReportRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetOperatorRatingReport", ReplyAction="http://queue.name/server-service/IServerService/GetOperatorRatingReportResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.GetOperatorRatingReportResponse GetOperatorRatingReport(Queue.Services.Server.Tests.ServerServiceReference.GetOperatorRatingReportRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetOperatorRatingReport", ReplyAction="http://queue.name/server-service/IServerService/GetOperatorRatingReportResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetOperatorRatingReportResponse> GetOperatorRatingReportAsync(Queue.Services.Server.Tests.ServerServiceReference.GetOperatorRatingReportRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetAdditinalServicesRatingReportRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetAdditinalServicesRatingReport", ReplyAction="http://queue.name/server-service/IServerService/GetAdditinalServicesRatingReportR" +
            "esponse")]
        Queue.Services.Server.Tests.ServerServiceReference.GetAdditinalServicesRatingReportResponse GetAdditinalServicesRatingReport(Queue.Services.Server.Tests.ServerServiceReference.GetAdditinalServicesRatingReportRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetAdditinalServicesRatingReport", ReplyAction="http://queue.name/server-service/IServerService/GetAdditinalServicesRatingReportR" +
            "esponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetAdditinalServicesRatingReportResponse> GetAdditinalServicesRatingReportAsync(Queue.Services.Server.Tests.ServerServiceReference.GetAdditinalServicesRatingReportRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetExceptionScheduleReportRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetExceptionScheduleReport", ReplyAction="http://queue.name/server-service/IServerService/GetExceptionScheduleReportRespons" +
            "e")]
        Queue.Services.Server.Tests.ServerServiceReference.GetExceptionScheduleReportResponse GetExceptionScheduleReport(Queue.Services.Server.Tests.ServerServiceReference.GetExceptionScheduleReportRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetExceptionScheduleReport", ReplyAction="http://queue.name/server-service/IServerService/GetExceptionScheduleReportRespons" +
            "e")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetExceptionScheduleReportResponse> GetExceptionScheduleReportAsync(Queue.Services.Server.Tests.ServerServiceReference.GetExceptionScheduleReportRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetClientRequestReportRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetClientRequestReport", ReplyAction="http://queue.name/server-service/IServerService/GetClientRequestReportResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestReportResponse GetClientRequestReport(Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestReportRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetClientRequestReport", ReplyAction="http://queue.name/server-service/IServerService/GetClientRequestReportResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestReportResponse> GetClientRequestReportAsync(Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestReportRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetDefaultConfigRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetDefaultConfig", ReplyAction="http://queue.name/server-service/IServerService/GetDefaultConfigResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.GetDefaultConfigResponse GetDefaultConfig(Queue.Services.Server.Tests.ServerServiceReference.GetDefaultConfigRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetDefaultConfig", ReplyAction="http://queue.name/server-service/IServerService/GetDefaultConfigResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetDefaultConfigResponse> GetDefaultConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.GetDefaultConfigRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения EditDefaultConfigRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditDefaultConfig", ReplyAction="http://queue.name/server-service/IServerService/EditDefaultConfigResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.EditDefaultConfigResponse EditDefaultConfig(Queue.Services.Server.Tests.ServerServiceReference.EditDefaultConfigRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditDefaultConfig", ReplyAction="http://queue.name/server-service/IServerService/EditDefaultConfigResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditDefaultConfigResponse> EditDefaultConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.EditDefaultConfigRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetDesignConfigRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetDesignConfig", ReplyAction="http://queue.name/server-service/IServerService/GetDesignConfigResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.GetDesignConfigResponse GetDesignConfig(Queue.Services.Server.Tests.ServerServiceReference.GetDesignConfigRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetDesignConfig", ReplyAction="http://queue.name/server-service/IServerService/GetDesignConfigResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetDesignConfigResponse> GetDesignConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.GetDesignConfigRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения EditDesignConfigRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditDesignConfig", ReplyAction="http://queue.name/server-service/IServerService/EditDesignConfigResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.EditDesignConfigResponse EditDesignConfig(Queue.Services.Server.Tests.ServerServiceReference.EditDesignConfigRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditDesignConfig", ReplyAction="http://queue.name/server-service/IServerService/EditDesignConfigResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditDesignConfigResponse> EditDesignConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.EditDesignConfigRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetCouponConfigRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetCouponConfig", ReplyAction="http://queue.name/server-service/IServerService/GetCouponConfigResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.GetCouponConfigResponse GetCouponConfig(Queue.Services.Server.Tests.ServerServiceReference.GetCouponConfigRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetCouponConfig", ReplyAction="http://queue.name/server-service/IServerService/GetCouponConfigResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetCouponConfigResponse> GetCouponConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.GetCouponConfigRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения EditCouponConfigRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditCouponConfig", ReplyAction="http://queue.name/server-service/IServerService/EditCouponConfigResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.EditCouponConfigResponse EditCouponConfig(Queue.Services.Server.Tests.ServerServiceReference.EditCouponConfigRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditCouponConfig", ReplyAction="http://queue.name/server-service/IServerService/EditCouponConfigResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditCouponConfigResponse> EditCouponConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.EditCouponConfigRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetSMTPConfigRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetSMTPConfig", ReplyAction="http://queue.name/server-service/IServerService/GetSMTPConfigResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.GetSMTPConfigResponse GetSMTPConfig(Queue.Services.Server.Tests.ServerServiceReference.GetSMTPConfigRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetSMTPConfig", ReplyAction="http://queue.name/server-service/IServerService/GetSMTPConfigResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetSMTPConfigResponse> GetSMTPConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.GetSMTPConfigRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения EditSMTPConfigRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditSMTPConfig", ReplyAction="http://queue.name/server-service/IServerService/EditSMTPConfigResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.EditSMTPConfigResponse EditSMTPConfig(Queue.Services.Server.Tests.ServerServiceReference.EditSMTPConfigRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditSMTPConfig", ReplyAction="http://queue.name/server-service/IServerService/EditSMTPConfigResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditSMTPConfigResponse> EditSMTPConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.EditSMTPConfigRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetPortalConfigRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetPortalConfig", ReplyAction="http://queue.name/server-service/IServerService/GetPortalConfigResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.GetPortalConfigResponse GetPortalConfig(Queue.Services.Server.Tests.ServerServiceReference.GetPortalConfigRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetPortalConfig", ReplyAction="http://queue.name/server-service/IServerService/GetPortalConfigResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetPortalConfigResponse> GetPortalConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.GetPortalConfigRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения EditPortalConfigRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditPortalConfig", ReplyAction="http://queue.name/server-service/IServerService/EditPortalConfigResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.EditPortalConfigResponse EditPortalConfig(Queue.Services.Server.Tests.ServerServiceReference.EditPortalConfigRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditPortalConfig", ReplyAction="http://queue.name/server-service/IServerService/EditPortalConfigResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditPortalConfigResponse> EditPortalConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.EditPortalConfigRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetMediaConfigRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetMediaConfig", ReplyAction="http://queue.name/server-service/IServerService/GetMediaConfigResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigResponse GetMediaConfig(Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetMediaConfig", ReplyAction="http://queue.name/server-service/IServerService/GetMediaConfigResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigResponse> GetMediaConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения EditMediaConfigRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditMediaConfig", ReplyAction="http://queue.name/server-service/IServerService/EditMediaConfigResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.EditMediaConfigResponse EditMediaConfig(Queue.Services.Server.Tests.ServerServiceReference.EditMediaConfigRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditMediaConfig", ReplyAction="http://queue.name/server-service/IServerService/EditMediaConfigResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditMediaConfigResponse> EditMediaConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.EditMediaConfigRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetMediaConfigFilesRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetMediaConfigFiles", ReplyAction="http://queue.name/server-service/IServerService/GetMediaConfigFilesResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigFilesResponse GetMediaConfigFiles(Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigFilesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetMediaConfigFiles", ReplyAction="http://queue.name/server-service/IServerService/GetMediaConfigFilesResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigFilesResponse> GetMediaConfigFilesAsync(Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigFilesRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetMediaConfigFileRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetMediaConfigFile", ReplyAction="http://queue.name/server-service/IServerService/GetMediaConfigFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/GetMediaConfigFileObjectNotFoundF" +
            "aultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigFileResponse GetMediaConfigFile(Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigFileRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetMediaConfigFile", ReplyAction="http://queue.name/server-service/IServerService/GetMediaConfigFileResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigFileResponse> GetMediaConfigFileAsync(Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigFileRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения EditMediaConfigFileRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditMediaConfigFile", ReplyAction="http://queue.name/server-service/IServerService/EditMediaConfigFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/EditMediaConfigFileObjectNotFound" +
            "FaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.EditMediaConfigFileResponse EditMediaConfigFile(Queue.Services.Server.Tests.ServerServiceReference.EditMediaConfigFileRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditMediaConfigFile", ReplyAction="http://queue.name/server-service/IServerService/EditMediaConfigFileResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditMediaConfigFileResponse> EditMediaConfigFileAsync(Queue.Services.Server.Tests.ServerServiceReference.EditMediaConfigFileRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения DeleteMediaConfigFileRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/DeleteMediaConfigFile", ReplyAction="http://queue.name/server-service/IServerService/DeleteMediaConfigFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/DeleteMediaConfigFileObjectNotFou" +
            "ndFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.DeleteMediaConfigFileResponse DeleteMediaConfigFile(Queue.Services.Server.Tests.ServerServiceReference.DeleteMediaConfigFileRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/DeleteMediaConfigFile", ReplyAction="http://queue.name/server-service/IServerService/DeleteMediaConfigFileResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteMediaConfigFileResponse> DeleteMediaConfigFileAsync(Queue.Services.Server.Tests.ServerServiceReference.DeleteMediaConfigFileRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetTerminalConfigRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetTerminalConfig", ReplyAction="http://queue.name/server-service/IServerService/GetTerminalConfigResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.GetTerminalConfigResponse GetTerminalConfig(Queue.Services.Server.Tests.ServerServiceReference.GetTerminalConfigRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetTerminalConfig", ReplyAction="http://queue.name/server-service/IServerService/GetTerminalConfigResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetTerminalConfigResponse> GetTerminalConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.GetTerminalConfigRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения EditTerminalConfigRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditTerminalConfig", ReplyAction="http://queue.name/server-service/IServerService/EditTerminalConfigResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.EditTerminalConfigResponse EditTerminalConfig(Queue.Services.Server.Tests.ServerServiceReference.EditTerminalConfigRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditTerminalConfig", ReplyAction="http://queue.name/server-service/IServerService/EditTerminalConfigResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditTerminalConfigResponse> EditTerminalConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.EditTerminalConfigRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetNotificationConfigRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetNotificationConfig", ReplyAction="http://queue.name/server-service/IServerService/GetNotificationConfigResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.GetNotificationConfigResponse GetNotificationConfig(Queue.Services.Server.Tests.ServerServiceReference.GetNotificationConfigRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetNotificationConfig", ReplyAction="http://queue.name/server-service/IServerService/GetNotificationConfigResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetNotificationConfigResponse> GetNotificationConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.GetNotificationConfigRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения EditNotificationConfigRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditNotificationConfig", ReplyAction="http://queue.name/server-service/IServerService/EditNotificationConfigResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.EditNotificationConfigResponse EditNotificationConfig(Queue.Services.Server.Tests.ServerServiceReference.EditNotificationConfigRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditNotificationConfig", ReplyAction="http://queue.name/server-service/IServerService/EditNotificationConfigResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditNotificationConfigResponse> EditNotificationConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.EditNotificationConfigRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetQueuePlanMetricRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetQueuePlanMetric", ReplyAction="http://queue.name/server-service/IServerService/GetQueuePlanMetricResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/GetQueuePlanMetricObjectNotFoundF" +
            "aultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanMetricResponse GetQueuePlanMetric(Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanMetricRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetQueuePlanMetric", ReplyAction="http://queue.name/server-service/IServerService/GetQueuePlanMetricResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanMetricResponse> GetQueuePlanMetricAsync(Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanMetricRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetQueuePlanServiceMetricRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetQueuePlanServiceMetric", ReplyAction="http://queue.name/server-service/IServerService/GetQueuePlanServiceMetricResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/GetQueuePlanServiceMetricObjectNo" +
            "tFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanServiceMetricResponse GetQueuePlanServiceMetric(Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanServiceMetricRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetQueuePlanServiceMetric", ReplyAction="http://queue.name/server-service/IServerService/GetQueuePlanServiceMetricResponse" +
            "")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanServiceMetricResponse> GetQueuePlanServiceMetricAsync(Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanServiceMetricRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetDateTimeRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetDateTime", ReplyAction="http://queue.name/server-service/IServerService/GetDateTimeResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.GetDateTimeResponse GetDateTime(Queue.Services.Server.Tests.ServerServiceReference.GetDateTimeRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetDateTime", ReplyAction="http://queue.name/server-service/IServerService/GetDateTimeResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetDateTimeResponse> GetDateTimeAsync(Queue.Services.Server.Tests.ServerServiceReference.GetDateTimeRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetClientRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetClient", ReplyAction="http://queue.name/server-service/IServerService/GetClientResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/GetClientObjectNotFoundFaultFault" +
            "", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.GetClientResponse GetClient(Queue.Services.Server.Tests.ServerServiceReference.GetClientRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetClient", ReplyAction="http://queue.name/server-service/IServerService/GetClientResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetClientResponse> GetClientAsync(Queue.Services.Server.Tests.ServerServiceReference.GetClientRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения OpenClientSessionRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/OpenClientSession", ReplyAction="http://queue.name/server-service/IServerService/OpenClientSessionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/OpenClientSessionObjectNotFoundFa" +
            "ultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.OpenClientSessionResponse OpenClientSession(Queue.Services.Server.Tests.ServerServiceReference.OpenClientSessionRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/OpenClientSession", ReplyAction="http://queue.name/server-service/IServerService/OpenClientSessionResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.OpenClientSessionResponse> OpenClientSessionAsync(Queue.Services.Server.Tests.ServerServiceReference.OpenClientSessionRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetClientByIdentityRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetClientByIdentity", ReplyAction="http://queue.name/server-service/IServerService/GetClientByIdentityResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/GetClientByIdentityObjectNotFound" +
            "FaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.GetClientByIdentityResponse GetClientByIdentity(Queue.Services.Server.Tests.ServerServiceReference.GetClientByIdentityRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetClientByIdentity", ReplyAction="http://queue.name/server-service/IServerService/GetClientByIdentityResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetClientByIdentityResponse> GetClientByIdentityAsync(Queue.Services.Server.Tests.ServerServiceReference.GetClientByIdentityRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения FindClientsRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/FindClients", ReplyAction="http://queue.name/server-service/IServerService/FindClientsResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.FindClientsResponse FindClients(Queue.Services.Server.Tests.ServerServiceReference.FindClientsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/FindClients", ReplyAction="http://queue.name/server-service/IServerService/FindClientsResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.FindClientsResponse> FindClientsAsync(Queue.Services.Server.Tests.ServerServiceReference.FindClientsRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения ClientLoginRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/ClientLogin", ReplyAction="http://queue.name/server-service/IServerService/ClientLoginResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/ClientLoginObjectNotFoundFaultFau" +
            "lt", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.ClientLoginResponse ClientLogin(Queue.Services.Server.Tests.ServerServiceReference.ClientLoginRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/ClientLogin", ReplyAction="http://queue.name/server-service/IServerService/ClientLoginResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.ClientLoginResponse> ClientLoginAsync(Queue.Services.Server.Tests.ServerServiceReference.ClientLoginRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения ClientRestorePasswordRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/ClientRestorePassword", ReplyAction="http://queue.name/server-service/IServerService/ClientRestorePasswordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/ClientRestorePasswordObjectNotFou" +
            "ndFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.ClientRestorePasswordResponse ClientRestorePassword(Queue.Services.Server.Tests.ServerServiceReference.ClientRestorePasswordRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/ClientRestorePassword", ReplyAction="http://queue.name/server-service/IServerService/ClientRestorePasswordResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.ClientRestorePasswordResponse> ClientRestorePasswordAsync(Queue.Services.Server.Tests.ServerServiceReference.ClientRestorePasswordRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения EditClientRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditClient", ReplyAction="http://queue.name/server-service/IServerService/EditClientResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/EditClientObjectNotFoundFaultFaul" +
            "t", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.EditClientResponse EditClient(Queue.Services.Server.Tests.ServerServiceReference.EditClientRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditClient", ReplyAction="http://queue.name/server-service/IServerService/EditClientResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditClientResponse> EditClientAsync(Queue.Services.Server.Tests.ServerServiceReference.EditClientRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения ChangeClientPasswordRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/ChangeClientPassword", ReplyAction="http://queue.name/server-service/IServerService/ChangeClientPasswordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/ChangeClientPasswordObjectNotFoun" +
            "dFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.ChangeClientPasswordResponse ChangeClientPassword(Queue.Services.Server.Tests.ServerServiceReference.ChangeClientPasswordRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/ChangeClientPassword", ReplyAction="http://queue.name/server-service/IServerService/ChangeClientPasswordResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.ChangeClientPasswordResponse> ChangeClientPasswordAsync(Queue.Services.Server.Tests.ServerServiceReference.ChangeClientPasswordRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения DeleteClientRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/DeleteClient", ReplyAction="http://queue.name/server-service/IServerService/DeleteClientResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/DeleteClientObjectNotFoundFaultFa" +
            "ult", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.DeleteClientResponse DeleteClient(Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/DeleteClient", ReplyAction="http://queue.name/server-service/IServerService/DeleteClientResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteClientResponse> DeleteClientAsync(Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения SendPINToEmailRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/SendPINToEmail", ReplyAction="http://queue.name/server-service/IServerService/SendPINToEmailResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/SendPINToEmailObjectNotFoundFault" +
            "Fault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.SendPINToEmailResponse SendPINToEmail(Queue.Services.Server.Tests.ServerServiceReference.SendPINToEmailRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/SendPINToEmail", ReplyAction="http://queue.name/server-service/IServerService/SendPINToEmailResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.SendPINToEmailResponse> SendPINToEmailAsync(Queue.Services.Server.Tests.ServerServiceReference.SendPINToEmailRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения CheckPINRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/CheckPIN", ReplyAction="http://queue.name/server-service/IServerService/CheckPINResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/CheckPINObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.CheckPINResponse CheckPIN(Queue.Services.Server.Tests.ServerServiceReference.CheckPINRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/CheckPIN", ReplyAction="http://queue.name/server-service/IServerService/CheckPINResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.CheckPINResponse> CheckPINAsync(Queue.Services.Server.Tests.ServerServiceReference.CheckPINRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения FindClientRequestsRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/FindClientRequests", ReplyAction="http://queue.name/server-service/IServerService/FindClientRequestsResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.FindClientRequestsResponse FindClientRequests(Queue.Services.Server.Tests.ServerServiceReference.FindClientRequestsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/FindClientRequests", ReplyAction="http://queue.name/server-service/IServerService/FindClientRequestsResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.FindClientRequestsResponse> FindClientRequestsAsync(Queue.Services.Server.Tests.ServerServiceReference.FindClientRequestsRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetClientRequestRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetClientRequest", ReplyAction="http://queue.name/server-service/IServerService/GetClientRequestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/GetClientRequestObjectNotFoundFau" +
            "ltFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestResponse GetClientRequest(Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetClientRequest", ReplyAction="http://queue.name/server-service/IServerService/GetClientRequestResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestResponse> GetClientRequestAsync(Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetClientRequestEventsRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetClientRequestEvents", ReplyAction="http://queue.name/server-service/IServerService/GetClientRequestEventsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/GetClientRequestEventsObjectNotFo" +
            "undFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestEventsResponse GetClientRequestEvents(Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestEventsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetClientRequestEvents", ReplyAction="http://queue.name/server-service/IServerService/GetClientRequestEventsResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestEventsResponse> GetClientRequestEventsAsync(Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestEventsRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения AddEarlyClientRequestRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/AddEarlyClientRequest", ReplyAction="http://queue.name/server-service/IServerService/AddEarlyClientRequestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/AddEarlyClientRequestObjectNotFou" +
            "ndFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.AddEarlyClientRequestResponse AddEarlyClientRequest(Queue.Services.Server.Tests.ServerServiceReference.AddEarlyClientRequestRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/AddEarlyClientRequest", ReplyAction="http://queue.name/server-service/IServerService/AddEarlyClientRequestResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.AddEarlyClientRequestResponse> AddEarlyClientRequestAsync(Queue.Services.Server.Tests.ServerServiceReference.AddEarlyClientRequestRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения AddLiveClientRequestRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/AddLiveClientRequest", ReplyAction="http://queue.name/server-service/IServerService/AddLiveClientRequestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/AddLiveClientRequestObjectNotFoun" +
            "dFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.AddLiveClientRequestResponse AddLiveClientRequest(Queue.Services.Server.Tests.ServerServiceReference.AddLiveClientRequestRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/AddLiveClientRequest", ReplyAction="http://queue.name/server-service/IServerService/AddLiveClientRequestResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.AddLiveClientRequestResponse> AddLiveClientRequestAsync(Queue.Services.Server.Tests.ServerServiceReference.AddLiveClientRequestRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения EditClientRequestRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditClientRequest", ReplyAction="http://queue.name/server-service/IServerService/EditClientRequestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/EditClientRequestObjectNotFoundFa" +
            "ultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.EditClientRequestResponse EditClientRequest(Queue.Services.Server.Tests.ServerServiceReference.EditClientRequestRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditClientRequest", ReplyAction="http://queue.name/server-service/IServerService/EditClientRequestResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditClientRequestResponse> EditClientRequestAsync(Queue.Services.Server.Tests.ServerServiceReference.EditClientRequestRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetClientRequestCouponRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetClientRequestCoupon", ReplyAction="http://queue.name/server-service/IServerService/GetClientRequestCouponResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/GetClientRequestCouponObjectNotFo" +
            "undFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestCouponResponse GetClientRequestCoupon(Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestCouponRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetClientRequestCoupon", ReplyAction="http://queue.name/server-service/IServerService/GetClientRequestCouponResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestCouponResponse> GetClientRequestCouponAsync(Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestCouponRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения DeleteClientRequestRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/DeleteClientRequest", ReplyAction="http://queue.name/server-service/IServerService/DeleteClientRequestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/DeleteClientRequestObjectNotFound" +
            "FaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequestResponse DeleteClientRequest(Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequestRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/DeleteClientRequest", ReplyAction="http://queue.name/server-service/IServerService/DeleteClientRequestResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequestResponse> DeleteClientRequestAsync(Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequestRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения CancelClientRequestRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/CancelClientRequest", ReplyAction="http://queue.name/server-service/IServerService/CancelClientRequestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/CancelClientRequestObjectNotFound" +
            "FaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.CancelClientRequestResponse CancelClientRequest(Queue.Services.Server.Tests.ServerServiceReference.CancelClientRequestRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/CancelClientRequest", ReplyAction="http://queue.name/server-service/IServerService/CancelClientRequestResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.CancelClientRequestResponse> CancelClientRequestAsync(Queue.Services.Server.Tests.ServerServiceReference.CancelClientRequestRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения RestoreClientRequestRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/RestoreClientRequest", ReplyAction="http://queue.name/server-service/IServerService/RestoreClientRequestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/RestoreClientRequestObjectNotFoun" +
            "dFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.RestoreClientRequestResponse RestoreClientRequest(Queue.Services.Server.Tests.ServerServiceReference.RestoreClientRequestRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/RestoreClientRequest", ReplyAction="http://queue.name/server-service/IServerService/RestoreClientRequestResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.RestoreClientRequestResponse> RestoreClientRequestAsync(Queue.Services.Server.Tests.ServerServiceReference.RestoreClientRequestRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения PostponeClientRequestRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/PostponeClientRequest", ReplyAction="http://queue.name/server-service/IServerService/PostponeClientRequestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/PostponeClientRequestObjectNotFou" +
            "ndFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.PostponeClientRequestResponse PostponeClientRequest(Queue.Services.Server.Tests.ServerServiceReference.PostponeClientRequestRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/PostponeClientRequest", ReplyAction="http://queue.name/server-service/IServerService/PostponeClientRequestResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.PostponeClientRequestResponse> PostponeClientRequestAsync(Queue.Services.Server.Tests.ServerServiceReference.PostponeClientRequestRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetClientRequestParametersRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetClientRequestParameters", ReplyAction="http://queue.name/server-service/IServerService/GetClientRequestParametersRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/GetClientRequestParametersObjectN" +
            "otFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestParametersResponse GetClientRequestParameters(Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestParametersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetClientRequestParameters", ReplyAction="http://queue.name/server-service/IServerService/GetClientRequestParametersRespons" +
            "e")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestParametersResponse> GetClientRequestParametersAsync(Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestParametersRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetClientRequestAdditionalServicesRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetClientRequestAdditionalService" +
            "s", ReplyAction="http://queue.name/server-service/IServerService/GetClientRequestAdditionalService" +
            "sResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/GetClientRequestAdditionalService" +
            "sObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestAdditionalServicesResponse GetClientRequestAdditionalServices(Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestAdditionalServicesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetClientRequestAdditionalService" +
            "s", ReplyAction="http://queue.name/server-service/IServerService/GetClientRequestAdditionalService" +
            "sResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestAdditionalServicesResponse> GetClientRequestAdditionalServicesAsync(Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestAdditionalServicesRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetClientRequestAdditionalServiceRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetClientRequestAdditionalService" +
            "", ReplyAction="http://queue.name/server-service/IServerService/GetClientRequestAdditionalService" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/GetClientRequestAdditionalService" +
            "ObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestAdditionalServiceResponse GetClientRequestAdditionalService(Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestAdditionalServiceRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetClientRequestAdditionalService" +
            "", ReplyAction="http://queue.name/server-service/IServerService/GetClientRequestAdditionalService" +
            "Response")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestAdditionalServiceResponse> GetClientRequestAdditionalServiceAsync(Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestAdditionalServiceRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения EditClientRequestAdditionalServiceRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditClientRequestAdditionalServic" +
            "e", ReplyAction="http://queue.name/server-service/IServerService/EditClientRequestAdditionalServic" +
            "eResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/EditClientRequestAdditionalServic" +
            "eObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.EditClientRequestAdditionalServiceResponse EditClientRequestAdditionalService(Queue.Services.Server.Tests.ServerServiceReference.EditClientRequestAdditionalServiceRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditClientRequestAdditionalServic" +
            "e", ReplyAction="http://queue.name/server-service/IServerService/EditClientRequestAdditionalServic" +
            "eResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditClientRequestAdditionalServiceResponse> EditClientRequestAdditionalServiceAsync(Queue.Services.Server.Tests.ServerServiceReference.EditClientRequestAdditionalServiceRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения DeleteClientRequestAdditionalServiceRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/DeleteClientRequestAdditionalServ" +
            "ice", ReplyAction="http://queue.name/server-service/IServerService/DeleteClientRequestAdditionalServ" +
            "iceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/DeleteClientRequestAdditionalServ" +
            "iceObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequestAdditionalServiceResponse DeleteClientRequestAdditionalService(Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequestAdditionalServiceRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/DeleteClientRequestAdditionalServ" +
            "ice", ReplyAction="http://queue.name/server-service/IServerService/DeleteClientRequestAdditionalServ" +
            "iceResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequestAdditionalServiceResponse> DeleteClientRequestAdditionalServiceAsync(Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequestAdditionalServiceRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetOperatorClientRequestPlansRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetOperatorClientRequestPlans", ReplyAction="http://queue.name/server-service/IServerService/GetOperatorClientRequestPlansResp" +
            "onse")]
        Queue.Services.Server.Tests.ServerServiceReference.GetOperatorClientRequestPlansResponse GetOperatorClientRequestPlans(Queue.Services.Server.Tests.ServerServiceReference.GetOperatorClientRequestPlansRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetOperatorClientRequestPlans", ReplyAction="http://queue.name/server-service/IServerService/GetOperatorClientRequestPlansResp" +
            "onse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetOperatorClientRequestPlansResponse> GetOperatorClientRequestPlansAsync(Queue.Services.Server.Tests.ServerServiceReference.GetOperatorClientRequestPlansRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetCurrentClientRequestPlansRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetCurrentClientRequestPlans", ReplyAction="http://queue.name/server-service/IServerService/GetCurrentClientRequestPlansRespo" +
            "nse")]
        Queue.Services.Server.Tests.ServerServiceReference.GetCurrentClientRequestPlansResponse GetCurrentClientRequestPlans(Queue.Services.Server.Tests.ServerServiceReference.GetCurrentClientRequestPlansRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetCurrentClientRequestPlans", ReplyAction="http://queue.name/server-service/IServerService/GetCurrentClientRequestPlansRespo" +
            "nse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetCurrentClientRequestPlansResponse> GetCurrentClientRequestPlansAsync(Queue.Services.Server.Tests.ServerServiceReference.GetCurrentClientRequestPlansRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetCurrentClientRequestPlanRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetCurrentClientRequestPlan", ReplyAction="http://queue.name/server-service/IServerService/GetCurrentClientRequestPlanRespon" +
            "se")]
        Queue.Services.Server.Tests.ServerServiceReference.GetCurrentClientRequestPlanResponse GetCurrentClientRequestPlan(Queue.Services.Server.Tests.ServerServiceReference.GetCurrentClientRequestPlanRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetCurrentClientRequestPlan", ReplyAction="http://queue.name/server-service/IServerService/GetCurrentClientRequestPlanRespon" +
            "se")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetCurrentClientRequestPlanResponse> GetCurrentClientRequestPlanAsync(Queue.Services.Server.Tests.ServerServiceReference.GetCurrentClientRequestPlanRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения EditCurrentClientRequestRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditCurrentClientRequest", ReplyAction="http://queue.name/server-service/IServerService/EditCurrentClientRequestResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.EditCurrentClientRequestResponse EditCurrentClientRequest(Queue.Services.Server.Tests.ServerServiceReference.EditCurrentClientRequestRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditCurrentClientRequest", ReplyAction="http://queue.name/server-service/IServerService/EditCurrentClientRequestResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditCurrentClientRequestResponse> EditCurrentClientRequestAsync(Queue.Services.Server.Tests.ServerServiceReference.EditCurrentClientRequestRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения UpdateCurrentClientRequestRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/UpdateCurrentClientRequest", ReplyAction="http://queue.name/server-service/IServerService/UpdateCurrentClientRequestRespons" +
            "e")]
        Queue.Services.Server.Tests.ServerServiceReference.UpdateCurrentClientRequestResponse UpdateCurrentClientRequest(Queue.Services.Server.Tests.ServerServiceReference.UpdateCurrentClientRequestRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/UpdateCurrentClientRequest", ReplyAction="http://queue.name/server-service/IServerService/UpdateCurrentClientRequestRespons" +
            "e")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.UpdateCurrentClientRequestResponse> UpdateCurrentClientRequestAsync(Queue.Services.Server.Tests.ServerServiceReference.UpdateCurrentClientRequestRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения RedirectToOperatorCurrentClientRequestRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/RedirectToOperatorCurrentClientRe" +
            "quest", ReplyAction="http://queue.name/server-service/IServerService/RedirectToOperatorCurrentClientRe" +
            "questResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.RedirectToOperatorCurrentClientRequestResponse RedirectToOperatorCurrentClientRequest(Queue.Services.Server.Tests.ServerServiceReference.RedirectToOperatorCurrentClientRequestRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/RedirectToOperatorCurrentClientRe" +
            "quest", ReplyAction="http://queue.name/server-service/IServerService/RedirectToOperatorCurrentClientRe" +
            "questResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.RedirectToOperatorCurrentClientRequestResponse> RedirectToOperatorCurrentClientRequestAsync(Queue.Services.Server.Tests.ServerServiceReference.RedirectToOperatorCurrentClientRequestRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения CallClientByRequestNumberRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/CallClientByRequestNumber", ReplyAction="http://queue.name/server-service/IServerService/CallClientByRequestNumberResponse" +
            "")]
        Queue.Services.Server.Tests.ServerServiceReference.CallClientByRequestNumberResponse CallClientByRequestNumber(Queue.Services.Server.Tests.ServerServiceReference.CallClientByRequestNumberRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/CallClientByRequestNumber", ReplyAction="http://queue.name/server-service/IServerService/CallClientByRequestNumberResponse" +
            "")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.CallClientByRequestNumberResponse> CallClientByRequestNumberAsync(Queue.Services.Server.Tests.ServerServiceReference.CallClientByRequestNumberRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения PostponeCurrentClientRequestRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/PostponeCurrentClientRequest", ReplyAction="http://queue.name/server-service/IServerService/PostponeCurrentClientRequestRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/PostponeCurrentClientRequestObjec" +
            "tNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.PostponeCurrentClientRequestResponse PostponeCurrentClientRequest(Queue.Services.Server.Tests.ServerServiceReference.PostponeCurrentClientRequestRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/PostponeCurrentClientRequest", ReplyAction="http://queue.name/server-service/IServerService/PostponeCurrentClientRequestRespo" +
            "nse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.PostponeCurrentClientRequestResponse> PostponeCurrentClientRequestAsync(Queue.Services.Server.Tests.ServerServiceReference.PostponeCurrentClientRequestRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения ReturnCurrentClientRequestRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/ReturnCurrentClientRequest", ReplyAction="http://queue.name/server-service/IServerService/ReturnCurrentClientRequestRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/ReturnCurrentClientRequestObjectN" +
            "otFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.ReturnCurrentClientRequestResponse ReturnCurrentClientRequest(Queue.Services.Server.Tests.ServerServiceReference.ReturnCurrentClientRequestRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/ReturnCurrentClientRequest", ReplyAction="http://queue.name/server-service/IServerService/ReturnCurrentClientRequestRespons" +
            "e")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.ReturnCurrentClientRequestResponse> ReturnCurrentClientRequestAsync(Queue.Services.Server.Tests.ServerServiceReference.ReturnCurrentClientRequestRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения CallCurrentClientRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/CallCurrentClient", ReplyAction="http://queue.name/server-service/IServerService/CallCurrentClientResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.CallCurrentClientResponse CallCurrentClient(Queue.Services.Server.Tests.ServerServiceReference.CallCurrentClientRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/CallCurrentClient", ReplyAction="http://queue.name/server-service/IServerService/CallCurrentClientResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.CallCurrentClientResponse> CallCurrentClientAsync(Queue.Services.Server.Tests.ServerServiceReference.CallCurrentClientRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetQueuePlanRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetQueuePlan", ReplyAction="http://queue.name/server-service/IServerService/GetQueuePlanResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanResponse GetQueuePlan(Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetQueuePlan", ReplyAction="http://queue.name/server-service/IServerService/GetQueuePlanResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanResponse> GetQueuePlanAsync(Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetServiceFreeTimeRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetServiceFreeTime", ReplyAction="http://queue.name/server-service/IServerService/GetServiceFreeTimeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/GetServiceFreeTimeObjectNotFoundF" +
            "aultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.GetServiceFreeTimeResponse GetServiceFreeTime(Queue.Services.Server.Tests.ServerServiceReference.GetServiceFreeTimeRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetServiceFreeTime", ReplyAction="http://queue.name/server-service/IServerService/GetServiceFreeTimeResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceFreeTimeResponse> GetServiceFreeTimeAsync(Queue.Services.Server.Tests.ServerServiceReference.GetServiceFreeTimeRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения RefreshTodayQueuePlanRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/RefreshTodayQueuePlan", ReplyAction="http://queue.name/server-service/IServerService/RefreshTodayQueuePlanResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.RefreshTodayQueuePlanResponse RefreshTodayQueuePlan(Queue.Services.Server.Tests.ServerServiceReference.RefreshTodayQueuePlanRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/RefreshTodayQueuePlan", ReplyAction="http://queue.name/server-service/IServerService/RefreshTodayQueuePlanResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.RefreshTodayQueuePlanResponse> RefreshTodayQueuePlanAsync(Queue.Services.Server.Tests.ServerServiceReference.RefreshTodayQueuePlanRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetRootServiceGroupsRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetRootServiceGroups", ReplyAction="http://queue.name/server-service/IServerService/GetRootServiceGroupsResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.GetRootServiceGroupsResponse GetRootServiceGroups(Queue.Services.Server.Tests.ServerServiceReference.GetRootServiceGroupsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetRootServiceGroups", ReplyAction="http://queue.name/server-service/IServerService/GetRootServiceGroupsResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetRootServiceGroupsResponse> GetRootServiceGroupsAsync(Queue.Services.Server.Tests.ServerServiceReference.GetRootServiceGroupsRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetServiceGroupsRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetServiceGroups", ReplyAction="http://queue.name/server-service/IServerService/GetServiceGroupsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/GetServiceGroupsObjectNotFoundFau" +
            "ltFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.GetServiceGroupsResponse GetServiceGroups(Queue.Services.Server.Tests.ServerServiceReference.GetServiceGroupsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetServiceGroups", ReplyAction="http://queue.name/server-service/IServerService/GetServiceGroupsResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceGroupsResponse> GetServiceGroupsAsync(Queue.Services.Server.Tests.ServerServiceReference.GetServiceGroupsRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetServiceGroupRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetServiceGroup", ReplyAction="http://queue.name/server-service/IServerService/GetServiceGroupResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/GetServiceGroupObjectNotFoundFaul" +
            "tFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.GetServiceGroupResponse GetServiceGroup(Queue.Services.Server.Tests.ServerServiceReference.GetServiceGroupRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetServiceGroup", ReplyAction="http://queue.name/server-service/IServerService/GetServiceGroupResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceGroupResponse> GetServiceGroupAsync(Queue.Services.Server.Tests.ServerServiceReference.GetServiceGroupRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения EditServiceGroupRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditServiceGroup", ReplyAction="http://queue.name/server-service/IServerService/EditServiceGroupResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/EditServiceGroupObjectNotFoundFau" +
            "ltFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.EditServiceGroupResponse EditServiceGroup(Queue.Services.Server.Tests.ServerServiceReference.EditServiceGroupRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditServiceGroup", ReplyAction="http://queue.name/server-service/IServerService/EditServiceGroupResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditServiceGroupResponse> EditServiceGroupAsync(Queue.Services.Server.Tests.ServerServiceReference.EditServiceGroupRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения MoveServiceGroupRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/MoveServiceGroup", ReplyAction="http://queue.name/server-service/IServerService/MoveServiceGroupResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/MoveServiceGroupObjectNotFoundFau" +
            "ltFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.MoveServiceGroupResponse MoveServiceGroup(Queue.Services.Server.Tests.ServerServiceReference.MoveServiceGroupRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/MoveServiceGroup", ReplyAction="http://queue.name/server-service/IServerService/MoveServiceGroupResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.MoveServiceGroupResponse> MoveServiceGroupAsync(Queue.Services.Server.Tests.ServerServiceReference.MoveServiceGroupRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения MoveServiceGroupToRootRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/MoveServiceGroupToRoot", ReplyAction="http://queue.name/server-service/IServerService/MoveServiceGroupToRootResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/MoveServiceGroupToRootObjectNotFo" +
            "undFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.MoveServiceGroupToRootResponse MoveServiceGroupToRoot(Queue.Services.Server.Tests.ServerServiceReference.MoveServiceGroupToRootRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/MoveServiceGroupToRoot", ReplyAction="http://queue.name/server-service/IServerService/MoveServiceGroupToRootResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.MoveServiceGroupToRootResponse> MoveServiceGroupToRootAsync(Queue.Services.Server.Tests.ServerServiceReference.MoveServiceGroupToRootRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения ServiceGroupUpRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/ServiceGroupUp", ReplyAction="http://queue.name/server-service/IServerService/ServiceGroupUpResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/ServiceGroupUpObjectNotFoundFault" +
            "Fault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.ServiceGroupUpResponse ServiceGroupUp(Queue.Services.Server.Tests.ServerServiceReference.ServiceGroupUpRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/ServiceGroupUp", ReplyAction="http://queue.name/server-service/IServerService/ServiceGroupUpResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.ServiceGroupUpResponse> ServiceGroupUpAsync(Queue.Services.Server.Tests.ServerServiceReference.ServiceGroupUpRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения ServiceGroupDownRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/ServiceGroupDown", ReplyAction="http://queue.name/server-service/IServerService/ServiceGroupDownResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/ServiceGroupDownObjectNotFoundFau" +
            "ltFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.ServiceGroupDownResponse ServiceGroupDown(Queue.Services.Server.Tests.ServerServiceReference.ServiceGroupDownRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/ServiceGroupDown", ReplyAction="http://queue.name/server-service/IServerService/ServiceGroupDownResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.ServiceGroupDownResponse> ServiceGroupDownAsync(Queue.Services.Server.Tests.ServerServiceReference.ServiceGroupDownRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения DeleteServiceGroupRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/DeleteServiceGroup", ReplyAction="http://queue.name/server-service/IServerService/DeleteServiceGroupResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/DeleteServiceGroupObjectNotFoundF" +
            "aultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceGroupResponse DeleteServiceGroup(Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceGroupRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/DeleteServiceGroup", ReplyAction="http://queue.name/server-service/IServerService/DeleteServiceGroupResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceGroupResponse> DeleteServiceGroupAsync(Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceGroupRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения OpenUserSessionRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/OpenUserSession", ReplyAction="http://queue.name/server-service/IServerService/OpenUserSessionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/OpenUserSessionObjectNotFoundFaul" +
            "tFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.OpenUserSessionResponse OpenUserSession(Queue.Services.Server.Tests.ServerServiceReference.OpenUserSessionRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/OpenUserSession", ReplyAction="http://queue.name/server-service/IServerService/OpenUserSessionResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.OpenUserSessionResponse> OpenUserSessionAsync(Queue.Services.Server.Tests.ServerServiceReference.OpenUserSessionRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения UserHeartbeatRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/UserHeartbeat", ReplyAction="http://queue.name/server-service/IServerService/UserHeartbeatResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.UserHeartbeatResponse UserHeartbeat(Queue.Services.Server.Tests.ServerServiceReference.UserHeartbeatRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/UserHeartbeat", ReplyAction="http://queue.name/server-service/IServerService/UserHeartbeatResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.UserHeartbeatResponse> UserHeartbeatAsync(Queue.Services.Server.Tests.ServerServiceReference.UserHeartbeatRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetUsersRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetUsers", ReplyAction="http://queue.name/server-service/IServerService/GetUsersResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.GetUsersResponse GetUsers(Queue.Services.Server.Tests.ServerServiceReference.GetUsersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetUsers", ReplyAction="http://queue.name/server-service/IServerService/GetUsersResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetUsersResponse> GetUsersAsync(Queue.Services.Server.Tests.ServerServiceReference.GetUsersRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetUserRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetUser", ReplyAction="http://queue.name/server-service/IServerService/GetUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/GetUserObjectNotFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.GetUserResponse GetUser(Queue.Services.Server.Tests.ServerServiceReference.GetUserRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetUser", ReplyAction="http://queue.name/server-service/IServerService/GetUserResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetUserResponse> GetUserAsync(Queue.Services.Server.Tests.ServerServiceReference.GetUserRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetUserLinksRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetUserLinks", ReplyAction="http://queue.name/server-service/IServerService/GetUserLinksResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.GetUserLinksResponse GetUserLinks(Queue.Services.Server.Tests.ServerServiceReference.GetUserLinksRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetUserLinks", ReplyAction="http://queue.name/server-service/IServerService/GetUserLinksResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetUserLinksResponse> GetUserLinksAsync(Queue.Services.Server.Tests.ServerServiceReference.GetUserLinksRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetRedirectOperatorsLinksRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetRedirectOperatorsLinks", ReplyAction="http://queue.name/server-service/IServerService/GetRedirectOperatorsLinksResponse" +
            "")]
        Queue.Services.Server.Tests.ServerServiceReference.GetRedirectOperatorsLinksResponse GetRedirectOperatorsLinks(Queue.Services.Server.Tests.ServerServiceReference.GetRedirectOperatorsLinksRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetRedirectOperatorsLinks", ReplyAction="http://queue.name/server-service/IServerService/GetRedirectOperatorsLinksResponse" +
            "")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetRedirectOperatorsLinksResponse> GetRedirectOperatorsLinksAsync(Queue.Services.Server.Tests.ServerServiceReference.GetRedirectOperatorsLinksRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения UserLoginRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/UserLogin", ReplyAction="http://queue.name/server-service/IServerService/UserLoginResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/UserLoginObjectNotFoundFaultFault" +
            "", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.UserLoginResponse UserLogin(Queue.Services.Server.Tests.ServerServiceReference.UserLoginRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/UserLogin", ReplyAction="http://queue.name/server-service/IServerService/UserLoginResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.UserLoginResponse> UserLoginAsync(Queue.Services.Server.Tests.ServerServiceReference.UserLoginRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения EditAdministratorRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditAdministrator", ReplyAction="http://queue.name/server-service/IServerService/EditAdministratorResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/EditAdministratorObjectNotFoundFa" +
            "ultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.EditAdministratorResponse EditAdministrator(Queue.Services.Server.Tests.ServerServiceReference.EditAdministratorRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditAdministrator", ReplyAction="http://queue.name/server-service/IServerService/EditAdministratorResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditAdministratorResponse> EditAdministratorAsync(Queue.Services.Server.Tests.ServerServiceReference.EditAdministratorRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения EditOperatorRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditOperator", ReplyAction="http://queue.name/server-service/IServerService/EditOperatorResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/EditOperatorObjectNotFoundFaultFa" +
            "ult", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.EditOperatorResponse EditOperator(Queue.Services.Server.Tests.ServerServiceReference.EditOperatorRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditOperator", ReplyAction="http://queue.name/server-service/IServerService/EditOperatorResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditOperatorResponse> EditOperatorAsync(Queue.Services.Server.Tests.ServerServiceReference.EditOperatorRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения DeleteUserRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/DeleteUser", ReplyAction="http://queue.name/server-service/IServerService/DeleteUserResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.DeleteUserResponse DeleteUser(Queue.Services.Server.Tests.ServerServiceReference.DeleteUserRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/DeleteUser", ReplyAction="http://queue.name/server-service/IServerService/DeleteUserResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteUserResponse> DeleteUserAsync(Queue.Services.Server.Tests.ServerServiceReference.DeleteUserRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetOperatorInterruptionsRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetOperatorInterruptions", ReplyAction="http://queue.name/server-service/IServerService/GetOperatorInterruptionsResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.GetOperatorInterruptionsResponse GetOperatorInterruptions(Queue.Services.Server.Tests.ServerServiceReference.GetOperatorInterruptionsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetOperatorInterruptions", ReplyAction="http://queue.name/server-service/IServerService/GetOperatorInterruptionsResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetOperatorInterruptionsResponse> GetOperatorInterruptionsAsync(Queue.Services.Server.Tests.ServerServiceReference.GetOperatorInterruptionsRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetOperatorInterruptionRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetOperatorInterruption", ReplyAction="http://queue.name/server-service/IServerService/GetOperatorInterruptionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/GetOperatorInterruptionObjectNotF" +
            "oundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.GetOperatorInterruptionResponse GetOperatorInterruption(Queue.Services.Server.Tests.ServerServiceReference.GetOperatorInterruptionRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetOperatorInterruption", ReplyAction="http://queue.name/server-service/IServerService/GetOperatorInterruptionResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetOperatorInterruptionResponse> GetOperatorInterruptionAsync(Queue.Services.Server.Tests.ServerServiceReference.GetOperatorInterruptionRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения EditOperatorInterruptionRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditOperatorInterruption", ReplyAction="http://queue.name/server-service/IServerService/EditOperatorInterruptionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/EditOperatorInterruptionObjectNot" +
            "FoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.EditOperatorInterruptionResponse EditOperatorInterruption(Queue.Services.Server.Tests.ServerServiceReference.EditOperatorInterruptionRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditOperatorInterruption", ReplyAction="http://queue.name/server-service/IServerService/EditOperatorInterruptionResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditOperatorInterruptionResponse> EditOperatorInterruptionAsync(Queue.Services.Server.Tests.ServerServiceReference.EditOperatorInterruptionRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения DeleteOperatorInterruptionRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/DeleteOperatorInterruption", ReplyAction="http://queue.name/server-service/IServerService/DeleteOperatorInterruptionRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/DeleteOperatorInterruptionObjectN" +
            "otFoundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.DeleteOperatorInterruptionResponse DeleteOperatorInterruption(Queue.Services.Server.Tests.ServerServiceReference.DeleteOperatorInterruptionRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/DeleteOperatorInterruption", ReplyAction="http://queue.name/server-service/IServerService/DeleteOperatorInterruptionRespons" +
            "e")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteOperatorInterruptionResponse> DeleteOperatorInterruptionAsync(Queue.Services.Server.Tests.ServerServiceReference.DeleteOperatorInterruptionRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения ChangeUserPasswordRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/ChangeUserPassword", ReplyAction="http://queue.name/server-service/IServerService/ChangeUserPasswordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/ChangeUserPasswordObjectNotFoundF" +
            "aultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.ChangeUserPasswordResponse ChangeUserPassword(Queue.Services.Server.Tests.ServerServiceReference.ChangeUserPasswordRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/ChangeUserPassword", ReplyAction="http://queue.name/server-service/IServerService/ChangeUserPasswordResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.ChangeUserPasswordResponse> ChangeUserPasswordAsync(Queue.Services.Server.Tests.ServerServiceReference.ChangeUserPasswordRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetOfficesRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetOffices", ReplyAction="http://queue.name/server-service/IServerService/GetOfficesResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.GetOfficesResponse GetOffices(Queue.Services.Server.Tests.ServerServiceReference.GetOfficesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetOffices", ReplyAction="http://queue.name/server-service/IServerService/GetOfficesResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetOfficesResponse> GetOfficesAsync(Queue.Services.Server.Tests.ServerServiceReference.GetOfficesRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetOfficeRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetOffice", ReplyAction="http://queue.name/server-service/IServerService/GetOfficeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/GetOfficeObjectNotFoundFaultFault" +
            "", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.GetOfficeResponse GetOffice(Queue.Services.Server.Tests.ServerServiceReference.GetOfficeRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetOffice", ReplyAction="http://queue.name/server-service/IServerService/GetOfficeResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetOfficeResponse> GetOfficeAsync(Queue.Services.Server.Tests.ServerServiceReference.GetOfficeRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения EditOfficeRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditOffice", ReplyAction="http://queue.name/server-service/IServerService/EditOfficeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/EditOfficeObjectNotFoundFaultFaul" +
            "t", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.EditOfficeResponse EditOffice(Queue.Services.Server.Tests.ServerServiceReference.EditOfficeRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditOffice", ReplyAction="http://queue.name/server-service/IServerService/EditOfficeResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditOfficeResponse> EditOfficeAsync(Queue.Services.Server.Tests.ServerServiceReference.EditOfficeRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения DeleteOfficeRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/DeleteOffice", ReplyAction="http://queue.name/server-service/IServerService/DeleteOfficeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/DeleteOfficeObjectNotFoundFaultFa" +
            "ult", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.DeleteOfficeResponse DeleteOffice(Queue.Services.Server.Tests.ServerServiceReference.DeleteOfficeRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/DeleteOffice", ReplyAction="http://queue.name/server-service/IServerService/DeleteOfficeResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteOfficeResponse> DeleteOfficeAsync(Queue.Services.Server.Tests.ServerServiceReference.DeleteOfficeRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetAdditionalServiceLinksRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetAdditionalServiceLinks", ReplyAction="http://queue.name/server-service/IServerService/GetAdditionalServiceLinksResponse" +
            "")]
        Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServiceLinksResponse GetAdditionalServiceLinks(Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServiceLinksRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetAdditionalServiceLinks", ReplyAction="http://queue.name/server-service/IServerService/GetAdditionalServiceLinksResponse" +
            "")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServiceLinksResponse> GetAdditionalServiceLinksAsync(Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServiceLinksRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetAdditionalServicesRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetAdditionalServices", ReplyAction="http://queue.name/server-service/IServerService/GetAdditionalServicesResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServicesResponse GetAdditionalServices(Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServicesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetAdditionalServices", ReplyAction="http://queue.name/server-service/IServerService/GetAdditionalServicesResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServicesResponse> GetAdditionalServicesAsync(Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServicesRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetAdditionalServiceRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetAdditionalService", ReplyAction="http://queue.name/server-service/IServerService/GetAdditionalServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/GetAdditionalServiceObjectNotFoun" +
            "dFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServiceResponse GetAdditionalService(Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServiceRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetAdditionalService", ReplyAction="http://queue.name/server-service/IServerService/GetAdditionalServiceResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServiceResponse> GetAdditionalServiceAsync(Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServiceRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения EditAdditionalServiceRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditAdditionalService", ReplyAction="http://queue.name/server-service/IServerService/EditAdditionalServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/EditAdditionalServiceObjectNotFou" +
            "ndFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.EditAdditionalServiceResponse EditAdditionalService(Queue.Services.Server.Tests.ServerServiceReference.EditAdditionalServiceRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditAdditionalService", ReplyAction="http://queue.name/server-service/IServerService/EditAdditionalServiceResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditAdditionalServiceResponse> EditAdditionalServiceAsync(Queue.Services.Server.Tests.ServerServiceReference.EditAdditionalServiceRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения DeleteAdditionalServiceRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/DeleteAdditionalService", ReplyAction="http://queue.name/server-service/IServerService/DeleteAdditionalServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/DeleteAdditionalServiceObjectNotF" +
            "oundFaultFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.DeleteAdditionalServiceResponse DeleteAdditionalService(Queue.Services.Server.Tests.ServerServiceReference.DeleteAdditionalServiceRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/DeleteAdditionalService", ReplyAction="http://queue.name/server-service/IServerService/DeleteAdditionalServiceResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteAdditionalServiceResponse> DeleteAdditionalServiceAsync(Queue.Services.Server.Tests.ServerServiceReference.DeleteAdditionalServiceRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetWorkplacesLinksRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetWorkplacesLinks", ReplyAction="http://queue.name/server-service/IServerService/GetWorkplacesLinksResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.GetWorkplacesLinksResponse GetWorkplacesLinks(Queue.Services.Server.Tests.ServerServiceReference.GetWorkplacesLinksRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetWorkplacesLinks", ReplyAction="http://queue.name/server-service/IServerService/GetWorkplacesLinksResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetWorkplacesLinksResponse> GetWorkplacesLinksAsync(Queue.Services.Server.Tests.ServerServiceReference.GetWorkplacesLinksRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetWorkplacesRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetWorkplaces", ReplyAction="http://queue.name/server-service/IServerService/GetWorkplacesResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.GetWorkplacesResponse GetWorkplaces(Queue.Services.Server.Tests.ServerServiceReference.GetWorkplacesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetWorkplaces", ReplyAction="http://queue.name/server-service/IServerService/GetWorkplacesResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetWorkplacesResponse> GetWorkplacesAsync(Queue.Services.Server.Tests.ServerServiceReference.GetWorkplacesRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetWorkplaceRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetWorkplace", ReplyAction="http://queue.name/server-service/IServerService/GetWorkplaceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/GetWorkplaceObjectNotFoundFaultFa" +
            "ult", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.GetWorkplaceResponse GetWorkplace(Queue.Services.Server.Tests.ServerServiceReference.GetWorkplaceRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetWorkplace", ReplyAction="http://queue.name/server-service/IServerService/GetWorkplaceResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetWorkplaceResponse> GetWorkplaceAsync(Queue.Services.Server.Tests.ServerServiceReference.GetWorkplaceRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения EditWorkplaceRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditWorkplace", ReplyAction="http://queue.name/server-service/IServerService/EditWorkplaceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/EditWorkplaceObjectNotFoundFaultF" +
            "ault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.EditWorkplaceResponse EditWorkplace(Queue.Services.Server.Tests.ServerServiceReference.EditWorkplaceRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/EditWorkplace", ReplyAction="http://queue.name/server-service/IServerService/EditWorkplaceResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditWorkplaceResponse> EditWorkplaceAsync(Queue.Services.Server.Tests.ServerServiceReference.EditWorkplaceRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения DeleteWorkplaceRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/DeleteWorkplace", ReplyAction="http://queue.name/server-service/IServerService/DeleteWorkplaceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/DeleteWorkplaceObjectNotFoundFaul" +
            "tFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.DeleteWorkplaceResponse DeleteWorkplace(Queue.Services.Server.Tests.ServerServiceReference.DeleteWorkplaceRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/DeleteWorkplace", ReplyAction="http://queue.name/server-service/IServerService/DeleteWorkplaceResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteWorkplaceResponse> DeleteWorkplaceAsync(Queue.Services.Server.Tests.ServerServiceReference.DeleteWorkplaceRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetWorkplaceOperatorsRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetWorkplaceOperators", ReplyAction="http://queue.name/server-service/IServerService/GetWorkplaceOperatorsResponse")]
        Queue.Services.Server.Tests.ServerServiceReference.GetWorkplaceOperatorsResponse GetWorkplaceOperators(Queue.Services.Server.Tests.ServerServiceReference.GetWorkplaceOperatorsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetWorkplaceOperators", ReplyAction="http://queue.name/server-service/IServerService/GetWorkplaceOperatorsResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetWorkplaceOperatorsResponse> GetWorkplaceOperatorsAsync(Queue.Services.Server.Tests.ServerServiceReference.GetWorkplaceOperatorsRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetServiceLinksRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetServiceLinks", ReplyAction="http://queue.name/server-service/IServerService/GetServiceLinksResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/GetServiceLinksObjectNotFoundFaul" +
            "tFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.GetServiceLinksResponse GetServiceLinks(Queue.Services.Server.Tests.ServerServiceReference.GetServiceLinksRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetServiceLinks", ReplyAction="http://queue.name/server-service/IServerService/GetServiceLinksResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceLinksResponse> GetServiceLinksAsync(Queue.Services.Server.Tests.ServerServiceReference.GetServiceLinksRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetRootServicesRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetRootServices", ReplyAction="http://queue.name/server-service/IServerService/GetRootServicesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/GetRootServicesObjectNotFoundFaul" +
            "tFault", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.GetRootServicesResponse GetRootServices(Queue.Services.Server.Tests.ServerServiceReference.GetRootServicesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetRootServices", ReplyAction="http://queue.name/server-service/IServerService/GetRootServicesResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetRootServicesResponse> GetRootServicesAsync(Queue.Services.Server.Tests.ServerServiceReference.GetRootServicesRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetServicesRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetServices", ReplyAction="http://queue.name/server-service/IServerService/GetServicesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/GetServicesObjectNotFoundFaultFau" +
            "lt", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.GetServicesResponse GetServices(Queue.Services.Server.Tests.ServerServiceReference.GetServicesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetServices", ReplyAction="http://queue.name/server-service/IServerService/GetServicesResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServicesResponse> GetServicesAsync(Queue.Services.Server.Tests.ServerServiceReference.GetServicesRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения GetServiceRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetService", ReplyAction="http://queue.name/server-service/IServerService/GetServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/GetServiceObjectNotFoundFaultFaul" +
            "t", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.GetServiceResponse GetService(Queue.Services.Server.Tests.ServerServiceReference.GetServiceRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/GetService", ReplyAction="http://queue.name/server-service/IServerService/GetServiceResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceResponse> GetServiceAsync(Queue.Services.Server.Tests.ServerServiceReference.GetServiceRequest request);
        
        // CODEGEN: Контракт генерации сообщений с пространством имен упаковщика (http://queue.name/server-service) сообщения FindServicesRequest не соответствует значению по умолчанию (http://tempuri.org/).
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/FindServices", ReplyAction="http://queue.name/server-service/IServerService/FindServicesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Queue.Services.Server.Tests.ServerServiceReference.ObjectNotFoundFault), Action="http://queue.name/server-service/IServerService/FindServicesObjectNotFoundFaultFa" +
            "ult", Name="ObjectNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/Queue.Services.Common")]
        Queue.Services.Server.Tests.ServerServiceReference.FindServicesResponse FindServices(Queue.Services.Server.Tests.ServerServiceReference.FindServicesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://queue.name/server-service/IServerService/FindServices", ReplyAction="http://queue.name/server-service/IServerService/FindServicesResponse")]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.FindServicesResponse> FindServicesAsync(Queue.Services.Server.Tests.ServerServiceReference.FindServicesRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditService", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditServiceRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Service service;
        
        public EditServiceRequest() {
        }
        
        public EditServiceRequest(Queue.Services.Server.Tests.ServerServiceReference.Service service) {
            this.service = service;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditServiceResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditServiceResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Service EditServiceResult;
        
        public EditServiceResponse() {
        }
        
        public EditServiceResponse(Queue.Services.Server.Tests.ServerServiceReference.Service EditServiceResult) {
            this.EditServiceResult = EditServiceResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MoveService", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class MoveServiceRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid serviceId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=1)]
        public System.Guid serviceGroupId;
        
        public MoveServiceRequest() {
        }
        
        public MoveServiceRequest(System.Guid serviceId, System.Guid serviceGroupId) {
            this.serviceId = serviceId;
            this.serviceGroupId = serviceGroupId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MoveServiceResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class MoveServiceResponse {
        
        public MoveServiceResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteService", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class DeleteServiceRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid serviceId;
        
        public DeleteServiceRequest() {
        }
        
        public DeleteServiceRequest(System.Guid serviceId) {
            this.serviceId = serviceId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteServiceResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class DeleteServiceResponse {
        
        public DeleteServiceResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ServiceUp", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class ServiceUpRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid serviceId;
        
        public ServiceUpRequest() {
        }
        
        public ServiceUpRequest(System.Guid serviceId) {
            this.serviceId = serviceId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ServiceUpResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class ServiceUpResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public bool ServiceUpResult;
        
        public ServiceUpResponse() {
        }
        
        public ServiceUpResponse(bool ServiceUpResult) {
            this.ServiceUpResult = ServiceUpResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ServiceDown", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class ServiceDownRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid serviceId;
        
        public ServiceDownRequest() {
        }
        
        public ServiceDownRequest(System.Guid serviceId) {
            this.serviceId = serviceId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ServiceDownResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class ServiceDownResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public bool ServiceDownResult;
        
        public ServiceDownResponse() {
        }
        
        public ServiceDownResponse(bool ServiceDownResult) {
            this.ServiceDownResult = ServiceDownResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServiceStepLinks", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetServiceStepLinksRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid serviceId;
        
        public GetServiceStepLinksRequest() {
        }
        
        public GetServiceStepLinksRequest(System.Guid serviceId) {
            this.serviceId = serviceId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServiceStepLinksResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetServiceStepLinksResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntityLink[] GetServiceStepLinksResult;
        
        public GetServiceStepLinksResponse() {
        }
        
        public GetServiceStepLinksResponse(Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntityLink[] GetServiceStepLinksResult) {
            this.GetServiceStepLinksResult = GetServiceStepLinksResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServiceSteps", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetServiceStepsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid serviceId;
        
        public GetServiceStepsRequest() {
        }
        
        public GetServiceStepsRequest(System.Guid serviceId) {
            this.serviceId = serviceId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServiceStepsResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetServiceStepsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceStep[] GetServiceStepsResult;
        
        public GetServiceStepsResponse() {
        }
        
        public GetServiceStepsResponse(Queue.Services.Server.Tests.ServerServiceReference.ServiceStep[] GetServiceStepsResult) {
            this.GetServiceStepsResult = GetServiceStepsResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServiceStep", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetServiceStepRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid serviceStepId;
        
        public GetServiceStepRequest() {
        }
        
        public GetServiceStepRequest(System.Guid serviceStepId) {
            this.serviceStepId = serviceStepId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServiceStepResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetServiceStepResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceStep GetServiceStepResult;
        
        public GetServiceStepResponse() {
        }
        
        public GetServiceStepResponse(Queue.Services.Server.Tests.ServerServiceReference.ServiceStep GetServiceStepResult) {
            this.GetServiceStepResult = GetServiceStepResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditServiceStep", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditServiceStepRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceStep serviceStep;
        
        public EditServiceStepRequest() {
        }
        
        public EditServiceStepRequest(Queue.Services.Server.Tests.ServerServiceReference.ServiceStep serviceStep) {
            this.serviceStep = serviceStep;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditServiceStepResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditServiceStepResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceStep EditServiceStepResult;
        
        public EditServiceStepResponse() {
        }
        
        public EditServiceStepResponse(Queue.Services.Server.Tests.ServerServiceReference.ServiceStep EditServiceStepResult) {
            this.EditServiceStepResult = EditServiceStepResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteServiceStep", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class DeleteServiceStepRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid serviceStepId;
        
        public DeleteServiceStepRequest() {
        }
        
        public DeleteServiceStepRequest(System.Guid serviceStepId) {
            this.serviceStepId = serviceStepId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteServiceStepResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class DeleteServiceStepResponse {
        
        public DeleteServiceStepResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ServiceStepUp", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class ServiceStepUpRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid serviceStepId;
        
        public ServiceStepUpRequest() {
        }
        
        public ServiceStepUpRequest(System.Guid serviceStepId) {
            this.serviceStepId = serviceStepId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ServiceStepUpResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class ServiceStepUpResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public bool ServiceStepUpResult;
        
        public ServiceStepUpResponse() {
        }
        
        public ServiceStepUpResponse(bool ServiceStepUpResult) {
            this.ServiceStepUpResult = ServiceStepUpResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ServiceStepDown", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class ServiceStepDownRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid serviceStepId;
        
        public ServiceStepDownRequest() {
        }
        
        public ServiceStepDownRequest(System.Guid serviceStepId) {
            this.serviceStepId = serviceStepId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ServiceStepDownResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class ServiceStepDownResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public bool ServiceStepDownResult;
        
        public ServiceStepDownResponse() {
        }
        
        public ServiceStepDownResponse(bool ServiceStepDownResult) {
            this.ServiceStepDownResult = ServiceStepDownResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServiceRenderings", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetServiceRenderingsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid scheduleId;
        
        public GetServiceRenderingsRequest() {
        }
        
        public GetServiceRenderingsRequest(System.Guid scheduleId) {
            this.scheduleId = scheduleId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServiceRenderingsResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetServiceRenderingsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceRendering[] GetServiceRenderingsResult;
        
        public GetServiceRenderingsResponse() {
        }
        
        public GetServiceRenderingsResponse(Queue.Services.Server.Tests.ServerServiceReference.ServiceRendering[] GetServiceRenderingsResult) {
            this.GetServiceRenderingsResult = GetServiceRenderingsResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServiceRendering", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetServiceRenderingRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid serviceRenderingId;
        
        public GetServiceRenderingRequest() {
        }
        
        public GetServiceRenderingRequest(System.Guid serviceRenderingId) {
            this.serviceRenderingId = serviceRenderingId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServiceRenderingResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetServiceRenderingResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceRendering GetServiceRenderingResult;
        
        public GetServiceRenderingResponse() {
        }
        
        public GetServiceRenderingResponse(Queue.Services.Server.Tests.ServerServiceReference.ServiceRendering GetServiceRenderingResult) {
            this.GetServiceRenderingResult = GetServiceRenderingResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditServiceRendering", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditServiceRenderingRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceRendering serviceRendering;
        
        public EditServiceRenderingRequest() {
        }
        
        public EditServiceRenderingRequest(Queue.Services.Server.Tests.ServerServiceReference.ServiceRendering serviceRendering) {
            this.serviceRendering = serviceRendering;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditServiceRenderingResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditServiceRenderingResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceRendering EditServiceRenderingResult;
        
        public EditServiceRenderingResponse() {
        }
        
        public EditServiceRenderingResponse(Queue.Services.Server.Tests.ServerServiceReference.ServiceRendering EditServiceRenderingResult) {
            this.EditServiceRenderingResult = EditServiceRenderingResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteServiceRendering", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class DeleteServiceRenderingRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid serviceRenderingId;
        
        public DeleteServiceRenderingRequest() {
        }
        
        public DeleteServiceRenderingRequest(System.Guid serviceRenderingId) {
            this.serviceRenderingId = serviceRenderingId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteServiceRenderingResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class DeleteServiceRenderingResponse {
        
        public DeleteServiceRenderingResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetDefaultWeekdaySchedule", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetDefaultWeekdayScheduleRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.DayOfWeek dayOfWeek;
        
        public GetDefaultWeekdayScheduleRequest() {
        }
        
        public GetDefaultWeekdayScheduleRequest(System.DayOfWeek dayOfWeek) {
            this.dayOfWeek = dayOfWeek;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetDefaultWeekdayScheduleResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetDefaultWeekdayScheduleResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Schedule GetDefaultWeekdayScheduleResult;
        
        public GetDefaultWeekdayScheduleResponse() {
        }
        
        public GetDefaultWeekdayScheduleResponse(Queue.Services.Server.Tests.ServerServiceReference.Schedule GetDefaultWeekdayScheduleResult) {
            this.GetDefaultWeekdayScheduleResult = GetDefaultWeekdayScheduleResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetDefaultExceptionSchedule", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetDefaultExceptionScheduleRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.DateTime scheduleDate;
        
        public GetDefaultExceptionScheduleRequest() {
        }
        
        public GetDefaultExceptionScheduleRequest(System.DateTime scheduleDate) {
            this.scheduleDate = scheduleDate;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetDefaultExceptionScheduleResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetDefaultExceptionScheduleResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Schedule GetDefaultExceptionScheduleResult;
        
        public GetDefaultExceptionScheduleResponse() {
        }
        
        public GetDefaultExceptionScheduleResponse(Queue.Services.Server.Tests.ServerServiceReference.Schedule GetDefaultExceptionScheduleResult) {
            this.GetDefaultExceptionScheduleResult = GetDefaultExceptionScheduleResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddDefaultExceptionSchedule", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class AddDefaultExceptionScheduleRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.DateTime scheduleDate;
        
        public AddDefaultExceptionScheduleRequest() {
        }
        
        public AddDefaultExceptionScheduleRequest(System.DateTime scheduleDate) {
            this.scheduleDate = scheduleDate;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddDefaultExceptionScheduleResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class AddDefaultExceptionScheduleResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Schedule AddDefaultExceptionScheduleResult;
        
        public AddDefaultExceptionScheduleResponse() {
        }
        
        public AddDefaultExceptionScheduleResponse(Queue.Services.Server.Tests.ServerServiceReference.Schedule AddDefaultExceptionScheduleResult) {
            this.AddDefaultExceptionScheduleResult = AddDefaultExceptionScheduleResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServiceWeekdaySchedule", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetServiceWeekdayScheduleRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid serviceId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=1)]
        public System.DayOfWeek dayOfWeek;
        
        public GetServiceWeekdayScheduleRequest() {
        }
        
        public GetServiceWeekdayScheduleRequest(System.Guid serviceId, System.DayOfWeek dayOfWeek) {
            this.serviceId = serviceId;
            this.dayOfWeek = dayOfWeek;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServiceWeekdayScheduleResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetServiceWeekdayScheduleResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Schedule GetServiceWeekdayScheduleResult;
        
        public GetServiceWeekdayScheduleResponse() {
        }
        
        public GetServiceWeekdayScheduleResponse(Queue.Services.Server.Tests.ServerServiceReference.Schedule GetServiceWeekdayScheduleResult) {
            this.GetServiceWeekdayScheduleResult = GetServiceWeekdayScheduleResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddServiceWeekdaySchedule", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class AddServiceWeekdayScheduleRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid serviceId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=1)]
        public System.DayOfWeek dayOfWeek;
        
        public AddServiceWeekdayScheduleRequest() {
        }
        
        public AddServiceWeekdayScheduleRequest(System.Guid serviceId, System.DayOfWeek dayOfWeek) {
            this.serviceId = serviceId;
            this.dayOfWeek = dayOfWeek;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddServiceWeekdayScheduleResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class AddServiceWeekdayScheduleResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Schedule AddServiceWeekdayScheduleResult;
        
        public AddServiceWeekdayScheduleResponse() {
        }
        
        public AddServiceWeekdayScheduleResponse(Queue.Services.Server.Tests.ServerServiceReference.Schedule AddServiceWeekdayScheduleResult) {
            this.AddServiceWeekdayScheduleResult = AddServiceWeekdayScheduleResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServiceExceptionSchedule", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetServiceExceptionScheduleRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid serviceId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=1)]
        public System.DateTime scheduleDate;
        
        public GetServiceExceptionScheduleRequest() {
        }
        
        public GetServiceExceptionScheduleRequest(System.Guid serviceId, System.DateTime scheduleDate) {
            this.serviceId = serviceId;
            this.scheduleDate = scheduleDate;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServiceExceptionScheduleResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetServiceExceptionScheduleResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Schedule GetServiceExceptionScheduleResult;
        
        public GetServiceExceptionScheduleResponse() {
        }
        
        public GetServiceExceptionScheduleResponse(Queue.Services.Server.Tests.ServerServiceReference.Schedule GetServiceExceptionScheduleResult) {
            this.GetServiceExceptionScheduleResult = GetServiceExceptionScheduleResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddServiceExceptionSchedule", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class AddServiceExceptionScheduleRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid serviceId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=1)]
        public System.DateTime scheduleDate;
        
        public AddServiceExceptionScheduleRequest() {
        }
        
        public AddServiceExceptionScheduleRequest(System.Guid serviceId, System.DateTime scheduleDate) {
            this.serviceId = serviceId;
            this.scheduleDate = scheduleDate;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddServiceExceptionScheduleResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class AddServiceExceptionScheduleResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Schedule AddServiceExceptionScheduleResult;
        
        public AddServiceExceptionScheduleResponse() {
        }
        
        public AddServiceExceptionScheduleResponse(Queue.Services.Server.Tests.ServerServiceReference.Schedule AddServiceExceptionScheduleResult) {
            this.AddServiceExceptionScheduleResult = AddServiceExceptionScheduleResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetSchedule", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetScheduleRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid scheduleId;
        
        public GetScheduleRequest() {
        }
        
        public GetScheduleRequest(System.Guid scheduleId) {
            this.scheduleId = scheduleId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetScheduleResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetScheduleResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Schedule GetScheduleResult;
        
        public GetScheduleResponse() {
        }
        
        public GetScheduleResponse(Queue.Services.Server.Tests.ServerServiceReference.Schedule GetScheduleResult) {
            this.GetScheduleResult = GetScheduleResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditSchedule", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditScheduleRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Schedule schedule;
        
        public EditScheduleRequest() {
        }
        
        public EditScheduleRequest(Queue.Services.Server.Tests.ServerServiceReference.Schedule schedule) {
            this.schedule = schedule;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditScheduleResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditScheduleResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Schedule EditScheduleResult;
        
        public EditScheduleResponse() {
        }
        
        public EditScheduleResponse(Queue.Services.Server.Tests.ServerServiceReference.Schedule EditScheduleResult) {
            this.EditScheduleResult = EditScheduleResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteSchedule", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class DeleteScheduleRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid scheduleId;
        
        public DeleteScheduleRequest() {
        }
        
        public DeleteScheduleRequest(System.Guid scheduleId) {
            this.scheduleId = scheduleId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteScheduleResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class DeleteScheduleResponse {
        
        public DeleteScheduleResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServiceParameter", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetServiceParameterRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid serviceParameterId;
        
        public GetServiceParameterRequest() {
        }
        
        public GetServiceParameterRequest(System.Guid serviceParameterId) {
            this.serviceParameterId = serviceParameterId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServiceParameterResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetServiceParameterResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceParameter GetServiceParameterResult;
        
        public GetServiceParameterResponse() {
        }
        
        public GetServiceParameterResponse(Queue.Services.Server.Tests.ServerServiceReference.ServiceParameter GetServiceParameterResult) {
            this.GetServiceParameterResult = GetServiceParameterResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServiceParameters", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetServiceParametersRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid serviceId;
        
        public GetServiceParametersRequest() {
        }
        
        public GetServiceParametersRequest(System.Guid serviceId) {
            this.serviceId = serviceId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServiceParametersResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetServiceParametersResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceParameter[] GetServiceParametersResult;
        
        public GetServiceParametersResponse() {
        }
        
        public GetServiceParametersResponse(Queue.Services.Server.Tests.ServerServiceReference.ServiceParameter[] GetServiceParametersResult) {
            this.GetServiceParametersResult = GetServiceParametersResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditServiceParameterNumber", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditServiceParameterNumberRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceParameterNumber parameter;
        
        public EditServiceParameterNumberRequest() {
        }
        
        public EditServiceParameterNumberRequest(Queue.Services.Server.Tests.ServerServiceReference.ServiceParameterNumber parameter) {
            this.parameter = parameter;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditServiceParameterNumberResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditServiceParameterNumberResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceParameterNumber EditServiceParameterNumberResult;
        
        public EditServiceParameterNumberResponse() {
        }
        
        public EditServiceParameterNumberResponse(Queue.Services.Server.Tests.ServerServiceReference.ServiceParameterNumber EditServiceParameterNumberResult) {
            this.EditServiceParameterNumberResult = EditServiceParameterNumberResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditServiceParameterText", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditServiceParameterTextRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceParameterText parameter;
        
        public EditServiceParameterTextRequest() {
        }
        
        public EditServiceParameterTextRequest(Queue.Services.Server.Tests.ServerServiceReference.ServiceParameterText parameter) {
            this.parameter = parameter;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditServiceParameterTextResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditServiceParameterTextResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceParameterText EditServiceParameterTextResult;
        
        public EditServiceParameterTextResponse() {
        }
        
        public EditServiceParameterTextResponse(Queue.Services.Server.Tests.ServerServiceReference.ServiceParameterText EditServiceParameterTextResult) {
            this.EditServiceParameterTextResult = EditServiceParameterTextResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditServiceParameterOptions", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditServiceParameterOptionsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceParameterOptions parameter;
        
        public EditServiceParameterOptionsRequest() {
        }
        
        public EditServiceParameterOptionsRequest(Queue.Services.Server.Tests.ServerServiceReference.ServiceParameterOptions parameter) {
            this.parameter = parameter;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditServiceParameterOptionsResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditServiceParameterOptionsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceParameterOptions EditServiceParameterOptionsResult;
        
        public EditServiceParameterOptionsResponse() {
        }
        
        public EditServiceParameterOptionsResponse(Queue.Services.Server.Tests.ServerServiceReference.ServiceParameterOptions EditServiceParameterOptionsResult) {
            this.EditServiceParameterOptionsResult = EditServiceParameterOptionsResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteServiceParameter", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class DeleteServiceParameterRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid serviceParameterId;
        
        public DeleteServiceParameterRequest() {
        }
        
        public DeleteServiceParameterRequest(System.Guid serviceParameterId) {
            this.serviceParameterId = serviceParameterId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteServiceParameterResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class DeleteServiceParameterResponse {
        
        public DeleteServiceParameterResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServiceRatingReport", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetServiceRatingReportRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceRatingReportSettings settings;
        
        public GetServiceRatingReportRequest() {
        }
        
        public GetServiceRatingReportRequest(Queue.Services.Server.Tests.ServerServiceReference.ServiceRatingReportSettings settings) {
            this.settings = settings;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServiceRatingReportResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetServiceRatingReportResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public byte[] GetServiceRatingReportResult;
        
        public GetServiceRatingReportResponse() {
        }
        
        public GetServiceRatingReportResponse(byte[] GetServiceRatingReportResult) {
            this.GetServiceRatingReportResult = GetServiceRatingReportResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetOperatorRatingReport", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetOperatorRatingReportRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.OperatorRatingReportSettings settings;
        
        public GetOperatorRatingReportRequest() {
        }
        
        public GetOperatorRatingReportRequest(Queue.Services.Server.Tests.ServerServiceReference.OperatorRatingReportSettings settings) {
            this.settings = settings;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetOperatorRatingReportResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetOperatorRatingReportResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public byte[] GetOperatorRatingReportResult;
        
        public GetOperatorRatingReportResponse() {
        }
        
        public GetOperatorRatingReportResponse(byte[] GetOperatorRatingReportResult) {
            this.GetOperatorRatingReportResult = GetOperatorRatingReportResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAdditinalServicesRatingReport", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetAdditinalServicesRatingReportRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.AdditionalServicesRatingReportSettings settings;
        
        public GetAdditinalServicesRatingReportRequest() {
        }
        
        public GetAdditinalServicesRatingReportRequest(Queue.Services.Server.Tests.ServerServiceReference.AdditionalServicesRatingReportSettings settings) {
            this.settings = settings;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAdditinalServicesRatingReportResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetAdditinalServicesRatingReportResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public byte[] GetAdditinalServicesRatingReportResult;
        
        public GetAdditinalServicesRatingReportResponse() {
        }
        
        public GetAdditinalServicesRatingReportResponse(byte[] GetAdditinalServicesRatingReportResult) {
            this.GetAdditinalServicesRatingReportResult = GetAdditinalServicesRatingReportResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetExceptionScheduleReport", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetExceptionScheduleReportRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.DateTime fromDate;
        
        public GetExceptionScheduleReportRequest() {
        }
        
        public GetExceptionScheduleReportRequest(System.DateTime fromDate) {
            this.fromDate = fromDate;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetExceptionScheduleReportResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetExceptionScheduleReportResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public byte[] GetExceptionScheduleReportResult;
        
        public GetExceptionScheduleReportResponse() {
        }
        
        public GetExceptionScheduleReportResponse(byte[] GetExceptionScheduleReportResult) {
            this.GetExceptionScheduleReportResult = GetExceptionScheduleReportResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetClientRequestReport", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetClientRequestReportRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid clientRequestId;
        
        public GetClientRequestReportRequest() {
        }
        
        public GetClientRequestReportRequest(System.Guid clientRequestId) {
            this.clientRequestId = clientRequestId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetClientRequestReportResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetClientRequestReportResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public byte[] GetClientRequestReportResult;
        
        public GetClientRequestReportResponse() {
        }
        
        public GetClientRequestReportResponse(byte[] GetClientRequestReportResult) {
            this.GetClientRequestReportResult = GetClientRequestReportResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetDefaultConfig", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetDefaultConfigRequest {
        
        public GetDefaultConfigRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetDefaultConfigResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetDefaultConfigResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.DefaultConfig GetDefaultConfigResult;
        
        public GetDefaultConfigResponse() {
        }
        
        public GetDefaultConfigResponse(Queue.Services.Server.Tests.ServerServiceReference.DefaultConfig GetDefaultConfigResult) {
            this.GetDefaultConfigResult = GetDefaultConfigResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditDefaultConfig", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditDefaultConfigRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.DefaultConfig config;
        
        public EditDefaultConfigRequest() {
        }
        
        public EditDefaultConfigRequest(Queue.Services.Server.Tests.ServerServiceReference.DefaultConfig config) {
            this.config = config;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditDefaultConfigResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditDefaultConfigResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.DefaultConfig EditDefaultConfigResult;
        
        public EditDefaultConfigResponse() {
        }
        
        public EditDefaultConfigResponse(Queue.Services.Server.Tests.ServerServiceReference.DefaultConfig EditDefaultConfigResult) {
            this.EditDefaultConfigResult = EditDefaultConfigResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetDesignConfig", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetDesignConfigRequest {
        
        public GetDesignConfigRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetDesignConfigResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetDesignConfigResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.DesignConfig GetDesignConfigResult;
        
        public GetDesignConfigResponse() {
        }
        
        public GetDesignConfigResponse(Queue.Services.Server.Tests.ServerServiceReference.DesignConfig GetDesignConfigResult) {
            this.GetDesignConfigResult = GetDesignConfigResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditDesignConfig", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditDesignConfigRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.DesignConfig config;
        
        public EditDesignConfigRequest() {
        }
        
        public EditDesignConfigRequest(Queue.Services.Server.Tests.ServerServiceReference.DesignConfig config) {
            this.config = config;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditDesignConfigResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditDesignConfigResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.DesignConfig EditDesignConfigResult;
        
        public EditDesignConfigResponse() {
        }
        
        public EditDesignConfigResponse(Queue.Services.Server.Tests.ServerServiceReference.DesignConfig EditDesignConfigResult) {
            this.EditDesignConfigResult = EditDesignConfigResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCouponConfig", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetCouponConfigRequest {
        
        public GetCouponConfigRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCouponConfigResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetCouponConfigResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.CouponConfig GetCouponConfigResult;
        
        public GetCouponConfigResponse() {
        }
        
        public GetCouponConfigResponse(Queue.Services.Server.Tests.ServerServiceReference.CouponConfig GetCouponConfigResult) {
            this.GetCouponConfigResult = GetCouponConfigResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditCouponConfig", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditCouponConfigRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.CouponConfig config;
        
        public EditCouponConfigRequest() {
        }
        
        public EditCouponConfigRequest(Queue.Services.Server.Tests.ServerServiceReference.CouponConfig config) {
            this.config = config;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditCouponConfigResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditCouponConfigResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.CouponConfig EditCouponConfigResult;
        
        public EditCouponConfigResponse() {
        }
        
        public EditCouponConfigResponse(Queue.Services.Server.Tests.ServerServiceReference.CouponConfig EditCouponConfigResult) {
            this.EditCouponConfigResult = EditCouponConfigResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetSMTPConfig", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetSMTPConfigRequest {
        
        public GetSMTPConfigRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetSMTPConfigResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetSMTPConfigResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.SMTPConfig GetSMTPConfigResult;
        
        public GetSMTPConfigResponse() {
        }
        
        public GetSMTPConfigResponse(Queue.Services.Server.Tests.ServerServiceReference.SMTPConfig GetSMTPConfigResult) {
            this.GetSMTPConfigResult = GetSMTPConfigResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditSMTPConfig", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditSMTPConfigRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.SMTPConfig config;
        
        public EditSMTPConfigRequest() {
        }
        
        public EditSMTPConfigRequest(Queue.Services.Server.Tests.ServerServiceReference.SMTPConfig config) {
            this.config = config;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditSMTPConfigResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditSMTPConfigResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.SMTPConfig EditSMTPConfigResult;
        
        public EditSMTPConfigResponse() {
        }
        
        public EditSMTPConfigResponse(Queue.Services.Server.Tests.ServerServiceReference.SMTPConfig EditSMTPConfigResult) {
            this.EditSMTPConfigResult = EditSMTPConfigResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetPortalConfig", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetPortalConfigRequest {
        
        public GetPortalConfigRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetPortalConfigResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetPortalConfigResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.PortalConfig GetPortalConfigResult;
        
        public GetPortalConfigResponse() {
        }
        
        public GetPortalConfigResponse(Queue.Services.Server.Tests.ServerServiceReference.PortalConfig GetPortalConfigResult) {
            this.GetPortalConfigResult = GetPortalConfigResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditPortalConfig", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditPortalConfigRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.PortalConfig config;
        
        public EditPortalConfigRequest() {
        }
        
        public EditPortalConfigRequest(Queue.Services.Server.Tests.ServerServiceReference.PortalConfig config) {
            this.config = config;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditPortalConfigResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditPortalConfigResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.PortalConfig EditPortalConfigResult;
        
        public EditPortalConfigResponse() {
        }
        
        public EditPortalConfigResponse(Queue.Services.Server.Tests.ServerServiceReference.PortalConfig EditPortalConfigResult) {
            this.EditPortalConfigResult = EditPortalConfigResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetMediaConfig", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetMediaConfigRequest {
        
        public GetMediaConfigRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetMediaConfigResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetMediaConfigResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.MediaConfig GetMediaConfigResult;
        
        public GetMediaConfigResponse() {
        }
        
        public GetMediaConfigResponse(Queue.Services.Server.Tests.ServerServiceReference.MediaConfig GetMediaConfigResult) {
            this.GetMediaConfigResult = GetMediaConfigResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditMediaConfig", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditMediaConfigRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.MediaConfig config;
        
        public EditMediaConfigRequest() {
        }
        
        public EditMediaConfigRequest(Queue.Services.Server.Tests.ServerServiceReference.MediaConfig config) {
            this.config = config;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditMediaConfigResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditMediaConfigResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.MediaConfig EditMediaConfigResult;
        
        public EditMediaConfigResponse() {
        }
        
        public EditMediaConfigResponse(Queue.Services.Server.Tests.ServerServiceReference.MediaConfig EditMediaConfigResult) {
            this.EditMediaConfigResult = EditMediaConfigResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetMediaConfigFiles", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetMediaConfigFilesRequest {
        
        public GetMediaConfigFilesRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetMediaConfigFilesResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetMediaConfigFilesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.MediaConfigFile[] GetMediaConfigFilesResult;
        
        public GetMediaConfigFilesResponse() {
        }
        
        public GetMediaConfigFilesResponse(Queue.Services.Server.Tests.ServerServiceReference.MediaConfigFile[] GetMediaConfigFilesResult) {
            this.GetMediaConfigFilesResult = GetMediaConfigFilesResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetMediaConfigFile", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetMediaConfigFileRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid mediaConfigFileId;
        
        public GetMediaConfigFileRequest() {
        }
        
        public GetMediaConfigFileRequest(System.Guid mediaConfigFileId) {
            this.mediaConfigFileId = mediaConfigFileId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetMediaConfigFileResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetMediaConfigFileResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.MediaConfigFile GetMediaConfigFileResult;
        
        public GetMediaConfigFileResponse() {
        }
        
        public GetMediaConfigFileResponse(Queue.Services.Server.Tests.ServerServiceReference.MediaConfigFile GetMediaConfigFileResult) {
            this.GetMediaConfigFileResult = GetMediaConfigFileResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditMediaConfigFile", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditMediaConfigFileRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.MediaConfigFile config;
        
        public EditMediaConfigFileRequest() {
        }
        
        public EditMediaConfigFileRequest(Queue.Services.Server.Tests.ServerServiceReference.MediaConfigFile config) {
            this.config = config;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditMediaConfigFileResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditMediaConfigFileResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.MediaConfigFile EditMediaConfigFileResult;
        
        public EditMediaConfigFileResponse() {
        }
        
        public EditMediaConfigFileResponse(Queue.Services.Server.Tests.ServerServiceReference.MediaConfigFile EditMediaConfigFileResult) {
            this.EditMediaConfigFileResult = EditMediaConfigFileResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteMediaConfigFile", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class DeleteMediaConfigFileRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid mediaConfigFileId;
        
        public DeleteMediaConfigFileRequest() {
        }
        
        public DeleteMediaConfigFileRequest(System.Guid mediaConfigFileId) {
            this.mediaConfigFileId = mediaConfigFileId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteMediaConfigFileResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class DeleteMediaConfigFileResponse {
        
        public DeleteMediaConfigFileResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetTerminalConfig", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetTerminalConfigRequest {
        
        public GetTerminalConfigRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetTerminalConfigResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetTerminalConfigResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.TerminalConfig GetTerminalConfigResult;
        
        public GetTerminalConfigResponse() {
        }
        
        public GetTerminalConfigResponse(Queue.Services.Server.Tests.ServerServiceReference.TerminalConfig GetTerminalConfigResult) {
            this.GetTerminalConfigResult = GetTerminalConfigResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditTerminalConfig", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditTerminalConfigRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.TerminalConfig config;
        
        public EditTerminalConfigRequest() {
        }
        
        public EditTerminalConfigRequest(Queue.Services.Server.Tests.ServerServiceReference.TerminalConfig config) {
            this.config = config;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditTerminalConfigResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditTerminalConfigResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.TerminalConfig EditTerminalConfigResult;
        
        public EditTerminalConfigResponse() {
        }
        
        public EditTerminalConfigResponse(Queue.Services.Server.Tests.ServerServiceReference.TerminalConfig EditTerminalConfigResult) {
            this.EditTerminalConfigResult = EditTerminalConfigResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetNotificationConfig", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetNotificationConfigRequest {
        
        public GetNotificationConfigRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetNotificationConfigResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetNotificationConfigResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.NotificationConfig GetNotificationConfigResult;
        
        public GetNotificationConfigResponse() {
        }
        
        public GetNotificationConfigResponse(Queue.Services.Server.Tests.ServerServiceReference.NotificationConfig GetNotificationConfigResult) {
            this.GetNotificationConfigResult = GetNotificationConfigResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditNotificationConfig", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditNotificationConfigRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.NotificationConfig config;
        
        public EditNotificationConfigRequest() {
        }
        
        public EditNotificationConfigRequest(Queue.Services.Server.Tests.ServerServiceReference.NotificationConfig config) {
            this.config = config;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditNotificationConfigResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditNotificationConfigResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.NotificationConfig EditNotificationConfigResult;
        
        public EditNotificationConfigResponse() {
        }
        
        public EditNotificationConfigResponse(Queue.Services.Server.Tests.ServerServiceReference.NotificationConfig EditNotificationConfigResult) {
            this.EditNotificationConfigResult = EditNotificationConfigResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetQueuePlanMetric", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetQueuePlanMetricRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public int year;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=1)]
        public int month;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=2)]
        public int day;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=3)]
        public int hour;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=4)]
        public int minute;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=5)]
        public int second;
        
        public GetQueuePlanMetricRequest() {
        }
        
        public GetQueuePlanMetricRequest(int year, int month, int day, int hour, int minute, int second) {
            this.year = year;
            this.month = month;
            this.day = day;
            this.hour = hour;
            this.minute = minute;
            this.second = second;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetQueuePlanMetricResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetQueuePlanMetricResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.QueuePlanMetric GetQueuePlanMetricResult;
        
        public GetQueuePlanMetricResponse() {
        }
        
        public GetQueuePlanMetricResponse(Queue.Services.Server.Tests.ServerServiceReference.QueuePlanMetric GetQueuePlanMetricResult) {
            this.GetQueuePlanMetricResult = GetQueuePlanMetricResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetQueuePlanServiceMetric", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetQueuePlanServiceMetricRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public int year;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=1)]
        public int month;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=2)]
        public int day;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=3)]
        public int hour;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=4)]
        public int minute;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=5)]
        public int second;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=6)]
        public System.Guid serviceId;
        
        public GetQueuePlanServiceMetricRequest() {
        }
        
        public GetQueuePlanServiceMetricRequest(int year, int month, int day, int hour, int minute, int second, System.Guid serviceId) {
            this.year = year;
            this.month = month;
            this.day = day;
            this.hour = hour;
            this.minute = minute;
            this.second = second;
            this.serviceId = serviceId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetQueuePlanServiceMetricResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetQueuePlanServiceMetricResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.QueuePlanServiceMetric GetQueuePlanServiceMetricResult;
        
        public GetQueuePlanServiceMetricResponse() {
        }
        
        public GetQueuePlanServiceMetricResponse(Queue.Services.Server.Tests.ServerServiceReference.QueuePlanServiceMetric GetQueuePlanServiceMetricResult) {
            this.GetQueuePlanServiceMetricResult = GetQueuePlanServiceMetricResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetDateTime", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetDateTimeRequest {
        
        public GetDateTimeRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetDateTimeResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetDateTimeResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.DateTime GetDateTimeResult;
        
        public GetDateTimeResponse() {
        }
        
        public GetDateTimeResponse(System.DateTime GetDateTimeResult) {
            this.GetDateTimeResult = GetDateTimeResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetClient", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetClientRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid clientId;
        
        public GetClientRequest() {
        }
        
        public GetClientRequest(System.Guid clientId) {
            this.clientId = clientId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetClientResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetClientResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Client GetClientResult;
        
        public GetClientResponse() {
        }
        
        public GetClientResponse(Queue.Services.Server.Tests.ServerServiceReference.Client GetClientResult) {
            this.GetClientResult = GetClientResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="OpenClientSession", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class OpenClientSessionRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid sessionId;
        
        public OpenClientSessionRequest() {
        }
        
        public OpenClientSessionRequest(System.Guid sessionId) {
            this.sessionId = sessionId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="OpenClientSessionResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class OpenClientSessionResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Client OpenClientSessionResult;
        
        public OpenClientSessionResponse() {
        }
        
        public OpenClientSessionResponse(Queue.Services.Server.Tests.ServerServiceReference.Client OpenClientSessionResult) {
            this.OpenClientSessionResult = OpenClientSessionResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetClientByIdentity", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetClientByIdentityRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public string identity;
        
        public GetClientByIdentityRequest() {
        }
        
        public GetClientByIdentityRequest(string identity) {
            this.identity = identity;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetClientByIdentityResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetClientByIdentityResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Client GetClientByIdentityResult;
        
        public GetClientByIdentityResponse() {
        }
        
        public GetClientByIdentityResponse(Queue.Services.Server.Tests.ServerServiceReference.Client GetClientByIdentityResult) {
            this.GetClientByIdentityResult = GetClientByIdentityResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FindClients", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class FindClientsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public int startIndex;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=1)]
        public int maxResults;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=2)]
        public string filter;
        
        public FindClientsRequest() {
        }
        
        public FindClientsRequest(int startIndex, int maxResults, string filter) {
            this.startIndex = startIndex;
            this.maxResults = maxResults;
            this.filter = filter;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FindClientsResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class FindClientsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Client[] FindClientsResult;
        
        public FindClientsResponse() {
        }
        
        public FindClientsResponse(Queue.Services.Server.Tests.ServerServiceReference.Client[] FindClientsResult) {
            this.FindClientsResult = FindClientsResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ClientLogin", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class ClientLoginRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public string email;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=1)]
        public string password;
        
        public ClientLoginRequest() {
        }
        
        public ClientLoginRequest(string email, string password) {
            this.email = email;
            this.password = password;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ClientLoginResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class ClientLoginResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Client ClientLoginResult;
        
        public ClientLoginResponse() {
        }
        
        public ClientLoginResponse(Queue.Services.Server.Tests.ServerServiceReference.Client ClientLoginResult) {
            this.ClientLoginResult = ClientLoginResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ClientRestorePassword", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class ClientRestorePasswordRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public string email;
        
        public ClientRestorePasswordRequest() {
        }
        
        public ClientRestorePasswordRequest(string email) {
            this.email = email;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ClientRestorePasswordResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class ClientRestorePasswordResponse {
        
        public ClientRestorePasswordResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditClient", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditClientRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Client client;
        
        public EditClientRequest() {
        }
        
        public EditClientRequest(Queue.Services.Server.Tests.ServerServiceReference.Client client) {
            this.client = client;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditClientResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditClientResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Client EditClientResult;
        
        public EditClientResponse() {
        }
        
        public EditClientResponse(Queue.Services.Server.Tests.ServerServiceReference.Client EditClientResult) {
            this.EditClientResult = EditClientResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ChangeClientPassword", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class ChangeClientPasswordRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid clientId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=1)]
        public string password;
        
        public ChangeClientPasswordRequest() {
        }
        
        public ChangeClientPasswordRequest(System.Guid clientId, string password) {
            this.clientId = clientId;
            this.password = password;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ChangeClientPasswordResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class ChangeClientPasswordResponse {
        
        public ChangeClientPasswordResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteClient", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class DeleteClientRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid clientId;
        
        public DeleteClientRequest() {
        }
        
        public DeleteClientRequest(System.Guid clientId) {
            this.clientId = clientId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteClientResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class DeleteClientResponse {
        
        public DeleteClientResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SendPINToEmail", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class SendPINToEmailRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public string email;
        
        public SendPINToEmailRequest() {
        }
        
        public SendPINToEmailRequest(string email) {
            this.email = email;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SendPINToEmailResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class SendPINToEmailResponse {
        
        public SendPINToEmailResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CheckPIN", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class CheckPINRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public string email;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=1)]
        public int source;
        
        public CheckPINRequest() {
        }
        
        public CheckPINRequest(string email, int source) {
            this.email = email;
            this.source = source;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CheckPINResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class CheckPINResponse {
        
        public CheckPINResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FindClientRequests", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class FindClientRequestsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public int startIndex;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=1)]
        public int maxResults;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=2)]
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequestFilter filter;
        
        public FindClientRequestsRequest() {
        }
        
        public FindClientRequestsRequest(int startIndex, int maxResults, Queue.Services.Server.Tests.ServerServiceReference.ClientRequestFilter filter) {
            this.startIndex = startIndex;
            this.maxResults = maxResults;
            this.filter = filter;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FindClientRequestsResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class FindClientRequestsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequest[] FindClientRequestsResult;
        
        public FindClientRequestsResponse() {
        }
        
        public FindClientRequestsResponse(Queue.Services.Server.Tests.ServerServiceReference.ClientRequest[] FindClientRequestsResult) {
            this.FindClientRequestsResult = FindClientRequestsResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetClientRequest", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetClientRequestRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid clientRequestId;
        
        public GetClientRequestRequest() {
        }
        
        public GetClientRequestRequest(System.Guid clientRequestId) {
            this.clientRequestId = clientRequestId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetClientRequestResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetClientRequestResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequest GetClientRequestResult;
        
        public GetClientRequestResponse() {
        }
        
        public GetClientRequestResponse(Queue.Services.Server.Tests.ServerServiceReference.ClientRequest GetClientRequestResult) {
            this.GetClientRequestResult = GetClientRequestResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetClientRequestEvents", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetClientRequestEventsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid clientRequestId;
        
        public GetClientRequestEventsRequest() {
        }
        
        public GetClientRequestEventsRequest(System.Guid clientRequestId) {
            this.clientRequestId = clientRequestId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetClientRequestEventsResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetClientRequestEventsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequestEvent[] GetClientRequestEventsResult;
        
        public GetClientRequestEventsResponse() {
        }
        
        public GetClientRequestEventsResponse(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestEvent[] GetClientRequestEventsResult) {
            this.GetClientRequestEventsResult = GetClientRequestEventsResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddEarlyClientRequest", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class AddEarlyClientRequestRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid clientId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=1)]
        public System.Guid serviceId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=2)]
        public System.DateTime requestDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=3)]
        public System.TimeSpan requestTime;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=4)]
        public System.Collections.Generic.Dictionary<System.Guid, object> parameters;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=5)]
        public int subjects;
        
        public AddEarlyClientRequestRequest() {
        }
        
        public AddEarlyClientRequestRequest(System.Guid clientId, System.Guid serviceId, System.DateTime requestDate, System.TimeSpan requestTime, System.Collections.Generic.Dictionary<System.Guid, object> parameters, int subjects) {
            this.clientId = clientId;
            this.serviceId = serviceId;
            this.requestDate = requestDate;
            this.requestTime = requestTime;
            this.parameters = parameters;
            this.subjects = subjects;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddEarlyClientRequestResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class AddEarlyClientRequestResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequest AddEarlyClientRequestResult;
        
        public AddEarlyClientRequestResponse() {
        }
        
        public AddEarlyClientRequestResponse(Queue.Services.Server.Tests.ServerServiceReference.ClientRequest AddEarlyClientRequestResult) {
            this.AddEarlyClientRequestResult = AddEarlyClientRequestResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddLiveClientRequest", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class AddLiveClientRequestRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid clientId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=1)]
        public System.Guid serviceId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=2)]
        public bool isPriority;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=3)]
        public System.Collections.Generic.Dictionary<System.Guid, object> parameters;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=4)]
        public int subjects;
        
        public AddLiveClientRequestRequest() {
        }
        
        public AddLiveClientRequestRequest(System.Guid clientId, System.Guid serviceId, bool isPriority, System.Collections.Generic.Dictionary<System.Guid, object> parameters, int subjects) {
            this.clientId = clientId;
            this.serviceId = serviceId;
            this.isPriority = isPriority;
            this.parameters = parameters;
            this.subjects = subjects;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddLiveClientRequestResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class AddLiveClientRequestResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequest AddLiveClientRequestResult;
        
        public AddLiveClientRequestResponse() {
        }
        
        public AddLiveClientRequestResponse(Queue.Services.Server.Tests.ServerServiceReference.ClientRequest AddLiveClientRequestResult) {
            this.AddLiveClientRequestResult = AddLiveClientRequestResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditClientRequest", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditClientRequestRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequest source;
        
        public EditClientRequestRequest() {
        }
        
        public EditClientRequestRequest(Queue.Services.Server.Tests.ServerServiceReference.ClientRequest source) {
            this.source = source;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditClientRequestResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditClientRequestResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequest EditClientRequestResult;
        
        public EditClientRequestResponse() {
        }
        
        public EditClientRequestResponse(Queue.Services.Server.Tests.ServerServiceReference.ClientRequest EditClientRequestResult) {
            this.EditClientRequestResult = EditClientRequestResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetClientRequestCoupon", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetClientRequestCouponRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid clientRequestId;
        
        public GetClientRequestCouponRequest() {
        }
        
        public GetClientRequestCouponRequest(System.Guid clientRequestId) {
            this.clientRequestId = clientRequestId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetClientRequestCouponResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetClientRequestCouponResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequestCoupon GetClientRequestCouponResult;
        
        public GetClientRequestCouponResponse() {
        }
        
        public GetClientRequestCouponResponse(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestCoupon GetClientRequestCouponResult) {
            this.GetClientRequestCouponResult = GetClientRequestCouponResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteClientRequest", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class DeleteClientRequestRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid clientRequestId;
        
        public DeleteClientRequestRequest() {
        }
        
        public DeleteClientRequestRequest(System.Guid clientRequestId) {
            this.clientRequestId = clientRequestId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteClientRequestResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class DeleteClientRequestResponse {
        
        public DeleteClientRequestResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CancelClientRequest", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class CancelClientRequestRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid clientRequestId;
        
        public CancelClientRequestRequest() {
        }
        
        public CancelClientRequestRequest(System.Guid clientRequestId) {
            this.clientRequestId = clientRequestId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CancelClientRequestResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class CancelClientRequestResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequest CancelClientRequestResult;
        
        public CancelClientRequestResponse() {
        }
        
        public CancelClientRequestResponse(Queue.Services.Server.Tests.ServerServiceReference.ClientRequest CancelClientRequestResult) {
            this.CancelClientRequestResult = CancelClientRequestResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RestoreClientRequest", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class RestoreClientRequestRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid clientRequestId;
        
        public RestoreClientRequestRequest() {
        }
        
        public RestoreClientRequestRequest(System.Guid clientRequestId) {
            this.clientRequestId = clientRequestId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RestoreClientRequestResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class RestoreClientRequestResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequest RestoreClientRequestResult;
        
        public RestoreClientRequestResponse() {
        }
        
        public RestoreClientRequestResponse(Queue.Services.Server.Tests.ServerServiceReference.ClientRequest RestoreClientRequestResult) {
            this.RestoreClientRequestResult = RestoreClientRequestResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PostponeClientRequest", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class PostponeClientRequestRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid clientRequestId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=1)]
        public System.TimeSpan postponeTime;
        
        public PostponeClientRequestRequest() {
        }
        
        public PostponeClientRequestRequest(System.Guid clientRequestId, System.TimeSpan postponeTime) {
            this.clientRequestId = clientRequestId;
            this.postponeTime = postponeTime;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PostponeClientRequestResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class PostponeClientRequestResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequest PostponeClientRequestResult;
        
        public PostponeClientRequestResponse() {
        }
        
        public PostponeClientRequestResponse(Queue.Services.Server.Tests.ServerServiceReference.ClientRequest PostponeClientRequestResult) {
            this.PostponeClientRequestResult = PostponeClientRequestResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetClientRequestParameters", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetClientRequestParametersRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid clientRequestId;
        
        public GetClientRequestParametersRequest() {
        }
        
        public GetClientRequestParametersRequest(System.Guid clientRequestId) {
            this.clientRequestId = clientRequestId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetClientRequestParametersResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetClientRequestParametersResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequestParameter[] GetClientRequestParametersResult;
        
        public GetClientRequestParametersResponse() {
        }
        
        public GetClientRequestParametersResponse(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestParameter[] GetClientRequestParametersResult) {
            this.GetClientRequestParametersResult = GetClientRequestParametersResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetClientRequestAdditionalServices", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetClientRequestAdditionalServicesRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid clientRequestId;
        
        public GetClientRequestAdditionalServicesRequest() {
        }
        
        public GetClientRequestAdditionalServicesRequest(System.Guid clientRequestId) {
            this.clientRequestId = clientRequestId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetClientRequestAdditionalServicesResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetClientRequestAdditionalServicesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequestAdditionalService[] GetClientRequestAdditionalServicesResult;
        
        public GetClientRequestAdditionalServicesResponse() {
        }
        
        public GetClientRequestAdditionalServicesResponse(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestAdditionalService[] GetClientRequestAdditionalServicesResult) {
            this.GetClientRequestAdditionalServicesResult = GetClientRequestAdditionalServicesResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetClientRequestAdditionalService", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetClientRequestAdditionalServiceRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid clientRequestAdditionalServiceId;
        
        public GetClientRequestAdditionalServiceRequest() {
        }
        
        public GetClientRequestAdditionalServiceRequest(System.Guid clientRequestAdditionalServiceId) {
            this.clientRequestAdditionalServiceId = clientRequestAdditionalServiceId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetClientRequestAdditionalServiceResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetClientRequestAdditionalServiceResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequestAdditionalService GetClientRequestAdditionalServiceResult;
        
        public GetClientRequestAdditionalServiceResponse() {
        }
        
        public GetClientRequestAdditionalServiceResponse(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestAdditionalService GetClientRequestAdditionalServiceResult) {
            this.GetClientRequestAdditionalServiceResult = GetClientRequestAdditionalServiceResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditClientRequestAdditionalService", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditClientRequestAdditionalServiceRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequestAdditionalService source;
        
        public EditClientRequestAdditionalServiceRequest() {
        }
        
        public EditClientRequestAdditionalServiceRequest(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestAdditionalService source) {
            this.source = source;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditClientRequestAdditionalServiceResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditClientRequestAdditionalServiceResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequestAdditionalService EditClientRequestAdditionalServiceResult;
        
        public EditClientRequestAdditionalServiceResponse() {
        }
        
        public EditClientRequestAdditionalServiceResponse(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestAdditionalService EditClientRequestAdditionalServiceResult) {
            this.EditClientRequestAdditionalServiceResult = EditClientRequestAdditionalServiceResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteClientRequestAdditionalService", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class DeleteClientRequestAdditionalServiceRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid clientRequestAdditionalServiceId;
        
        public DeleteClientRequestAdditionalServiceRequest() {
        }
        
        public DeleteClientRequestAdditionalServiceRequest(System.Guid clientRequestAdditionalServiceId) {
            this.clientRequestAdditionalServiceId = clientRequestAdditionalServiceId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteClientRequestAdditionalServiceResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class DeleteClientRequestAdditionalServiceResponse {
        
        public DeleteClientRequestAdditionalServiceResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetOperatorClientRequestPlans", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetOperatorClientRequestPlansRequest {
        
        public GetOperatorClientRequestPlansRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetOperatorClientRequestPlansResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetOperatorClientRequestPlansResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequestPlan[] GetOperatorClientRequestPlansResult;
        
        public GetOperatorClientRequestPlansResponse() {
        }
        
        public GetOperatorClientRequestPlansResponse(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestPlan[] GetOperatorClientRequestPlansResult) {
            this.GetOperatorClientRequestPlansResult = GetOperatorClientRequestPlansResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCurrentClientRequestPlans", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetCurrentClientRequestPlansRequest {
        
        public GetCurrentClientRequestPlansRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCurrentClientRequestPlansResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetCurrentClientRequestPlansResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Collections.Generic.Dictionary<Queue.Services.Server.Tests.ServerServiceReference.Operator, Queue.Services.Server.Tests.ServerServiceReference.ClientRequestPlan> GetCurrentClientRequestPlansResult;
        
        public GetCurrentClientRequestPlansResponse() {
        }
        
        public GetCurrentClientRequestPlansResponse(System.Collections.Generic.Dictionary<Queue.Services.Server.Tests.ServerServiceReference.Operator, Queue.Services.Server.Tests.ServerServiceReference.ClientRequestPlan> GetCurrentClientRequestPlansResult) {
            this.GetCurrentClientRequestPlansResult = GetCurrentClientRequestPlansResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCurrentClientRequestPlan", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetCurrentClientRequestPlanRequest {
        
        public GetCurrentClientRequestPlanRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCurrentClientRequestPlanResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetCurrentClientRequestPlanResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequestPlan GetCurrentClientRequestPlanResult;
        
        public GetCurrentClientRequestPlanResponse() {
        }
        
        public GetCurrentClientRequestPlanResponse(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestPlan GetCurrentClientRequestPlanResult) {
            this.GetCurrentClientRequestPlanResult = GetCurrentClientRequestPlanResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditCurrentClientRequest", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditCurrentClientRequestRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequest source;
        
        public EditCurrentClientRequestRequest() {
        }
        
        public EditCurrentClientRequestRequest(Queue.Services.Server.Tests.ServerServiceReference.ClientRequest source) {
            this.source = source;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditCurrentClientRequestResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditCurrentClientRequestResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequest EditCurrentClientRequestResult;
        
        public EditCurrentClientRequestResponse() {
        }
        
        public EditCurrentClientRequestResponse(Queue.Services.Server.Tests.ServerServiceReference.ClientRequest EditCurrentClientRequestResult) {
            this.EditCurrentClientRequestResult = EditCurrentClientRequestResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UpdateCurrentClientRequest", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class UpdateCurrentClientRequestRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequestState state;
        
        public UpdateCurrentClientRequestRequest() {
        }
        
        public UpdateCurrentClientRequestRequest(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestState state) {
            this.state = state;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UpdateCurrentClientRequestResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class UpdateCurrentClientRequestResponse {
        
        public UpdateCurrentClientRequestResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RedirectToOperatorCurrentClientRequest", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class RedirectToOperatorCurrentClientRequestRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid redirectOperatorId;
        
        public RedirectToOperatorCurrentClientRequestRequest() {
        }
        
        public RedirectToOperatorCurrentClientRequestRequest(System.Guid redirectOperatorId) {
            this.redirectOperatorId = redirectOperatorId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RedirectToOperatorCurrentClientRequestResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class RedirectToOperatorCurrentClientRequestResponse {
        
        public RedirectToOperatorCurrentClientRequestResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CallClientByRequestNumber", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class CallClientByRequestNumberRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public int number;
        
        public CallClientByRequestNumberRequest() {
        }
        
        public CallClientByRequestNumberRequest(int number) {
            this.number = number;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CallClientByRequestNumberResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class CallClientByRequestNumberResponse {
        
        public CallClientByRequestNumberResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PostponeCurrentClientRequest", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class PostponeCurrentClientRequestRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.TimeSpan postponeTime;
        
        public PostponeCurrentClientRequestRequest() {
        }
        
        public PostponeCurrentClientRequestRequest(System.TimeSpan postponeTime) {
            this.postponeTime = postponeTime;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PostponeCurrentClientRequestResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class PostponeCurrentClientRequestResponse {
        
        public PostponeCurrentClientRequestResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ReturnCurrentClientRequest", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class ReturnCurrentClientRequestRequest {
        
        public ReturnCurrentClientRequestRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ReturnCurrentClientRequestResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class ReturnCurrentClientRequestResponse {
        
        public ReturnCurrentClientRequestResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CallCurrentClient", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class CallCurrentClientRequest {
        
        public CallCurrentClientRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CallCurrentClientResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class CallCurrentClientResponse {
        
        public CallCurrentClientResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetQueuePlan", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetQueuePlanRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.DateTime planDate;
        
        public GetQueuePlanRequest() {
        }
        
        public GetQueuePlanRequest(System.DateTime planDate) {
            this.planDate = planDate;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetQueuePlanResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetQueuePlanResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.QueuePlan GetQueuePlanResult;
        
        public GetQueuePlanResponse() {
        }
        
        public GetQueuePlanResponse(Queue.Services.Server.Tests.ServerServiceReference.QueuePlan GetQueuePlanResult) {
            this.GetQueuePlanResult = GetQueuePlanResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServiceFreeTime", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetServiceFreeTimeRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid serviceId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=1)]
        public System.DateTime planDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=2)]
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequestType queueType;
        
        public GetServiceFreeTimeRequest() {
        }
        
        public GetServiceFreeTimeRequest(System.Guid serviceId, System.DateTime planDate, Queue.Services.Server.Tests.ServerServiceReference.ClientRequestType queueType) {
            this.serviceId = serviceId;
            this.planDate = planDate;
            this.queueType = queueType;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServiceFreeTimeResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetServiceFreeTimeResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceFreeTime GetServiceFreeTimeResult;
        
        public GetServiceFreeTimeResponse() {
        }
        
        public GetServiceFreeTimeResponse(Queue.Services.Server.Tests.ServerServiceReference.ServiceFreeTime GetServiceFreeTimeResult) {
            this.GetServiceFreeTimeResult = GetServiceFreeTimeResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RefreshTodayQueuePlan", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class RefreshTodayQueuePlanRequest {
        
        public RefreshTodayQueuePlanRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RefreshTodayQueuePlanResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class RefreshTodayQueuePlanResponse {
        
        public RefreshTodayQueuePlanResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRootServiceGroups", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetRootServiceGroupsRequest {
        
        public GetRootServiceGroupsRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRootServiceGroupsResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetRootServiceGroupsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceGroup[] GetRootServiceGroupsResult;
        
        public GetRootServiceGroupsResponse() {
        }
        
        public GetRootServiceGroupsResponse(Queue.Services.Server.Tests.ServerServiceReference.ServiceGroup[] GetRootServiceGroupsResult) {
            this.GetRootServiceGroupsResult = GetRootServiceGroupsResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServiceGroups", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetServiceGroupsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid parentServiceGroupId;
        
        public GetServiceGroupsRequest() {
        }
        
        public GetServiceGroupsRequest(System.Guid parentServiceGroupId) {
            this.parentServiceGroupId = parentServiceGroupId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServiceGroupsResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetServiceGroupsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceGroup[] GetServiceGroupsResult;
        
        public GetServiceGroupsResponse() {
        }
        
        public GetServiceGroupsResponse(Queue.Services.Server.Tests.ServerServiceReference.ServiceGroup[] GetServiceGroupsResult) {
            this.GetServiceGroupsResult = GetServiceGroupsResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServiceGroup", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetServiceGroupRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid serviceGroupId;
        
        public GetServiceGroupRequest() {
        }
        
        public GetServiceGroupRequest(System.Guid serviceGroupId) {
            this.serviceGroupId = serviceGroupId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServiceGroupResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetServiceGroupResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceGroup GetServiceGroupResult;
        
        public GetServiceGroupResponse() {
        }
        
        public GetServiceGroupResponse(Queue.Services.Server.Tests.ServerServiceReference.ServiceGroup GetServiceGroupResult) {
            this.GetServiceGroupResult = GetServiceGroupResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditServiceGroup", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditServiceGroupRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceGroup serviceGroup;
        
        public EditServiceGroupRequest() {
        }
        
        public EditServiceGroupRequest(Queue.Services.Server.Tests.ServerServiceReference.ServiceGroup serviceGroup) {
            this.serviceGroup = serviceGroup;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditServiceGroupResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditServiceGroupResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceGroup EditServiceGroupResult;
        
        public EditServiceGroupResponse() {
        }
        
        public EditServiceGroupResponse(Queue.Services.Server.Tests.ServerServiceReference.ServiceGroup EditServiceGroupResult) {
            this.EditServiceGroupResult = EditServiceGroupResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MoveServiceGroup", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class MoveServiceGroupRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid sourceGroupId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=1)]
        public System.Guid targetGroupId;
        
        public MoveServiceGroupRequest() {
        }
        
        public MoveServiceGroupRequest(System.Guid sourceGroupId, System.Guid targetGroupId) {
            this.sourceGroupId = sourceGroupId;
            this.targetGroupId = targetGroupId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MoveServiceGroupResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class MoveServiceGroupResponse {
        
        public MoveServiceGroupResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MoveServiceGroupToRoot", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class MoveServiceGroupToRootRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid sourceGroupId;
        
        public MoveServiceGroupToRootRequest() {
        }
        
        public MoveServiceGroupToRootRequest(System.Guid sourceGroupId) {
            this.sourceGroupId = sourceGroupId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MoveServiceGroupToRootResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class MoveServiceGroupToRootResponse {
        
        public MoveServiceGroupToRootResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ServiceGroupUp", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class ServiceGroupUpRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid serviceGroupId;
        
        public ServiceGroupUpRequest() {
        }
        
        public ServiceGroupUpRequest(System.Guid serviceGroupId) {
            this.serviceGroupId = serviceGroupId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ServiceGroupUpResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class ServiceGroupUpResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public bool ServiceGroupUpResult;
        
        public ServiceGroupUpResponse() {
        }
        
        public ServiceGroupUpResponse(bool ServiceGroupUpResult) {
            this.ServiceGroupUpResult = ServiceGroupUpResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ServiceGroupDown", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class ServiceGroupDownRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid serviceGroupId;
        
        public ServiceGroupDownRequest() {
        }
        
        public ServiceGroupDownRequest(System.Guid serviceGroupId) {
            this.serviceGroupId = serviceGroupId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ServiceGroupDownResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class ServiceGroupDownResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public bool ServiceGroupDownResult;
        
        public ServiceGroupDownResponse() {
        }
        
        public ServiceGroupDownResponse(bool ServiceGroupDownResult) {
            this.ServiceGroupDownResult = ServiceGroupDownResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteServiceGroup", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class DeleteServiceGroupRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid serviceGroupId;
        
        public DeleteServiceGroupRequest() {
        }
        
        public DeleteServiceGroupRequest(System.Guid serviceGroupId) {
            this.serviceGroupId = serviceGroupId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteServiceGroupResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class DeleteServiceGroupResponse {
        
        public DeleteServiceGroupResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="OpenUserSession", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class OpenUserSessionRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid sessionId;
        
        public OpenUserSessionRequest() {
        }
        
        public OpenUserSessionRequest(System.Guid sessionId) {
            this.sessionId = sessionId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="OpenUserSessionResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class OpenUserSessionResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.User OpenUserSessionResult;
        
        public OpenUserSessionResponse() {
        }
        
        public OpenUserSessionResponse(Queue.Services.Server.Tests.ServerServiceReference.User OpenUserSessionResult) {
            this.OpenUserSessionResult = OpenUserSessionResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UserHeartbeat", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class UserHeartbeatRequest {
        
        public UserHeartbeatRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UserHeartbeatResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class UserHeartbeatResponse {
        
        public UserHeartbeatResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetUsers", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetUsersRequest {
        
        public GetUsersRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetUsersResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetUsersResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.User[] GetUsersResult;
        
        public GetUsersResponse() {
        }
        
        public GetUsersResponse(Queue.Services.Server.Tests.ServerServiceReference.User[] GetUsersResult) {
            this.GetUsersResult = GetUsersResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetUser", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetUserRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid userId;
        
        public GetUserRequest() {
        }
        
        public GetUserRequest(System.Guid userId) {
            this.userId = userId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetUserResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetUserResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.User GetUserResult;
        
        public GetUserResponse() {
        }
        
        public GetUserResponse(Queue.Services.Server.Tests.ServerServiceReference.User GetUserResult) {
            this.GetUserResult = GetUserResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetUserLinks", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetUserLinksRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.UserRole userRole;
        
        public GetUserLinksRequest() {
        }
        
        public GetUserLinksRequest(Queue.Services.Server.Tests.ServerServiceReference.UserRole userRole) {
            this.userRole = userRole;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetUserLinksResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetUserLinksResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntityLink[] GetUserLinksResult;
        
        public GetUserLinksResponse() {
        }
        
        public GetUserLinksResponse(Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntityLink[] GetUserLinksResult) {
            this.GetUserLinksResult = GetUserLinksResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRedirectOperatorsLinks", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetRedirectOperatorsLinksRequest {
        
        public GetRedirectOperatorsLinksRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRedirectOperatorsLinksResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetRedirectOperatorsLinksResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntityLink[] GetRedirectOperatorsLinksResult;
        
        public GetRedirectOperatorsLinksResponse() {
        }
        
        public GetRedirectOperatorsLinksResponse(Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntityLink[] GetRedirectOperatorsLinksResult) {
            this.GetRedirectOperatorsLinksResult = GetRedirectOperatorsLinksResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UserLogin", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class UserLoginRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid userId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=1)]
        public string password;
        
        public UserLoginRequest() {
        }
        
        public UserLoginRequest(System.Guid userId, string password) {
            this.userId = userId;
            this.password = password;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UserLoginResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class UserLoginResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.User UserLoginResult;
        
        public UserLoginResponse() {
        }
        
        public UserLoginResponse(Queue.Services.Server.Tests.ServerServiceReference.User UserLoginResult) {
            this.UserLoginResult = UserLoginResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditAdministrator", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditAdministratorRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Administrator administrator;
        
        public EditAdministratorRequest() {
        }
        
        public EditAdministratorRequest(Queue.Services.Server.Tests.ServerServiceReference.Administrator administrator) {
            this.administrator = administrator;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditAdministratorResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditAdministratorResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Administrator EditAdministratorResult;
        
        public EditAdministratorResponse() {
        }
        
        public EditAdministratorResponse(Queue.Services.Server.Tests.ServerServiceReference.Administrator EditAdministratorResult) {
            this.EditAdministratorResult = EditAdministratorResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditOperator", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditOperatorRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Operator user;
        
        public EditOperatorRequest() {
        }
        
        public EditOperatorRequest(Queue.Services.Server.Tests.ServerServiceReference.Operator user) {
            this.user = user;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditOperatorResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditOperatorResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Operator EditOperatorResult;
        
        public EditOperatorResponse() {
        }
        
        public EditOperatorResponse(Queue.Services.Server.Tests.ServerServiceReference.Operator EditOperatorResult) {
            this.EditOperatorResult = EditOperatorResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteUser", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class DeleteUserRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid userId;
        
        public DeleteUserRequest() {
        }
        
        public DeleteUserRequest(System.Guid userId) {
            this.userId = userId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteUserResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class DeleteUserResponse {
        
        public DeleteUserResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetOperatorInterruptions", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetOperatorInterruptionsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.OperatorInterruptionFilter filter;
        
        public GetOperatorInterruptionsRequest() {
        }
        
        public GetOperatorInterruptionsRequest(Queue.Services.Server.Tests.ServerServiceReference.OperatorInterruptionFilter filter) {
            this.filter = filter;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetOperatorInterruptionsResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetOperatorInterruptionsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.OperatorInterruption[] GetOperatorInterruptionsResult;
        
        public GetOperatorInterruptionsResponse() {
        }
        
        public GetOperatorInterruptionsResponse(Queue.Services.Server.Tests.ServerServiceReference.OperatorInterruption[] GetOperatorInterruptionsResult) {
            this.GetOperatorInterruptionsResult = GetOperatorInterruptionsResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetOperatorInterruption", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetOperatorInterruptionRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid operatorInterruptionId;
        
        public GetOperatorInterruptionRequest() {
        }
        
        public GetOperatorInterruptionRequest(System.Guid operatorInterruptionId) {
            this.operatorInterruptionId = operatorInterruptionId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetOperatorInterruptionResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetOperatorInterruptionResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.OperatorInterruption GetOperatorInterruptionResult;
        
        public GetOperatorInterruptionResponse() {
        }
        
        public GetOperatorInterruptionResponse(Queue.Services.Server.Tests.ServerServiceReference.OperatorInterruption GetOperatorInterruptionResult) {
            this.GetOperatorInterruptionResult = GetOperatorInterruptionResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditOperatorInterruption", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditOperatorInterruptionRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.OperatorInterruption source;
        
        public EditOperatorInterruptionRequest() {
        }
        
        public EditOperatorInterruptionRequest(Queue.Services.Server.Tests.ServerServiceReference.OperatorInterruption source) {
            this.source = source;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditOperatorInterruptionResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditOperatorInterruptionResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.OperatorInterruption EditOperatorInterruptionResult;
        
        public EditOperatorInterruptionResponse() {
        }
        
        public EditOperatorInterruptionResponse(Queue.Services.Server.Tests.ServerServiceReference.OperatorInterruption EditOperatorInterruptionResult) {
            this.EditOperatorInterruptionResult = EditOperatorInterruptionResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteOperatorInterruption", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class DeleteOperatorInterruptionRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid operatorInterruptionId;
        
        public DeleteOperatorInterruptionRequest() {
        }
        
        public DeleteOperatorInterruptionRequest(System.Guid operatorInterruptionId) {
            this.operatorInterruptionId = operatorInterruptionId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteOperatorInterruptionResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class DeleteOperatorInterruptionResponse {
        
        public DeleteOperatorInterruptionResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ChangeUserPassword", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class ChangeUserPasswordRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid userId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=1)]
        public string password;
        
        public ChangeUserPasswordRequest() {
        }
        
        public ChangeUserPasswordRequest(System.Guid userId, string password) {
            this.userId = userId;
            this.password = password;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ChangeUserPasswordResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class ChangeUserPasswordResponse {
        
        public ChangeUserPasswordResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetOffices", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetOfficesRequest {
        
        public GetOfficesRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetOfficesResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetOfficesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Office[] GetOfficesResult;
        
        public GetOfficesResponse() {
        }
        
        public GetOfficesResponse(Queue.Services.Server.Tests.ServerServiceReference.Office[] GetOfficesResult) {
            this.GetOfficesResult = GetOfficesResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetOffice", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetOfficeRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid officeId;
        
        public GetOfficeRequest() {
        }
        
        public GetOfficeRequest(System.Guid officeId) {
            this.officeId = officeId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetOfficeResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetOfficeResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Office GetOfficeResult;
        
        public GetOfficeResponse() {
        }
        
        public GetOfficeResponse(Queue.Services.Server.Tests.ServerServiceReference.Office GetOfficeResult) {
            this.GetOfficeResult = GetOfficeResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditOffice", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditOfficeRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Office source;
        
        public EditOfficeRequest() {
        }
        
        public EditOfficeRequest(Queue.Services.Server.Tests.ServerServiceReference.Office source) {
            this.source = source;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditOfficeResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditOfficeResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Office EditOfficeResult;
        
        public EditOfficeResponse() {
        }
        
        public EditOfficeResponse(Queue.Services.Server.Tests.ServerServiceReference.Office EditOfficeResult) {
            this.EditOfficeResult = EditOfficeResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteOffice", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class DeleteOfficeRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid officeId;
        
        public DeleteOfficeRequest() {
        }
        
        public DeleteOfficeRequest(System.Guid officeId) {
            this.officeId = officeId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteOfficeResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class DeleteOfficeResponse {
        
        public DeleteOfficeResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAdditionalServiceLinks", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetAdditionalServiceLinksRequest {
        
        public GetAdditionalServiceLinksRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAdditionalServiceLinksResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetAdditionalServiceLinksResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntityLink[] GetAdditionalServiceLinksResult;
        
        public GetAdditionalServiceLinksResponse() {
        }
        
        public GetAdditionalServiceLinksResponse(Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntityLink[] GetAdditionalServiceLinksResult) {
            this.GetAdditionalServiceLinksResult = GetAdditionalServiceLinksResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAdditionalServices", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetAdditionalServicesRequest {
        
        public GetAdditionalServicesRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAdditionalServicesResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetAdditionalServicesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.AdditionalService[] GetAdditionalServicesResult;
        
        public GetAdditionalServicesResponse() {
        }
        
        public GetAdditionalServicesResponse(Queue.Services.Server.Tests.ServerServiceReference.AdditionalService[] GetAdditionalServicesResult) {
            this.GetAdditionalServicesResult = GetAdditionalServicesResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAdditionalService", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetAdditionalServiceRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid additionalServiceId;
        
        public GetAdditionalServiceRequest() {
        }
        
        public GetAdditionalServiceRequest(System.Guid additionalServiceId) {
            this.additionalServiceId = additionalServiceId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAdditionalServiceResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetAdditionalServiceResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.AdditionalService GetAdditionalServiceResult;
        
        public GetAdditionalServiceResponse() {
        }
        
        public GetAdditionalServiceResponse(Queue.Services.Server.Tests.ServerServiceReference.AdditionalService GetAdditionalServiceResult) {
            this.GetAdditionalServiceResult = GetAdditionalServiceResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditAdditionalService", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditAdditionalServiceRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.AdditionalService source;
        
        public EditAdditionalServiceRequest() {
        }
        
        public EditAdditionalServiceRequest(Queue.Services.Server.Tests.ServerServiceReference.AdditionalService source) {
            this.source = source;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditAdditionalServiceResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditAdditionalServiceResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.AdditionalService EditAdditionalServiceResult;
        
        public EditAdditionalServiceResponse() {
        }
        
        public EditAdditionalServiceResponse(Queue.Services.Server.Tests.ServerServiceReference.AdditionalService EditAdditionalServiceResult) {
            this.EditAdditionalServiceResult = EditAdditionalServiceResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteAdditionalService", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class DeleteAdditionalServiceRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid additionalServiceId;
        
        public DeleteAdditionalServiceRequest() {
        }
        
        public DeleteAdditionalServiceRequest(System.Guid additionalServiceId) {
            this.additionalServiceId = additionalServiceId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteAdditionalServiceResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class DeleteAdditionalServiceResponse {
        
        public DeleteAdditionalServiceResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetWorkplacesLinks", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetWorkplacesLinksRequest {
        
        public GetWorkplacesLinksRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetWorkplacesLinksResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetWorkplacesLinksResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntityLink[] GetWorkplacesLinksResult;
        
        public GetWorkplacesLinksResponse() {
        }
        
        public GetWorkplacesLinksResponse(Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntityLink[] GetWorkplacesLinksResult) {
            this.GetWorkplacesLinksResult = GetWorkplacesLinksResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetWorkplaces", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetWorkplacesRequest {
        
        public GetWorkplacesRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetWorkplacesResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetWorkplacesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Workplace[] GetWorkplacesResult;
        
        public GetWorkplacesResponse() {
        }
        
        public GetWorkplacesResponse(Queue.Services.Server.Tests.ServerServiceReference.Workplace[] GetWorkplacesResult) {
            this.GetWorkplacesResult = GetWorkplacesResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetWorkplace", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetWorkplaceRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid workplaceId;
        
        public GetWorkplaceRequest() {
        }
        
        public GetWorkplaceRequest(System.Guid workplaceId) {
            this.workplaceId = workplaceId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetWorkplaceResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetWorkplaceResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Workplace GetWorkplaceResult;
        
        public GetWorkplaceResponse() {
        }
        
        public GetWorkplaceResponse(Queue.Services.Server.Tests.ServerServiceReference.Workplace GetWorkplaceResult) {
            this.GetWorkplaceResult = GetWorkplaceResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditWorkplace", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditWorkplaceRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Workplace workplace;
        
        public EditWorkplaceRequest() {
        }
        
        public EditWorkplaceRequest(Queue.Services.Server.Tests.ServerServiceReference.Workplace workplace) {
            this.workplace = workplace;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EditWorkplaceResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class EditWorkplaceResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Workplace EditWorkplaceResult;
        
        public EditWorkplaceResponse() {
        }
        
        public EditWorkplaceResponse(Queue.Services.Server.Tests.ServerServiceReference.Workplace EditWorkplaceResult) {
            this.EditWorkplaceResult = EditWorkplaceResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteWorkplace", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class DeleteWorkplaceRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid workplaceId;
        
        public DeleteWorkplaceRequest() {
        }
        
        public DeleteWorkplaceRequest(System.Guid workplaceId) {
            this.workplaceId = workplaceId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DeleteWorkplaceResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class DeleteWorkplaceResponse {
        
        public DeleteWorkplaceResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetWorkplaceOperators", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetWorkplaceOperatorsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid workplaceId;
        
        public GetWorkplaceOperatorsRequest() {
        }
        
        public GetWorkplaceOperatorsRequest(System.Guid workplaceId) {
            this.workplaceId = workplaceId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetWorkplaceOperatorsResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetWorkplaceOperatorsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Operator[] GetWorkplaceOperatorsResult;
        
        public GetWorkplaceOperatorsResponse() {
        }
        
        public GetWorkplaceOperatorsResponse(Queue.Services.Server.Tests.ServerServiceReference.Operator[] GetWorkplaceOperatorsResult) {
            this.GetWorkplaceOperatorsResult = GetWorkplaceOperatorsResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServiceLinks", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetServiceLinksRequest {
        
        public GetServiceLinksRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServiceLinksResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetServiceLinksResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntityLink[] GetServiceLinksResult;
        
        public GetServiceLinksResponse() {
        }
        
        public GetServiceLinksResponse(Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntityLink[] GetServiceLinksResult) {
            this.GetServiceLinksResult = GetServiceLinksResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRootServices", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetRootServicesRequest {
        
        public GetRootServicesRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRootServicesResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetRootServicesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Service[] GetRootServicesResult;
        
        public GetRootServicesResponse() {
        }
        
        public GetRootServicesResponse(Queue.Services.Server.Tests.ServerServiceReference.Service[] GetRootServicesResult) {
            this.GetRootServicesResult = GetRootServicesResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServices", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetServicesRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid serviceGroupId;
        
        public GetServicesRequest() {
        }
        
        public GetServicesRequest(System.Guid serviceGroupId) {
            this.serviceGroupId = serviceGroupId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServicesResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetServicesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Service[] GetServicesResult;
        
        public GetServicesResponse() {
        }
        
        public GetServicesResponse(Queue.Services.Server.Tests.ServerServiceReference.Service[] GetServicesResult) {
            this.GetServicesResult = GetServicesResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetService", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetServiceRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public System.Guid serviceId;
        
        public GetServiceRequest() {
        }
        
        public GetServiceRequest(System.Guid serviceId) {
            this.serviceId = serviceId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServiceResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class GetServiceResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Service GetServiceResult;
        
        public GetServiceResponse() {
        }
        
        public GetServiceResponse(Queue.Services.Server.Tests.ServerServiceReference.Service GetServiceResult) {
            this.GetServiceResult = GetServiceResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FindServices", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class FindServicesRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public string query;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=1)]
        public int startIndex;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=2)]
        public int maxResults;
        
        public FindServicesRequest() {
        }
        
        public FindServicesRequest(string query, int startIndex, int maxResults) {
            this.query = query;
            this.startIndex = startIndex;
            this.maxResults = maxResults;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FindServicesResponse", WrapperNamespace="http://queue.name/server-service", IsWrapped=true)]
    public partial class FindServicesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://queue.name/server-service", Order=0)]
        public Queue.Services.Server.Tests.ServerServiceReference.Service[] FindServicesResult;
        
        public FindServicesResponse() {
        }
        
        public FindServicesResponse(Queue.Services.Server.Tests.ServerServiceReference.Service[] FindServicesResult) {
            this.FindServicesResult = FindServicesResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServerHttpServiceChannel : Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServerHttpServiceClient : System.ServiceModel.ClientBase<Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService>, Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService {
        
        public ServerHttpServiceClient() {
        }
        
        public ServerHttpServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServerHttpServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerHttpServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerHttpServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.EditServiceResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditService(Queue.Services.Server.Tests.ServerServiceReference.EditServiceRequest request) {
            return base.Channel.EditService(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.Service EditService(Queue.Services.Server.Tests.ServerServiceReference.Service service) {
            Queue.Services.Server.Tests.ServerServiceReference.EditServiceRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditServiceRequest();
            inValue.service = service;
            Queue.Services.Server.Tests.ServerServiceReference.EditServiceResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditService(inValue);
            return retVal.EditServiceResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditServiceResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditServiceAsync(Queue.Services.Server.Tests.ServerServiceReference.EditServiceRequest request) {
            return base.Channel.EditServiceAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditServiceResponse> EditServiceAsync(Queue.Services.Server.Tests.ServerServiceReference.Service service) {
            Queue.Services.Server.Tests.ServerServiceReference.EditServiceRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditServiceRequest();
            inValue.service = service;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditServiceAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.MoveServiceResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.MoveService(Queue.Services.Server.Tests.ServerServiceReference.MoveServiceRequest request) {
            return base.Channel.MoveService(request);
        }
        
        public void MoveService(System.Guid serviceId, System.Guid serviceGroupId) {
            Queue.Services.Server.Tests.ServerServiceReference.MoveServiceRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.MoveServiceRequest();
            inValue.serviceId = serviceId;
            inValue.serviceGroupId = serviceGroupId;
            Queue.Services.Server.Tests.ServerServiceReference.MoveServiceResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).MoveService(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.MoveServiceResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.MoveServiceAsync(Queue.Services.Server.Tests.ServerServiceReference.MoveServiceRequest request) {
            return base.Channel.MoveServiceAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.MoveServiceResponse> MoveServiceAsync(System.Guid serviceId, System.Guid serviceGroupId) {
            Queue.Services.Server.Tests.ServerServiceReference.MoveServiceRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.MoveServiceRequest();
            inValue.serviceId = serviceId;
            inValue.serviceGroupId = serviceGroupId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).MoveServiceAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.DeleteService(Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceRequest request) {
            return base.Channel.DeleteService(request);
        }
        
        public void DeleteService(System.Guid serviceId) {
            Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceRequest();
            inValue.serviceId = serviceId;
            Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).DeleteService(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.DeleteServiceAsync(Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceRequest request) {
            return base.Channel.DeleteServiceAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceResponse> DeleteServiceAsync(System.Guid serviceId) {
            Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceRequest();
            inValue.serviceId = serviceId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).DeleteServiceAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.ServiceUpResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.ServiceUp(Queue.Services.Server.Tests.ServerServiceReference.ServiceUpRequest request) {
            return base.Channel.ServiceUp(request);
        }
        
        public bool ServiceUp(System.Guid serviceId) {
            Queue.Services.Server.Tests.ServerServiceReference.ServiceUpRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.ServiceUpRequest();
            inValue.serviceId = serviceId;
            Queue.Services.Server.Tests.ServerServiceReference.ServiceUpResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).ServiceUp(inValue);
            return retVal.ServiceUpResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.ServiceUpResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.ServiceUpAsync(Queue.Services.Server.Tests.ServerServiceReference.ServiceUpRequest request) {
            return base.Channel.ServiceUpAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.ServiceUpResponse> ServiceUpAsync(System.Guid serviceId) {
            Queue.Services.Server.Tests.ServerServiceReference.ServiceUpRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.ServiceUpRequest();
            inValue.serviceId = serviceId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).ServiceUpAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.ServiceDownResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.ServiceDown(Queue.Services.Server.Tests.ServerServiceReference.ServiceDownRequest request) {
            return base.Channel.ServiceDown(request);
        }
        
        public bool ServiceDown(System.Guid serviceId) {
            Queue.Services.Server.Tests.ServerServiceReference.ServiceDownRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.ServiceDownRequest();
            inValue.serviceId = serviceId;
            Queue.Services.Server.Tests.ServerServiceReference.ServiceDownResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).ServiceDown(inValue);
            return retVal.ServiceDownResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.ServiceDownResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.ServiceDownAsync(Queue.Services.Server.Tests.ServerServiceReference.ServiceDownRequest request) {
            return base.Channel.ServiceDownAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.ServiceDownResponse> ServiceDownAsync(System.Guid serviceId) {
            Queue.Services.Server.Tests.ServerServiceReference.ServiceDownRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.ServiceDownRequest();
            inValue.serviceId = serviceId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).ServiceDownAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepLinksResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetServiceStepLinks(Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepLinksRequest request) {
            return base.Channel.GetServiceStepLinks(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntityLink[] GetServiceStepLinks(System.Guid serviceId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepLinksRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepLinksRequest();
            inValue.serviceId = serviceId;
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepLinksResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetServiceStepLinks(inValue);
            return retVal.GetServiceStepLinksResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepLinksResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetServiceStepLinksAsync(Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepLinksRequest request) {
            return base.Channel.GetServiceStepLinksAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepLinksResponse> GetServiceStepLinksAsync(System.Guid serviceId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepLinksRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepLinksRequest();
            inValue.serviceId = serviceId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetServiceStepLinksAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepsResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetServiceSteps(Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepsRequest request) {
            return base.Channel.GetServiceSteps(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceStep[] GetServiceSteps(System.Guid serviceId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepsRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepsRequest();
            inValue.serviceId = serviceId;
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepsResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetServiceSteps(inValue);
            return retVal.GetServiceStepsResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepsResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetServiceStepsAsync(Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepsRequest request) {
            return base.Channel.GetServiceStepsAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepsResponse> GetServiceStepsAsync(System.Guid serviceId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepsRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepsRequest();
            inValue.serviceId = serviceId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetServiceStepsAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetServiceStep(Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepRequest request) {
            return base.Channel.GetServiceStep(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceStep GetServiceStep(System.Guid serviceStepId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepRequest();
            inValue.serviceStepId = serviceStepId;
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetServiceStep(inValue);
            return retVal.GetServiceStepResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetServiceStepAsync(Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepRequest request) {
            return base.Channel.GetServiceStepAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepResponse> GetServiceStepAsync(System.Guid serviceStepId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetServiceStepRequest();
            inValue.serviceStepId = serviceStepId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetServiceStepAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.EditServiceStepResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditServiceStep(Queue.Services.Server.Tests.ServerServiceReference.EditServiceStepRequest request) {
            return base.Channel.EditServiceStep(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceStep EditServiceStep(Queue.Services.Server.Tests.ServerServiceReference.ServiceStep serviceStep) {
            Queue.Services.Server.Tests.ServerServiceReference.EditServiceStepRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditServiceStepRequest();
            inValue.serviceStep = serviceStep;
            Queue.Services.Server.Tests.ServerServiceReference.EditServiceStepResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditServiceStep(inValue);
            return retVal.EditServiceStepResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditServiceStepResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditServiceStepAsync(Queue.Services.Server.Tests.ServerServiceReference.EditServiceStepRequest request) {
            return base.Channel.EditServiceStepAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditServiceStepResponse> EditServiceStepAsync(Queue.Services.Server.Tests.ServerServiceReference.ServiceStep serviceStep) {
            Queue.Services.Server.Tests.ServerServiceReference.EditServiceStepRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditServiceStepRequest();
            inValue.serviceStep = serviceStep;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditServiceStepAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceStepResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.DeleteServiceStep(Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceStepRequest request) {
            return base.Channel.DeleteServiceStep(request);
        }
        
        public void DeleteServiceStep(System.Guid serviceStepId) {
            Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceStepRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceStepRequest();
            inValue.serviceStepId = serviceStepId;
            Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceStepResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).DeleteServiceStep(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceStepResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.DeleteServiceStepAsync(Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceStepRequest request) {
            return base.Channel.DeleteServiceStepAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceStepResponse> DeleteServiceStepAsync(System.Guid serviceStepId) {
            Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceStepRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceStepRequest();
            inValue.serviceStepId = serviceStepId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).DeleteServiceStepAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.ServiceStepUpResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.ServiceStepUp(Queue.Services.Server.Tests.ServerServiceReference.ServiceStepUpRequest request) {
            return base.Channel.ServiceStepUp(request);
        }
        
        public bool ServiceStepUp(System.Guid serviceStepId) {
            Queue.Services.Server.Tests.ServerServiceReference.ServiceStepUpRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.ServiceStepUpRequest();
            inValue.serviceStepId = serviceStepId;
            Queue.Services.Server.Tests.ServerServiceReference.ServiceStepUpResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).ServiceStepUp(inValue);
            return retVal.ServiceStepUpResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.ServiceStepUpResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.ServiceStepUpAsync(Queue.Services.Server.Tests.ServerServiceReference.ServiceStepUpRequest request) {
            return base.Channel.ServiceStepUpAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.ServiceStepUpResponse> ServiceStepUpAsync(System.Guid serviceStepId) {
            Queue.Services.Server.Tests.ServerServiceReference.ServiceStepUpRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.ServiceStepUpRequest();
            inValue.serviceStepId = serviceStepId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).ServiceStepUpAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.ServiceStepDownResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.ServiceStepDown(Queue.Services.Server.Tests.ServerServiceReference.ServiceStepDownRequest request) {
            return base.Channel.ServiceStepDown(request);
        }
        
        public bool ServiceStepDown(System.Guid serviceStepId) {
            Queue.Services.Server.Tests.ServerServiceReference.ServiceStepDownRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.ServiceStepDownRequest();
            inValue.serviceStepId = serviceStepId;
            Queue.Services.Server.Tests.ServerServiceReference.ServiceStepDownResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).ServiceStepDown(inValue);
            return retVal.ServiceStepDownResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.ServiceStepDownResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.ServiceStepDownAsync(Queue.Services.Server.Tests.ServerServiceReference.ServiceStepDownRequest request) {
            return base.Channel.ServiceStepDownAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.ServiceStepDownResponse> ServiceStepDownAsync(System.Guid serviceStepId) {
            Queue.Services.Server.Tests.ServerServiceReference.ServiceStepDownRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.ServiceStepDownRequest();
            inValue.serviceStepId = serviceStepId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).ServiceStepDownAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetServiceRenderingsResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetServiceRenderings(Queue.Services.Server.Tests.ServerServiceReference.GetServiceRenderingsRequest request) {
            return base.Channel.GetServiceRenderings(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceRendering[] GetServiceRenderings(System.Guid scheduleId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceRenderingsRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetServiceRenderingsRequest();
            inValue.scheduleId = scheduleId;
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceRenderingsResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetServiceRenderings(inValue);
            return retVal.GetServiceRenderingsResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceRenderingsResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetServiceRenderingsAsync(Queue.Services.Server.Tests.ServerServiceReference.GetServiceRenderingsRequest request) {
            return base.Channel.GetServiceRenderingsAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceRenderingsResponse> GetServiceRenderingsAsync(System.Guid scheduleId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceRenderingsRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetServiceRenderingsRequest();
            inValue.scheduleId = scheduleId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetServiceRenderingsAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetServiceRenderingResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetServiceRendering(Queue.Services.Server.Tests.ServerServiceReference.GetServiceRenderingRequest request) {
            return base.Channel.GetServiceRendering(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceRendering GetServiceRendering(System.Guid serviceRenderingId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceRenderingRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetServiceRenderingRequest();
            inValue.serviceRenderingId = serviceRenderingId;
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceRenderingResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetServiceRendering(inValue);
            return retVal.GetServiceRenderingResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceRenderingResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetServiceRenderingAsync(Queue.Services.Server.Tests.ServerServiceReference.GetServiceRenderingRequest request) {
            return base.Channel.GetServiceRenderingAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceRenderingResponse> GetServiceRenderingAsync(System.Guid serviceRenderingId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceRenderingRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetServiceRenderingRequest();
            inValue.serviceRenderingId = serviceRenderingId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetServiceRenderingAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.EditServiceRenderingResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditServiceRendering(Queue.Services.Server.Tests.ServerServiceReference.EditServiceRenderingRequest request) {
            return base.Channel.EditServiceRendering(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceRendering EditServiceRendering(Queue.Services.Server.Tests.ServerServiceReference.ServiceRendering serviceRendering) {
            Queue.Services.Server.Tests.ServerServiceReference.EditServiceRenderingRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditServiceRenderingRequest();
            inValue.serviceRendering = serviceRendering;
            Queue.Services.Server.Tests.ServerServiceReference.EditServiceRenderingResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditServiceRendering(inValue);
            return retVal.EditServiceRenderingResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditServiceRenderingResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditServiceRenderingAsync(Queue.Services.Server.Tests.ServerServiceReference.EditServiceRenderingRequest request) {
            return base.Channel.EditServiceRenderingAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditServiceRenderingResponse> EditServiceRenderingAsync(Queue.Services.Server.Tests.ServerServiceReference.ServiceRendering serviceRendering) {
            Queue.Services.Server.Tests.ServerServiceReference.EditServiceRenderingRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditServiceRenderingRequest();
            inValue.serviceRendering = serviceRendering;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditServiceRenderingAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceRenderingResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.DeleteServiceRendering(Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceRenderingRequest request) {
            return base.Channel.DeleteServiceRendering(request);
        }
        
        public void DeleteServiceRendering(System.Guid serviceRenderingId) {
            Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceRenderingRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceRenderingRequest();
            inValue.serviceRenderingId = serviceRenderingId;
            Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceRenderingResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).DeleteServiceRendering(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceRenderingResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.DeleteServiceRenderingAsync(Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceRenderingRequest request) {
            return base.Channel.DeleteServiceRenderingAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceRenderingResponse> DeleteServiceRenderingAsync(System.Guid serviceRenderingId) {
            Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceRenderingRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceRenderingRequest();
            inValue.serviceRenderingId = serviceRenderingId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).DeleteServiceRenderingAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetDefaultWeekdayScheduleResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetDefaultWeekdaySchedule(Queue.Services.Server.Tests.ServerServiceReference.GetDefaultWeekdayScheduleRequest request) {
            return base.Channel.GetDefaultWeekdaySchedule(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.Schedule GetDefaultWeekdaySchedule(System.DayOfWeek dayOfWeek) {
            Queue.Services.Server.Tests.ServerServiceReference.GetDefaultWeekdayScheduleRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetDefaultWeekdayScheduleRequest();
            inValue.dayOfWeek = dayOfWeek;
            Queue.Services.Server.Tests.ServerServiceReference.GetDefaultWeekdayScheduleResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetDefaultWeekdaySchedule(inValue);
            return retVal.GetDefaultWeekdayScheduleResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetDefaultWeekdayScheduleResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetDefaultWeekdayScheduleAsync(Queue.Services.Server.Tests.ServerServiceReference.GetDefaultWeekdayScheduleRequest request) {
            return base.Channel.GetDefaultWeekdayScheduleAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetDefaultWeekdayScheduleResponse> GetDefaultWeekdayScheduleAsync(System.DayOfWeek dayOfWeek) {
            Queue.Services.Server.Tests.ServerServiceReference.GetDefaultWeekdayScheduleRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetDefaultWeekdayScheduleRequest();
            inValue.dayOfWeek = dayOfWeek;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetDefaultWeekdayScheduleAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetDefaultExceptionScheduleResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetDefaultExceptionSchedule(Queue.Services.Server.Tests.ServerServiceReference.GetDefaultExceptionScheduleRequest request) {
            return base.Channel.GetDefaultExceptionSchedule(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.Schedule GetDefaultExceptionSchedule(System.DateTime scheduleDate) {
            Queue.Services.Server.Tests.ServerServiceReference.GetDefaultExceptionScheduleRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetDefaultExceptionScheduleRequest();
            inValue.scheduleDate = scheduleDate;
            Queue.Services.Server.Tests.ServerServiceReference.GetDefaultExceptionScheduleResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetDefaultExceptionSchedule(inValue);
            return retVal.GetDefaultExceptionScheduleResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetDefaultExceptionScheduleResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetDefaultExceptionScheduleAsync(Queue.Services.Server.Tests.ServerServiceReference.GetDefaultExceptionScheduleRequest request) {
            return base.Channel.GetDefaultExceptionScheduleAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetDefaultExceptionScheduleResponse> GetDefaultExceptionScheduleAsync(System.DateTime scheduleDate) {
            Queue.Services.Server.Tests.ServerServiceReference.GetDefaultExceptionScheduleRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetDefaultExceptionScheduleRequest();
            inValue.scheduleDate = scheduleDate;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetDefaultExceptionScheduleAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.AddDefaultExceptionScheduleResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.AddDefaultExceptionSchedule(Queue.Services.Server.Tests.ServerServiceReference.AddDefaultExceptionScheduleRequest request) {
            return base.Channel.AddDefaultExceptionSchedule(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.Schedule AddDefaultExceptionSchedule(System.DateTime scheduleDate) {
            Queue.Services.Server.Tests.ServerServiceReference.AddDefaultExceptionScheduleRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.AddDefaultExceptionScheduleRequest();
            inValue.scheduleDate = scheduleDate;
            Queue.Services.Server.Tests.ServerServiceReference.AddDefaultExceptionScheduleResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).AddDefaultExceptionSchedule(inValue);
            return retVal.AddDefaultExceptionScheduleResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.AddDefaultExceptionScheduleResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.AddDefaultExceptionScheduleAsync(Queue.Services.Server.Tests.ServerServiceReference.AddDefaultExceptionScheduleRequest request) {
            return base.Channel.AddDefaultExceptionScheduleAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.AddDefaultExceptionScheduleResponse> AddDefaultExceptionScheduleAsync(System.DateTime scheduleDate) {
            Queue.Services.Server.Tests.ServerServiceReference.AddDefaultExceptionScheduleRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.AddDefaultExceptionScheduleRequest();
            inValue.scheduleDate = scheduleDate;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).AddDefaultExceptionScheduleAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetServiceWeekdayScheduleResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetServiceWeekdaySchedule(Queue.Services.Server.Tests.ServerServiceReference.GetServiceWeekdayScheduleRequest request) {
            return base.Channel.GetServiceWeekdaySchedule(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.Schedule GetServiceWeekdaySchedule(System.Guid serviceId, System.DayOfWeek dayOfWeek) {
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceWeekdayScheduleRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetServiceWeekdayScheduleRequest();
            inValue.serviceId = serviceId;
            inValue.dayOfWeek = dayOfWeek;
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceWeekdayScheduleResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetServiceWeekdaySchedule(inValue);
            return retVal.GetServiceWeekdayScheduleResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceWeekdayScheduleResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetServiceWeekdayScheduleAsync(Queue.Services.Server.Tests.ServerServiceReference.GetServiceWeekdayScheduleRequest request) {
            return base.Channel.GetServiceWeekdayScheduleAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceWeekdayScheduleResponse> GetServiceWeekdayScheduleAsync(System.Guid serviceId, System.DayOfWeek dayOfWeek) {
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceWeekdayScheduleRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetServiceWeekdayScheduleRequest();
            inValue.serviceId = serviceId;
            inValue.dayOfWeek = dayOfWeek;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetServiceWeekdayScheduleAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.AddServiceWeekdayScheduleResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.AddServiceWeekdaySchedule(Queue.Services.Server.Tests.ServerServiceReference.AddServiceWeekdayScheduleRequest request) {
            return base.Channel.AddServiceWeekdaySchedule(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.Schedule AddServiceWeekdaySchedule(System.Guid serviceId, System.DayOfWeek dayOfWeek) {
            Queue.Services.Server.Tests.ServerServiceReference.AddServiceWeekdayScheduleRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.AddServiceWeekdayScheduleRequest();
            inValue.serviceId = serviceId;
            inValue.dayOfWeek = dayOfWeek;
            Queue.Services.Server.Tests.ServerServiceReference.AddServiceWeekdayScheduleResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).AddServiceWeekdaySchedule(inValue);
            return retVal.AddServiceWeekdayScheduleResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.AddServiceWeekdayScheduleResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.AddServiceWeekdayScheduleAsync(Queue.Services.Server.Tests.ServerServiceReference.AddServiceWeekdayScheduleRequest request) {
            return base.Channel.AddServiceWeekdayScheduleAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.AddServiceWeekdayScheduleResponse> AddServiceWeekdayScheduleAsync(System.Guid serviceId, System.DayOfWeek dayOfWeek) {
            Queue.Services.Server.Tests.ServerServiceReference.AddServiceWeekdayScheduleRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.AddServiceWeekdayScheduleRequest();
            inValue.serviceId = serviceId;
            inValue.dayOfWeek = dayOfWeek;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).AddServiceWeekdayScheduleAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetServiceExceptionScheduleResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetServiceExceptionSchedule(Queue.Services.Server.Tests.ServerServiceReference.GetServiceExceptionScheduleRequest request) {
            return base.Channel.GetServiceExceptionSchedule(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.Schedule GetServiceExceptionSchedule(System.Guid serviceId, System.DateTime scheduleDate) {
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceExceptionScheduleRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetServiceExceptionScheduleRequest();
            inValue.serviceId = serviceId;
            inValue.scheduleDate = scheduleDate;
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceExceptionScheduleResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetServiceExceptionSchedule(inValue);
            return retVal.GetServiceExceptionScheduleResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceExceptionScheduleResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetServiceExceptionScheduleAsync(Queue.Services.Server.Tests.ServerServiceReference.GetServiceExceptionScheduleRequest request) {
            return base.Channel.GetServiceExceptionScheduleAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceExceptionScheduleResponse> GetServiceExceptionScheduleAsync(System.Guid serviceId, System.DateTime scheduleDate) {
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceExceptionScheduleRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetServiceExceptionScheduleRequest();
            inValue.serviceId = serviceId;
            inValue.scheduleDate = scheduleDate;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetServiceExceptionScheduleAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.AddServiceExceptionScheduleResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.AddServiceExceptionSchedule(Queue.Services.Server.Tests.ServerServiceReference.AddServiceExceptionScheduleRequest request) {
            return base.Channel.AddServiceExceptionSchedule(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.Schedule AddServiceExceptionSchedule(System.Guid serviceId, System.DateTime scheduleDate) {
            Queue.Services.Server.Tests.ServerServiceReference.AddServiceExceptionScheduleRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.AddServiceExceptionScheduleRequest();
            inValue.serviceId = serviceId;
            inValue.scheduleDate = scheduleDate;
            Queue.Services.Server.Tests.ServerServiceReference.AddServiceExceptionScheduleResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).AddServiceExceptionSchedule(inValue);
            return retVal.AddServiceExceptionScheduleResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.AddServiceExceptionScheduleResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.AddServiceExceptionScheduleAsync(Queue.Services.Server.Tests.ServerServiceReference.AddServiceExceptionScheduleRequest request) {
            return base.Channel.AddServiceExceptionScheduleAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.AddServiceExceptionScheduleResponse> AddServiceExceptionScheduleAsync(System.Guid serviceId, System.DateTime scheduleDate) {
            Queue.Services.Server.Tests.ServerServiceReference.AddServiceExceptionScheduleRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.AddServiceExceptionScheduleRequest();
            inValue.serviceId = serviceId;
            inValue.scheduleDate = scheduleDate;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).AddServiceExceptionScheduleAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetScheduleResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetSchedule(Queue.Services.Server.Tests.ServerServiceReference.GetScheduleRequest request) {
            return base.Channel.GetSchedule(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.Schedule GetSchedule(System.Guid scheduleId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetScheduleRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetScheduleRequest();
            inValue.scheduleId = scheduleId;
            Queue.Services.Server.Tests.ServerServiceReference.GetScheduleResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetSchedule(inValue);
            return retVal.GetScheduleResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetScheduleResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetScheduleAsync(Queue.Services.Server.Tests.ServerServiceReference.GetScheduleRequest request) {
            return base.Channel.GetScheduleAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetScheduleResponse> GetScheduleAsync(System.Guid scheduleId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetScheduleRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetScheduleRequest();
            inValue.scheduleId = scheduleId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetScheduleAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.EditScheduleResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditSchedule(Queue.Services.Server.Tests.ServerServiceReference.EditScheduleRequest request) {
            return base.Channel.EditSchedule(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.Schedule EditSchedule(Queue.Services.Server.Tests.ServerServiceReference.Schedule schedule) {
            Queue.Services.Server.Tests.ServerServiceReference.EditScheduleRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditScheduleRequest();
            inValue.schedule = schedule;
            Queue.Services.Server.Tests.ServerServiceReference.EditScheduleResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditSchedule(inValue);
            return retVal.EditScheduleResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditScheduleResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditScheduleAsync(Queue.Services.Server.Tests.ServerServiceReference.EditScheduleRequest request) {
            return base.Channel.EditScheduleAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditScheduleResponse> EditScheduleAsync(Queue.Services.Server.Tests.ServerServiceReference.Schedule schedule) {
            Queue.Services.Server.Tests.ServerServiceReference.EditScheduleRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditScheduleRequest();
            inValue.schedule = schedule;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditScheduleAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.DeleteScheduleResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.DeleteSchedule(Queue.Services.Server.Tests.ServerServiceReference.DeleteScheduleRequest request) {
            return base.Channel.DeleteSchedule(request);
        }
        
        public void DeleteSchedule(System.Guid scheduleId) {
            Queue.Services.Server.Tests.ServerServiceReference.DeleteScheduleRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.DeleteScheduleRequest();
            inValue.scheduleId = scheduleId;
            Queue.Services.Server.Tests.ServerServiceReference.DeleteScheduleResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).DeleteSchedule(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteScheduleResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.DeleteScheduleAsync(Queue.Services.Server.Tests.ServerServiceReference.DeleteScheduleRequest request) {
            return base.Channel.DeleteScheduleAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteScheduleResponse> DeleteScheduleAsync(System.Guid scheduleId) {
            Queue.Services.Server.Tests.ServerServiceReference.DeleteScheduleRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.DeleteScheduleRequest();
            inValue.scheduleId = scheduleId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).DeleteScheduleAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetServiceParameterResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetServiceParameter(Queue.Services.Server.Tests.ServerServiceReference.GetServiceParameterRequest request) {
            return base.Channel.GetServiceParameter(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceParameter GetServiceParameter(System.Guid serviceParameterId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceParameterRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetServiceParameterRequest();
            inValue.serviceParameterId = serviceParameterId;
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceParameterResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetServiceParameter(inValue);
            return retVal.GetServiceParameterResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceParameterResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetServiceParameterAsync(Queue.Services.Server.Tests.ServerServiceReference.GetServiceParameterRequest request) {
            return base.Channel.GetServiceParameterAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceParameterResponse> GetServiceParameterAsync(System.Guid serviceParameterId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceParameterRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetServiceParameterRequest();
            inValue.serviceParameterId = serviceParameterId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetServiceParameterAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetServiceParametersResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetServiceParameters(Queue.Services.Server.Tests.ServerServiceReference.GetServiceParametersRequest request) {
            return base.Channel.GetServiceParameters(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceParameter[] GetServiceParameters(System.Guid serviceId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceParametersRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetServiceParametersRequest();
            inValue.serviceId = serviceId;
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceParametersResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetServiceParameters(inValue);
            return retVal.GetServiceParametersResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceParametersResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetServiceParametersAsync(Queue.Services.Server.Tests.ServerServiceReference.GetServiceParametersRequest request) {
            return base.Channel.GetServiceParametersAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceParametersResponse> GetServiceParametersAsync(System.Guid serviceId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceParametersRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetServiceParametersRequest();
            inValue.serviceId = serviceId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetServiceParametersAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterNumberResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditServiceParameterNumber(Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterNumberRequest request) {
            return base.Channel.EditServiceParameterNumber(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceParameterNumber EditServiceParameterNumber(Queue.Services.Server.Tests.ServerServiceReference.ServiceParameterNumber parameter) {
            Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterNumberRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterNumberRequest();
            inValue.parameter = parameter;
            Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterNumberResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditServiceParameterNumber(inValue);
            return retVal.EditServiceParameterNumberResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterNumberResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditServiceParameterNumberAsync(Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterNumberRequest request) {
            return base.Channel.EditServiceParameterNumberAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterNumberResponse> EditServiceParameterNumberAsync(Queue.Services.Server.Tests.ServerServiceReference.ServiceParameterNumber parameter) {
            Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterNumberRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterNumberRequest();
            inValue.parameter = parameter;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditServiceParameterNumberAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterTextResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditServiceParameterText(Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterTextRequest request) {
            return base.Channel.EditServiceParameterText(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceParameterText EditServiceParameterText(Queue.Services.Server.Tests.ServerServiceReference.ServiceParameterText parameter) {
            Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterTextRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterTextRequest();
            inValue.parameter = parameter;
            Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterTextResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditServiceParameterText(inValue);
            return retVal.EditServiceParameterTextResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterTextResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditServiceParameterTextAsync(Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterTextRequest request) {
            return base.Channel.EditServiceParameterTextAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterTextResponse> EditServiceParameterTextAsync(Queue.Services.Server.Tests.ServerServiceReference.ServiceParameterText parameter) {
            Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterTextRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterTextRequest();
            inValue.parameter = parameter;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditServiceParameterTextAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterOptionsResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditServiceParameterOptions(Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterOptionsRequest request) {
            return base.Channel.EditServiceParameterOptions(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceParameterOptions EditServiceParameterOptions(Queue.Services.Server.Tests.ServerServiceReference.ServiceParameterOptions parameter) {
            Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterOptionsRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterOptionsRequest();
            inValue.parameter = parameter;
            Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterOptionsResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditServiceParameterOptions(inValue);
            return retVal.EditServiceParameterOptionsResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterOptionsResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditServiceParameterOptionsAsync(Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterOptionsRequest request) {
            return base.Channel.EditServiceParameterOptionsAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterOptionsResponse> EditServiceParameterOptionsAsync(Queue.Services.Server.Tests.ServerServiceReference.ServiceParameterOptions parameter) {
            Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterOptionsRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditServiceParameterOptionsRequest();
            inValue.parameter = parameter;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditServiceParameterOptionsAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceParameterResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.DeleteServiceParameter(Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceParameterRequest request) {
            return base.Channel.DeleteServiceParameter(request);
        }
        
        public void DeleteServiceParameter(System.Guid serviceParameterId) {
            Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceParameterRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceParameterRequest();
            inValue.serviceParameterId = serviceParameterId;
            Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceParameterResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).DeleteServiceParameter(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceParameterResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.DeleteServiceParameterAsync(Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceParameterRequest request) {
            return base.Channel.DeleteServiceParameterAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceParameterResponse> DeleteServiceParameterAsync(System.Guid serviceParameterId) {
            Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceParameterRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceParameterRequest();
            inValue.serviceParameterId = serviceParameterId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).DeleteServiceParameterAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetServiceRatingReportResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetServiceRatingReport(Queue.Services.Server.Tests.ServerServiceReference.GetServiceRatingReportRequest request) {
            return base.Channel.GetServiceRatingReport(request);
        }
        
        public byte[] GetServiceRatingReport(Queue.Services.Server.Tests.ServerServiceReference.ServiceRatingReportSettings settings) {
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceRatingReportRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetServiceRatingReportRequest();
            inValue.settings = settings;
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceRatingReportResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetServiceRatingReport(inValue);
            return retVal.GetServiceRatingReportResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceRatingReportResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetServiceRatingReportAsync(Queue.Services.Server.Tests.ServerServiceReference.GetServiceRatingReportRequest request) {
            return base.Channel.GetServiceRatingReportAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceRatingReportResponse> GetServiceRatingReportAsync(Queue.Services.Server.Tests.ServerServiceReference.ServiceRatingReportSettings settings) {
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceRatingReportRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetServiceRatingReportRequest();
            inValue.settings = settings;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetServiceRatingReportAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetOperatorRatingReportResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetOperatorRatingReport(Queue.Services.Server.Tests.ServerServiceReference.GetOperatorRatingReportRequest request) {
            return base.Channel.GetOperatorRatingReport(request);
        }
        
        public byte[] GetOperatorRatingReport(Queue.Services.Server.Tests.ServerServiceReference.OperatorRatingReportSettings settings) {
            Queue.Services.Server.Tests.ServerServiceReference.GetOperatorRatingReportRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetOperatorRatingReportRequest();
            inValue.settings = settings;
            Queue.Services.Server.Tests.ServerServiceReference.GetOperatorRatingReportResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetOperatorRatingReport(inValue);
            return retVal.GetOperatorRatingReportResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetOperatorRatingReportResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetOperatorRatingReportAsync(Queue.Services.Server.Tests.ServerServiceReference.GetOperatorRatingReportRequest request) {
            return base.Channel.GetOperatorRatingReportAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetOperatorRatingReportResponse> GetOperatorRatingReportAsync(Queue.Services.Server.Tests.ServerServiceReference.OperatorRatingReportSettings settings) {
            Queue.Services.Server.Tests.ServerServiceReference.GetOperatorRatingReportRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetOperatorRatingReportRequest();
            inValue.settings = settings;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetOperatorRatingReportAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetAdditinalServicesRatingReportResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetAdditinalServicesRatingReport(Queue.Services.Server.Tests.ServerServiceReference.GetAdditinalServicesRatingReportRequest request) {
            return base.Channel.GetAdditinalServicesRatingReport(request);
        }
        
        public byte[] GetAdditinalServicesRatingReport(Queue.Services.Server.Tests.ServerServiceReference.AdditionalServicesRatingReportSettings settings) {
            Queue.Services.Server.Tests.ServerServiceReference.GetAdditinalServicesRatingReportRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetAdditinalServicesRatingReportRequest();
            inValue.settings = settings;
            Queue.Services.Server.Tests.ServerServiceReference.GetAdditinalServicesRatingReportResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetAdditinalServicesRatingReport(inValue);
            return retVal.GetAdditinalServicesRatingReportResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetAdditinalServicesRatingReportResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetAdditinalServicesRatingReportAsync(Queue.Services.Server.Tests.ServerServiceReference.GetAdditinalServicesRatingReportRequest request) {
            return base.Channel.GetAdditinalServicesRatingReportAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetAdditinalServicesRatingReportResponse> GetAdditinalServicesRatingReportAsync(Queue.Services.Server.Tests.ServerServiceReference.AdditionalServicesRatingReportSettings settings) {
            Queue.Services.Server.Tests.ServerServiceReference.GetAdditinalServicesRatingReportRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetAdditinalServicesRatingReportRequest();
            inValue.settings = settings;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetAdditinalServicesRatingReportAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetExceptionScheduleReportResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetExceptionScheduleReport(Queue.Services.Server.Tests.ServerServiceReference.GetExceptionScheduleReportRequest request) {
            return base.Channel.GetExceptionScheduleReport(request);
        }
        
        public byte[] GetExceptionScheduleReport(System.DateTime fromDate) {
            Queue.Services.Server.Tests.ServerServiceReference.GetExceptionScheduleReportRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetExceptionScheduleReportRequest();
            inValue.fromDate = fromDate;
            Queue.Services.Server.Tests.ServerServiceReference.GetExceptionScheduleReportResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetExceptionScheduleReport(inValue);
            return retVal.GetExceptionScheduleReportResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetExceptionScheduleReportResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetExceptionScheduleReportAsync(Queue.Services.Server.Tests.ServerServiceReference.GetExceptionScheduleReportRequest request) {
            return base.Channel.GetExceptionScheduleReportAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetExceptionScheduleReportResponse> GetExceptionScheduleReportAsync(System.DateTime fromDate) {
            Queue.Services.Server.Tests.ServerServiceReference.GetExceptionScheduleReportRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetExceptionScheduleReportRequest();
            inValue.fromDate = fromDate;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetExceptionScheduleReportAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestReportResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetClientRequestReport(Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestReportRequest request) {
            return base.Channel.GetClientRequestReport(request);
        }
        
        public byte[] GetClientRequestReport(System.Guid clientRequestId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestReportRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestReportRequest();
            inValue.clientRequestId = clientRequestId;
            Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestReportResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetClientRequestReport(inValue);
            return retVal.GetClientRequestReportResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestReportResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetClientRequestReportAsync(Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestReportRequest request) {
            return base.Channel.GetClientRequestReportAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestReportResponse> GetClientRequestReportAsync(System.Guid clientRequestId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestReportRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestReportRequest();
            inValue.clientRequestId = clientRequestId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetClientRequestReportAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetDefaultConfigResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetDefaultConfig(Queue.Services.Server.Tests.ServerServiceReference.GetDefaultConfigRequest request) {
            return base.Channel.GetDefaultConfig(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.DefaultConfig GetDefaultConfig() {
            Queue.Services.Server.Tests.ServerServiceReference.GetDefaultConfigRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetDefaultConfigRequest();
            Queue.Services.Server.Tests.ServerServiceReference.GetDefaultConfigResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetDefaultConfig(inValue);
            return retVal.GetDefaultConfigResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetDefaultConfigResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetDefaultConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.GetDefaultConfigRequest request) {
            return base.Channel.GetDefaultConfigAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetDefaultConfigResponse> GetDefaultConfigAsync() {
            Queue.Services.Server.Tests.ServerServiceReference.GetDefaultConfigRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetDefaultConfigRequest();
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetDefaultConfigAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.EditDefaultConfigResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditDefaultConfig(Queue.Services.Server.Tests.ServerServiceReference.EditDefaultConfigRequest request) {
            return base.Channel.EditDefaultConfig(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.DefaultConfig EditDefaultConfig(Queue.Services.Server.Tests.ServerServiceReference.DefaultConfig config) {
            Queue.Services.Server.Tests.ServerServiceReference.EditDefaultConfigRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditDefaultConfigRequest();
            inValue.config = config;
            Queue.Services.Server.Tests.ServerServiceReference.EditDefaultConfigResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditDefaultConfig(inValue);
            return retVal.EditDefaultConfigResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditDefaultConfigResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditDefaultConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.EditDefaultConfigRequest request) {
            return base.Channel.EditDefaultConfigAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditDefaultConfigResponse> EditDefaultConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.DefaultConfig config) {
            Queue.Services.Server.Tests.ServerServiceReference.EditDefaultConfigRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditDefaultConfigRequest();
            inValue.config = config;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditDefaultConfigAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetDesignConfigResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetDesignConfig(Queue.Services.Server.Tests.ServerServiceReference.GetDesignConfigRequest request) {
            return base.Channel.GetDesignConfig(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.DesignConfig GetDesignConfig() {
            Queue.Services.Server.Tests.ServerServiceReference.GetDesignConfigRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetDesignConfigRequest();
            Queue.Services.Server.Tests.ServerServiceReference.GetDesignConfigResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetDesignConfig(inValue);
            return retVal.GetDesignConfigResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetDesignConfigResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetDesignConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.GetDesignConfigRequest request) {
            return base.Channel.GetDesignConfigAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetDesignConfigResponse> GetDesignConfigAsync() {
            Queue.Services.Server.Tests.ServerServiceReference.GetDesignConfigRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetDesignConfigRequest();
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetDesignConfigAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.EditDesignConfigResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditDesignConfig(Queue.Services.Server.Tests.ServerServiceReference.EditDesignConfigRequest request) {
            return base.Channel.EditDesignConfig(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.DesignConfig EditDesignConfig(Queue.Services.Server.Tests.ServerServiceReference.DesignConfig config) {
            Queue.Services.Server.Tests.ServerServiceReference.EditDesignConfigRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditDesignConfigRequest();
            inValue.config = config;
            Queue.Services.Server.Tests.ServerServiceReference.EditDesignConfigResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditDesignConfig(inValue);
            return retVal.EditDesignConfigResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditDesignConfigResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditDesignConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.EditDesignConfigRequest request) {
            return base.Channel.EditDesignConfigAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditDesignConfigResponse> EditDesignConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.DesignConfig config) {
            Queue.Services.Server.Tests.ServerServiceReference.EditDesignConfigRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditDesignConfigRequest();
            inValue.config = config;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditDesignConfigAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetCouponConfigResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetCouponConfig(Queue.Services.Server.Tests.ServerServiceReference.GetCouponConfigRequest request) {
            return base.Channel.GetCouponConfig(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.CouponConfig GetCouponConfig() {
            Queue.Services.Server.Tests.ServerServiceReference.GetCouponConfigRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetCouponConfigRequest();
            Queue.Services.Server.Tests.ServerServiceReference.GetCouponConfigResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetCouponConfig(inValue);
            return retVal.GetCouponConfigResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetCouponConfigResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetCouponConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.GetCouponConfigRequest request) {
            return base.Channel.GetCouponConfigAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetCouponConfigResponse> GetCouponConfigAsync() {
            Queue.Services.Server.Tests.ServerServiceReference.GetCouponConfigRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetCouponConfigRequest();
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetCouponConfigAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.EditCouponConfigResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditCouponConfig(Queue.Services.Server.Tests.ServerServiceReference.EditCouponConfigRequest request) {
            return base.Channel.EditCouponConfig(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.CouponConfig EditCouponConfig(Queue.Services.Server.Tests.ServerServiceReference.CouponConfig config) {
            Queue.Services.Server.Tests.ServerServiceReference.EditCouponConfigRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditCouponConfigRequest();
            inValue.config = config;
            Queue.Services.Server.Tests.ServerServiceReference.EditCouponConfigResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditCouponConfig(inValue);
            return retVal.EditCouponConfigResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditCouponConfigResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditCouponConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.EditCouponConfigRequest request) {
            return base.Channel.EditCouponConfigAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditCouponConfigResponse> EditCouponConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.CouponConfig config) {
            Queue.Services.Server.Tests.ServerServiceReference.EditCouponConfigRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditCouponConfigRequest();
            inValue.config = config;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditCouponConfigAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetSMTPConfigResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetSMTPConfig(Queue.Services.Server.Tests.ServerServiceReference.GetSMTPConfigRequest request) {
            return base.Channel.GetSMTPConfig(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.SMTPConfig GetSMTPConfig() {
            Queue.Services.Server.Tests.ServerServiceReference.GetSMTPConfigRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetSMTPConfigRequest();
            Queue.Services.Server.Tests.ServerServiceReference.GetSMTPConfigResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetSMTPConfig(inValue);
            return retVal.GetSMTPConfigResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetSMTPConfigResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetSMTPConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.GetSMTPConfigRequest request) {
            return base.Channel.GetSMTPConfigAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetSMTPConfigResponse> GetSMTPConfigAsync() {
            Queue.Services.Server.Tests.ServerServiceReference.GetSMTPConfigRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetSMTPConfigRequest();
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetSMTPConfigAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.EditSMTPConfigResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditSMTPConfig(Queue.Services.Server.Tests.ServerServiceReference.EditSMTPConfigRequest request) {
            return base.Channel.EditSMTPConfig(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.SMTPConfig EditSMTPConfig(Queue.Services.Server.Tests.ServerServiceReference.SMTPConfig config) {
            Queue.Services.Server.Tests.ServerServiceReference.EditSMTPConfigRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditSMTPConfigRequest();
            inValue.config = config;
            Queue.Services.Server.Tests.ServerServiceReference.EditSMTPConfigResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditSMTPConfig(inValue);
            return retVal.EditSMTPConfigResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditSMTPConfigResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditSMTPConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.EditSMTPConfigRequest request) {
            return base.Channel.EditSMTPConfigAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditSMTPConfigResponse> EditSMTPConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.SMTPConfig config) {
            Queue.Services.Server.Tests.ServerServiceReference.EditSMTPConfigRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditSMTPConfigRequest();
            inValue.config = config;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditSMTPConfigAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetPortalConfigResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetPortalConfig(Queue.Services.Server.Tests.ServerServiceReference.GetPortalConfigRequest request) {
            return base.Channel.GetPortalConfig(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.PortalConfig GetPortalConfig() {
            Queue.Services.Server.Tests.ServerServiceReference.GetPortalConfigRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetPortalConfigRequest();
            Queue.Services.Server.Tests.ServerServiceReference.GetPortalConfigResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetPortalConfig(inValue);
            return retVal.GetPortalConfigResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetPortalConfigResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetPortalConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.GetPortalConfigRequest request) {
            return base.Channel.GetPortalConfigAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetPortalConfigResponse> GetPortalConfigAsync() {
            Queue.Services.Server.Tests.ServerServiceReference.GetPortalConfigRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetPortalConfigRequest();
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetPortalConfigAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.EditPortalConfigResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditPortalConfig(Queue.Services.Server.Tests.ServerServiceReference.EditPortalConfigRequest request) {
            return base.Channel.EditPortalConfig(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.PortalConfig EditPortalConfig(Queue.Services.Server.Tests.ServerServiceReference.PortalConfig config) {
            Queue.Services.Server.Tests.ServerServiceReference.EditPortalConfigRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditPortalConfigRequest();
            inValue.config = config;
            Queue.Services.Server.Tests.ServerServiceReference.EditPortalConfigResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditPortalConfig(inValue);
            return retVal.EditPortalConfigResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditPortalConfigResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditPortalConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.EditPortalConfigRequest request) {
            return base.Channel.EditPortalConfigAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditPortalConfigResponse> EditPortalConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.PortalConfig config) {
            Queue.Services.Server.Tests.ServerServiceReference.EditPortalConfigRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditPortalConfigRequest();
            inValue.config = config;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditPortalConfigAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetMediaConfig(Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigRequest request) {
            return base.Channel.GetMediaConfig(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.MediaConfig GetMediaConfig() {
            Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigRequest();
            Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetMediaConfig(inValue);
            return retVal.GetMediaConfigResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetMediaConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigRequest request) {
            return base.Channel.GetMediaConfigAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigResponse> GetMediaConfigAsync() {
            Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigRequest();
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetMediaConfigAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.EditMediaConfigResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditMediaConfig(Queue.Services.Server.Tests.ServerServiceReference.EditMediaConfigRequest request) {
            return base.Channel.EditMediaConfig(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.MediaConfig EditMediaConfig(Queue.Services.Server.Tests.ServerServiceReference.MediaConfig config) {
            Queue.Services.Server.Tests.ServerServiceReference.EditMediaConfigRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditMediaConfigRequest();
            inValue.config = config;
            Queue.Services.Server.Tests.ServerServiceReference.EditMediaConfigResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditMediaConfig(inValue);
            return retVal.EditMediaConfigResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditMediaConfigResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditMediaConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.EditMediaConfigRequest request) {
            return base.Channel.EditMediaConfigAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditMediaConfigResponse> EditMediaConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.MediaConfig config) {
            Queue.Services.Server.Tests.ServerServiceReference.EditMediaConfigRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditMediaConfigRequest();
            inValue.config = config;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditMediaConfigAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigFilesResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetMediaConfigFiles(Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigFilesRequest request) {
            return base.Channel.GetMediaConfigFiles(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.MediaConfigFile[] GetMediaConfigFiles() {
            Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigFilesRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigFilesRequest();
            Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigFilesResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetMediaConfigFiles(inValue);
            return retVal.GetMediaConfigFilesResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigFilesResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetMediaConfigFilesAsync(Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigFilesRequest request) {
            return base.Channel.GetMediaConfigFilesAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigFilesResponse> GetMediaConfigFilesAsync() {
            Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigFilesRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigFilesRequest();
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetMediaConfigFilesAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigFileResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetMediaConfigFile(Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigFileRequest request) {
            return base.Channel.GetMediaConfigFile(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.MediaConfigFile GetMediaConfigFile(System.Guid mediaConfigFileId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigFileRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigFileRequest();
            inValue.mediaConfigFileId = mediaConfigFileId;
            Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigFileResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetMediaConfigFile(inValue);
            return retVal.GetMediaConfigFileResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigFileResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetMediaConfigFileAsync(Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigFileRequest request) {
            return base.Channel.GetMediaConfigFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigFileResponse> GetMediaConfigFileAsync(System.Guid mediaConfigFileId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigFileRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetMediaConfigFileRequest();
            inValue.mediaConfigFileId = mediaConfigFileId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetMediaConfigFileAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.EditMediaConfigFileResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditMediaConfigFile(Queue.Services.Server.Tests.ServerServiceReference.EditMediaConfigFileRequest request) {
            return base.Channel.EditMediaConfigFile(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.MediaConfigFile EditMediaConfigFile(Queue.Services.Server.Tests.ServerServiceReference.MediaConfigFile config) {
            Queue.Services.Server.Tests.ServerServiceReference.EditMediaConfigFileRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditMediaConfigFileRequest();
            inValue.config = config;
            Queue.Services.Server.Tests.ServerServiceReference.EditMediaConfigFileResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditMediaConfigFile(inValue);
            return retVal.EditMediaConfigFileResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditMediaConfigFileResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditMediaConfigFileAsync(Queue.Services.Server.Tests.ServerServiceReference.EditMediaConfigFileRequest request) {
            return base.Channel.EditMediaConfigFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditMediaConfigFileResponse> EditMediaConfigFileAsync(Queue.Services.Server.Tests.ServerServiceReference.MediaConfigFile config) {
            Queue.Services.Server.Tests.ServerServiceReference.EditMediaConfigFileRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditMediaConfigFileRequest();
            inValue.config = config;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditMediaConfigFileAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.DeleteMediaConfigFileResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.DeleteMediaConfigFile(Queue.Services.Server.Tests.ServerServiceReference.DeleteMediaConfigFileRequest request) {
            return base.Channel.DeleteMediaConfigFile(request);
        }
        
        public void DeleteMediaConfigFile(System.Guid mediaConfigFileId) {
            Queue.Services.Server.Tests.ServerServiceReference.DeleteMediaConfigFileRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.DeleteMediaConfigFileRequest();
            inValue.mediaConfigFileId = mediaConfigFileId;
            Queue.Services.Server.Tests.ServerServiceReference.DeleteMediaConfigFileResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).DeleteMediaConfigFile(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteMediaConfigFileResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.DeleteMediaConfigFileAsync(Queue.Services.Server.Tests.ServerServiceReference.DeleteMediaConfigFileRequest request) {
            return base.Channel.DeleteMediaConfigFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteMediaConfigFileResponse> DeleteMediaConfigFileAsync(System.Guid mediaConfigFileId) {
            Queue.Services.Server.Tests.ServerServiceReference.DeleteMediaConfigFileRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.DeleteMediaConfigFileRequest();
            inValue.mediaConfigFileId = mediaConfigFileId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).DeleteMediaConfigFileAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetTerminalConfigResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetTerminalConfig(Queue.Services.Server.Tests.ServerServiceReference.GetTerminalConfigRequest request) {
            return base.Channel.GetTerminalConfig(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.TerminalConfig GetTerminalConfig() {
            Queue.Services.Server.Tests.ServerServiceReference.GetTerminalConfigRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetTerminalConfigRequest();
            Queue.Services.Server.Tests.ServerServiceReference.GetTerminalConfigResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetTerminalConfig(inValue);
            return retVal.GetTerminalConfigResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetTerminalConfigResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetTerminalConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.GetTerminalConfigRequest request) {
            return base.Channel.GetTerminalConfigAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetTerminalConfigResponse> GetTerminalConfigAsync() {
            Queue.Services.Server.Tests.ServerServiceReference.GetTerminalConfigRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetTerminalConfigRequest();
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetTerminalConfigAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.EditTerminalConfigResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditTerminalConfig(Queue.Services.Server.Tests.ServerServiceReference.EditTerminalConfigRequest request) {
            return base.Channel.EditTerminalConfig(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.TerminalConfig EditTerminalConfig(Queue.Services.Server.Tests.ServerServiceReference.TerminalConfig config) {
            Queue.Services.Server.Tests.ServerServiceReference.EditTerminalConfigRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditTerminalConfigRequest();
            inValue.config = config;
            Queue.Services.Server.Tests.ServerServiceReference.EditTerminalConfigResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditTerminalConfig(inValue);
            return retVal.EditTerminalConfigResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditTerminalConfigResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditTerminalConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.EditTerminalConfigRequest request) {
            return base.Channel.EditTerminalConfigAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditTerminalConfigResponse> EditTerminalConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.TerminalConfig config) {
            Queue.Services.Server.Tests.ServerServiceReference.EditTerminalConfigRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditTerminalConfigRequest();
            inValue.config = config;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditTerminalConfigAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetNotificationConfigResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetNotificationConfig(Queue.Services.Server.Tests.ServerServiceReference.GetNotificationConfigRequest request) {
            return base.Channel.GetNotificationConfig(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.NotificationConfig GetNotificationConfig() {
            Queue.Services.Server.Tests.ServerServiceReference.GetNotificationConfigRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetNotificationConfigRequest();
            Queue.Services.Server.Tests.ServerServiceReference.GetNotificationConfigResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetNotificationConfig(inValue);
            return retVal.GetNotificationConfigResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetNotificationConfigResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetNotificationConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.GetNotificationConfigRequest request) {
            return base.Channel.GetNotificationConfigAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetNotificationConfigResponse> GetNotificationConfigAsync() {
            Queue.Services.Server.Tests.ServerServiceReference.GetNotificationConfigRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetNotificationConfigRequest();
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetNotificationConfigAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.EditNotificationConfigResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditNotificationConfig(Queue.Services.Server.Tests.ServerServiceReference.EditNotificationConfigRequest request) {
            return base.Channel.EditNotificationConfig(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.NotificationConfig EditNotificationConfig(Queue.Services.Server.Tests.ServerServiceReference.NotificationConfig config) {
            Queue.Services.Server.Tests.ServerServiceReference.EditNotificationConfigRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditNotificationConfigRequest();
            inValue.config = config;
            Queue.Services.Server.Tests.ServerServiceReference.EditNotificationConfigResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditNotificationConfig(inValue);
            return retVal.EditNotificationConfigResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditNotificationConfigResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditNotificationConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.EditNotificationConfigRequest request) {
            return base.Channel.EditNotificationConfigAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditNotificationConfigResponse> EditNotificationConfigAsync(Queue.Services.Server.Tests.ServerServiceReference.NotificationConfig config) {
            Queue.Services.Server.Tests.ServerServiceReference.EditNotificationConfigRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditNotificationConfigRequest();
            inValue.config = config;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditNotificationConfigAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanMetricResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetQueuePlanMetric(Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanMetricRequest request) {
            return base.Channel.GetQueuePlanMetric(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.QueuePlanMetric GetQueuePlanMetric(int year, int month, int day, int hour, int minute, int second) {
            Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanMetricRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanMetricRequest();
            inValue.year = year;
            inValue.month = month;
            inValue.day = day;
            inValue.hour = hour;
            inValue.minute = minute;
            inValue.second = second;
            Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanMetricResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetQueuePlanMetric(inValue);
            return retVal.GetQueuePlanMetricResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanMetricResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetQueuePlanMetricAsync(Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanMetricRequest request) {
            return base.Channel.GetQueuePlanMetricAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanMetricResponse> GetQueuePlanMetricAsync(int year, int month, int day, int hour, int minute, int second) {
            Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanMetricRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanMetricRequest();
            inValue.year = year;
            inValue.month = month;
            inValue.day = day;
            inValue.hour = hour;
            inValue.minute = minute;
            inValue.second = second;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetQueuePlanMetricAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanServiceMetricResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetQueuePlanServiceMetric(Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanServiceMetricRequest request) {
            return base.Channel.GetQueuePlanServiceMetric(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.QueuePlanServiceMetric GetQueuePlanServiceMetric(int year, int month, int day, int hour, int minute, int second, System.Guid serviceId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanServiceMetricRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanServiceMetricRequest();
            inValue.year = year;
            inValue.month = month;
            inValue.day = day;
            inValue.hour = hour;
            inValue.minute = minute;
            inValue.second = second;
            inValue.serviceId = serviceId;
            Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanServiceMetricResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetQueuePlanServiceMetric(inValue);
            return retVal.GetQueuePlanServiceMetricResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanServiceMetricResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetQueuePlanServiceMetricAsync(Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanServiceMetricRequest request) {
            return base.Channel.GetQueuePlanServiceMetricAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanServiceMetricResponse> GetQueuePlanServiceMetricAsync(int year, int month, int day, int hour, int minute, int second, System.Guid serviceId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanServiceMetricRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanServiceMetricRequest();
            inValue.year = year;
            inValue.month = month;
            inValue.day = day;
            inValue.hour = hour;
            inValue.minute = minute;
            inValue.second = second;
            inValue.serviceId = serviceId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetQueuePlanServiceMetricAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetDateTimeResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetDateTime(Queue.Services.Server.Tests.ServerServiceReference.GetDateTimeRequest request) {
            return base.Channel.GetDateTime(request);
        }
        
        public System.DateTime GetDateTime() {
            Queue.Services.Server.Tests.ServerServiceReference.GetDateTimeRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetDateTimeRequest();
            Queue.Services.Server.Tests.ServerServiceReference.GetDateTimeResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetDateTime(inValue);
            return retVal.GetDateTimeResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetDateTimeResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetDateTimeAsync(Queue.Services.Server.Tests.ServerServiceReference.GetDateTimeRequest request) {
            return base.Channel.GetDateTimeAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetDateTimeResponse> GetDateTimeAsync() {
            Queue.Services.Server.Tests.ServerServiceReference.GetDateTimeRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetDateTimeRequest();
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetDateTimeAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetClientResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetClient(Queue.Services.Server.Tests.ServerServiceReference.GetClientRequest request) {
            return base.Channel.GetClient(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.Client GetClient(System.Guid clientId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetClientRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetClientRequest();
            inValue.clientId = clientId;
            Queue.Services.Server.Tests.ServerServiceReference.GetClientResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetClient(inValue);
            return retVal.GetClientResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetClientResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetClientAsync(Queue.Services.Server.Tests.ServerServiceReference.GetClientRequest request) {
            return base.Channel.GetClientAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetClientResponse> GetClientAsync(System.Guid clientId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetClientRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetClientRequest();
            inValue.clientId = clientId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetClientAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.OpenClientSessionResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.OpenClientSession(Queue.Services.Server.Tests.ServerServiceReference.OpenClientSessionRequest request) {
            return base.Channel.OpenClientSession(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.Client OpenClientSession(System.Guid sessionId) {
            Queue.Services.Server.Tests.ServerServiceReference.OpenClientSessionRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.OpenClientSessionRequest();
            inValue.sessionId = sessionId;
            Queue.Services.Server.Tests.ServerServiceReference.OpenClientSessionResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).OpenClientSession(inValue);
            return retVal.OpenClientSessionResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.OpenClientSessionResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.OpenClientSessionAsync(Queue.Services.Server.Tests.ServerServiceReference.OpenClientSessionRequest request) {
            return base.Channel.OpenClientSessionAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.OpenClientSessionResponse> OpenClientSessionAsync(System.Guid sessionId) {
            Queue.Services.Server.Tests.ServerServiceReference.OpenClientSessionRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.OpenClientSessionRequest();
            inValue.sessionId = sessionId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).OpenClientSessionAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetClientByIdentityResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetClientByIdentity(Queue.Services.Server.Tests.ServerServiceReference.GetClientByIdentityRequest request) {
            return base.Channel.GetClientByIdentity(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.Client GetClientByIdentity(string identity) {
            Queue.Services.Server.Tests.ServerServiceReference.GetClientByIdentityRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetClientByIdentityRequest();
            inValue.identity = identity;
            Queue.Services.Server.Tests.ServerServiceReference.GetClientByIdentityResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetClientByIdentity(inValue);
            return retVal.GetClientByIdentityResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetClientByIdentityResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetClientByIdentityAsync(Queue.Services.Server.Tests.ServerServiceReference.GetClientByIdentityRequest request) {
            return base.Channel.GetClientByIdentityAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetClientByIdentityResponse> GetClientByIdentityAsync(string identity) {
            Queue.Services.Server.Tests.ServerServiceReference.GetClientByIdentityRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetClientByIdentityRequest();
            inValue.identity = identity;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetClientByIdentityAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.FindClientsResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.FindClients(Queue.Services.Server.Tests.ServerServiceReference.FindClientsRequest request) {
            return base.Channel.FindClients(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.Client[] FindClients(int startIndex, int maxResults, string filter) {
            Queue.Services.Server.Tests.ServerServiceReference.FindClientsRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.FindClientsRequest();
            inValue.startIndex = startIndex;
            inValue.maxResults = maxResults;
            inValue.filter = filter;
            Queue.Services.Server.Tests.ServerServiceReference.FindClientsResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).FindClients(inValue);
            return retVal.FindClientsResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.FindClientsResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.FindClientsAsync(Queue.Services.Server.Tests.ServerServiceReference.FindClientsRequest request) {
            return base.Channel.FindClientsAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.FindClientsResponse> FindClientsAsync(int startIndex, int maxResults, string filter) {
            Queue.Services.Server.Tests.ServerServiceReference.FindClientsRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.FindClientsRequest();
            inValue.startIndex = startIndex;
            inValue.maxResults = maxResults;
            inValue.filter = filter;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).FindClientsAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.ClientLoginResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.ClientLogin(Queue.Services.Server.Tests.ServerServiceReference.ClientLoginRequest request) {
            return base.Channel.ClientLogin(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.Client ClientLogin(string email, string password) {
            Queue.Services.Server.Tests.ServerServiceReference.ClientLoginRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.ClientLoginRequest();
            inValue.email = email;
            inValue.password = password;
            Queue.Services.Server.Tests.ServerServiceReference.ClientLoginResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).ClientLogin(inValue);
            return retVal.ClientLoginResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.ClientLoginResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.ClientLoginAsync(Queue.Services.Server.Tests.ServerServiceReference.ClientLoginRequest request) {
            return base.Channel.ClientLoginAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.ClientLoginResponse> ClientLoginAsync(string email, string password) {
            Queue.Services.Server.Tests.ServerServiceReference.ClientLoginRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.ClientLoginRequest();
            inValue.email = email;
            inValue.password = password;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).ClientLoginAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.ClientRestorePasswordResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.ClientRestorePassword(Queue.Services.Server.Tests.ServerServiceReference.ClientRestorePasswordRequest request) {
            return base.Channel.ClientRestorePassword(request);
        }
        
        public void ClientRestorePassword(string email) {
            Queue.Services.Server.Tests.ServerServiceReference.ClientRestorePasswordRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.ClientRestorePasswordRequest();
            inValue.email = email;
            Queue.Services.Server.Tests.ServerServiceReference.ClientRestorePasswordResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).ClientRestorePassword(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.ClientRestorePasswordResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.ClientRestorePasswordAsync(Queue.Services.Server.Tests.ServerServiceReference.ClientRestorePasswordRequest request) {
            return base.Channel.ClientRestorePasswordAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.ClientRestorePasswordResponse> ClientRestorePasswordAsync(string email) {
            Queue.Services.Server.Tests.ServerServiceReference.ClientRestorePasswordRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.ClientRestorePasswordRequest();
            inValue.email = email;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).ClientRestorePasswordAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.EditClientResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditClient(Queue.Services.Server.Tests.ServerServiceReference.EditClientRequest request) {
            return base.Channel.EditClient(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.Client EditClient(Queue.Services.Server.Tests.ServerServiceReference.Client client) {
            Queue.Services.Server.Tests.ServerServiceReference.EditClientRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditClientRequest();
            inValue.client = client;
            Queue.Services.Server.Tests.ServerServiceReference.EditClientResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditClient(inValue);
            return retVal.EditClientResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditClientResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditClientAsync(Queue.Services.Server.Tests.ServerServiceReference.EditClientRequest request) {
            return base.Channel.EditClientAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditClientResponse> EditClientAsync(Queue.Services.Server.Tests.ServerServiceReference.Client client) {
            Queue.Services.Server.Tests.ServerServiceReference.EditClientRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditClientRequest();
            inValue.client = client;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditClientAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.ChangeClientPasswordResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.ChangeClientPassword(Queue.Services.Server.Tests.ServerServiceReference.ChangeClientPasswordRequest request) {
            return base.Channel.ChangeClientPassword(request);
        }
        
        public void ChangeClientPassword(System.Guid clientId, string password) {
            Queue.Services.Server.Tests.ServerServiceReference.ChangeClientPasswordRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.ChangeClientPasswordRequest();
            inValue.clientId = clientId;
            inValue.password = password;
            Queue.Services.Server.Tests.ServerServiceReference.ChangeClientPasswordResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).ChangeClientPassword(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.ChangeClientPasswordResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.ChangeClientPasswordAsync(Queue.Services.Server.Tests.ServerServiceReference.ChangeClientPasswordRequest request) {
            return base.Channel.ChangeClientPasswordAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.ChangeClientPasswordResponse> ChangeClientPasswordAsync(System.Guid clientId, string password) {
            Queue.Services.Server.Tests.ServerServiceReference.ChangeClientPasswordRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.ChangeClientPasswordRequest();
            inValue.clientId = clientId;
            inValue.password = password;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).ChangeClientPasswordAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.DeleteClientResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.DeleteClient(Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequest request) {
            return base.Channel.DeleteClient(request);
        }
        
        public void DeleteClient(System.Guid clientId) {
            Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequest();
            inValue.clientId = clientId;
            Queue.Services.Server.Tests.ServerServiceReference.DeleteClientResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).DeleteClient(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteClientResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.DeleteClientAsync(Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequest request) {
            return base.Channel.DeleteClientAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteClientResponse> DeleteClientAsync(System.Guid clientId) {
            Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequest();
            inValue.clientId = clientId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).DeleteClientAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.SendPINToEmailResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.SendPINToEmail(Queue.Services.Server.Tests.ServerServiceReference.SendPINToEmailRequest request) {
            return base.Channel.SendPINToEmail(request);
        }
        
        public void SendPINToEmail(string email) {
            Queue.Services.Server.Tests.ServerServiceReference.SendPINToEmailRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.SendPINToEmailRequest();
            inValue.email = email;
            Queue.Services.Server.Tests.ServerServiceReference.SendPINToEmailResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).SendPINToEmail(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.SendPINToEmailResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.SendPINToEmailAsync(Queue.Services.Server.Tests.ServerServiceReference.SendPINToEmailRequest request) {
            return base.Channel.SendPINToEmailAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.SendPINToEmailResponse> SendPINToEmailAsync(string email) {
            Queue.Services.Server.Tests.ServerServiceReference.SendPINToEmailRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.SendPINToEmailRequest();
            inValue.email = email;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).SendPINToEmailAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.CheckPINResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.CheckPIN(Queue.Services.Server.Tests.ServerServiceReference.CheckPINRequest request) {
            return base.Channel.CheckPIN(request);
        }
        
        public void CheckPIN(string email, int source) {
            Queue.Services.Server.Tests.ServerServiceReference.CheckPINRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.CheckPINRequest();
            inValue.email = email;
            inValue.source = source;
            Queue.Services.Server.Tests.ServerServiceReference.CheckPINResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).CheckPIN(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.CheckPINResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.CheckPINAsync(Queue.Services.Server.Tests.ServerServiceReference.CheckPINRequest request) {
            return base.Channel.CheckPINAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.CheckPINResponse> CheckPINAsync(string email, int source) {
            Queue.Services.Server.Tests.ServerServiceReference.CheckPINRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.CheckPINRequest();
            inValue.email = email;
            inValue.source = source;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).CheckPINAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.FindClientRequestsResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.FindClientRequests(Queue.Services.Server.Tests.ServerServiceReference.FindClientRequestsRequest request) {
            return base.Channel.FindClientRequests(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequest[] FindClientRequests(int startIndex, int maxResults, Queue.Services.Server.Tests.ServerServiceReference.ClientRequestFilter filter) {
            Queue.Services.Server.Tests.ServerServiceReference.FindClientRequestsRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.FindClientRequestsRequest();
            inValue.startIndex = startIndex;
            inValue.maxResults = maxResults;
            inValue.filter = filter;
            Queue.Services.Server.Tests.ServerServiceReference.FindClientRequestsResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).FindClientRequests(inValue);
            return retVal.FindClientRequestsResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.FindClientRequestsResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.FindClientRequestsAsync(Queue.Services.Server.Tests.ServerServiceReference.FindClientRequestsRequest request) {
            return base.Channel.FindClientRequestsAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.FindClientRequestsResponse> FindClientRequestsAsync(int startIndex, int maxResults, Queue.Services.Server.Tests.ServerServiceReference.ClientRequestFilter filter) {
            Queue.Services.Server.Tests.ServerServiceReference.FindClientRequestsRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.FindClientRequestsRequest();
            inValue.startIndex = startIndex;
            inValue.maxResults = maxResults;
            inValue.filter = filter;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).FindClientRequestsAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetClientRequest(Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestRequest request) {
            return base.Channel.GetClientRequest(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequest GetClientRequest(System.Guid clientRequestId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestRequest();
            inValue.clientRequestId = clientRequestId;
            Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetClientRequest(inValue);
            return retVal.GetClientRequestResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetClientRequestAsync(Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestRequest request) {
            return base.Channel.GetClientRequestAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestResponse> GetClientRequestAsync(System.Guid clientRequestId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestRequest();
            inValue.clientRequestId = clientRequestId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetClientRequestAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestEventsResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetClientRequestEvents(Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestEventsRequest request) {
            return base.Channel.GetClientRequestEvents(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequestEvent[] GetClientRequestEvents(System.Guid clientRequestId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestEventsRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestEventsRequest();
            inValue.clientRequestId = clientRequestId;
            Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestEventsResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetClientRequestEvents(inValue);
            return retVal.GetClientRequestEventsResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestEventsResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetClientRequestEventsAsync(Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestEventsRequest request) {
            return base.Channel.GetClientRequestEventsAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestEventsResponse> GetClientRequestEventsAsync(System.Guid clientRequestId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestEventsRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestEventsRequest();
            inValue.clientRequestId = clientRequestId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetClientRequestEventsAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.AddEarlyClientRequestResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.AddEarlyClientRequest(Queue.Services.Server.Tests.ServerServiceReference.AddEarlyClientRequestRequest request) {
            return base.Channel.AddEarlyClientRequest(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequest AddEarlyClientRequest(System.Guid clientId, System.Guid serviceId, System.DateTime requestDate, System.TimeSpan requestTime, System.Collections.Generic.Dictionary<System.Guid, object> parameters, int subjects) {
            Queue.Services.Server.Tests.ServerServiceReference.AddEarlyClientRequestRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.AddEarlyClientRequestRequest();
            inValue.clientId = clientId;
            inValue.serviceId = serviceId;
            inValue.requestDate = requestDate;
            inValue.requestTime = requestTime;
            inValue.parameters = parameters;
            inValue.subjects = subjects;
            Queue.Services.Server.Tests.ServerServiceReference.AddEarlyClientRequestResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).AddEarlyClientRequest(inValue);
            return retVal.AddEarlyClientRequestResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.AddEarlyClientRequestResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.AddEarlyClientRequestAsync(Queue.Services.Server.Tests.ServerServiceReference.AddEarlyClientRequestRequest request) {
            return base.Channel.AddEarlyClientRequestAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.AddEarlyClientRequestResponse> AddEarlyClientRequestAsync(System.Guid clientId, System.Guid serviceId, System.DateTime requestDate, System.TimeSpan requestTime, System.Collections.Generic.Dictionary<System.Guid, object> parameters, int subjects) {
            Queue.Services.Server.Tests.ServerServiceReference.AddEarlyClientRequestRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.AddEarlyClientRequestRequest();
            inValue.clientId = clientId;
            inValue.serviceId = serviceId;
            inValue.requestDate = requestDate;
            inValue.requestTime = requestTime;
            inValue.parameters = parameters;
            inValue.subjects = subjects;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).AddEarlyClientRequestAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.AddLiveClientRequestResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.AddLiveClientRequest(Queue.Services.Server.Tests.ServerServiceReference.AddLiveClientRequestRequest request) {
            return base.Channel.AddLiveClientRequest(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequest AddLiveClientRequest(System.Guid clientId, System.Guid serviceId, bool isPriority, System.Collections.Generic.Dictionary<System.Guid, object> parameters, int subjects) {
            Queue.Services.Server.Tests.ServerServiceReference.AddLiveClientRequestRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.AddLiveClientRequestRequest();
            inValue.clientId = clientId;
            inValue.serviceId = serviceId;
            inValue.isPriority = isPriority;
            inValue.parameters = parameters;
            inValue.subjects = subjects;
            Queue.Services.Server.Tests.ServerServiceReference.AddLiveClientRequestResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).AddLiveClientRequest(inValue);
            return retVal.AddLiveClientRequestResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.AddLiveClientRequestResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.AddLiveClientRequestAsync(Queue.Services.Server.Tests.ServerServiceReference.AddLiveClientRequestRequest request) {
            return base.Channel.AddLiveClientRequestAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.AddLiveClientRequestResponse> AddLiveClientRequestAsync(System.Guid clientId, System.Guid serviceId, bool isPriority, System.Collections.Generic.Dictionary<System.Guid, object> parameters, int subjects) {
            Queue.Services.Server.Tests.ServerServiceReference.AddLiveClientRequestRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.AddLiveClientRequestRequest();
            inValue.clientId = clientId;
            inValue.serviceId = serviceId;
            inValue.isPriority = isPriority;
            inValue.parameters = parameters;
            inValue.subjects = subjects;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).AddLiveClientRequestAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.EditClientRequestResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditClientRequest(Queue.Services.Server.Tests.ServerServiceReference.EditClientRequestRequest request) {
            return base.Channel.EditClientRequest(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequest EditClientRequest(Queue.Services.Server.Tests.ServerServiceReference.ClientRequest source) {
            Queue.Services.Server.Tests.ServerServiceReference.EditClientRequestRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditClientRequestRequest();
            inValue.source = source;
            Queue.Services.Server.Tests.ServerServiceReference.EditClientRequestResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditClientRequest(inValue);
            return retVal.EditClientRequestResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditClientRequestResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditClientRequestAsync(Queue.Services.Server.Tests.ServerServiceReference.EditClientRequestRequest request) {
            return base.Channel.EditClientRequestAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditClientRequestResponse> EditClientRequestAsync(Queue.Services.Server.Tests.ServerServiceReference.ClientRequest source) {
            Queue.Services.Server.Tests.ServerServiceReference.EditClientRequestRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditClientRequestRequest();
            inValue.source = source;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditClientRequestAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestCouponResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetClientRequestCoupon(Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestCouponRequest request) {
            return base.Channel.GetClientRequestCoupon(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequestCoupon GetClientRequestCoupon(System.Guid clientRequestId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestCouponRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestCouponRequest();
            inValue.clientRequestId = clientRequestId;
            Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestCouponResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetClientRequestCoupon(inValue);
            return retVal.GetClientRequestCouponResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestCouponResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetClientRequestCouponAsync(Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestCouponRequest request) {
            return base.Channel.GetClientRequestCouponAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestCouponResponse> GetClientRequestCouponAsync(System.Guid clientRequestId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestCouponRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestCouponRequest();
            inValue.clientRequestId = clientRequestId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetClientRequestCouponAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequestResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.DeleteClientRequest(Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequestRequest request) {
            return base.Channel.DeleteClientRequest(request);
        }
        
        public void DeleteClientRequest(System.Guid clientRequestId) {
            Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequestRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequestRequest();
            inValue.clientRequestId = clientRequestId;
            Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequestResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).DeleteClientRequest(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequestResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.DeleteClientRequestAsync(Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequestRequest request) {
            return base.Channel.DeleteClientRequestAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequestResponse> DeleteClientRequestAsync(System.Guid clientRequestId) {
            Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequestRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequestRequest();
            inValue.clientRequestId = clientRequestId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).DeleteClientRequestAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.CancelClientRequestResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.CancelClientRequest(Queue.Services.Server.Tests.ServerServiceReference.CancelClientRequestRequest request) {
            return base.Channel.CancelClientRequest(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequest CancelClientRequest(System.Guid clientRequestId) {
            Queue.Services.Server.Tests.ServerServiceReference.CancelClientRequestRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.CancelClientRequestRequest();
            inValue.clientRequestId = clientRequestId;
            Queue.Services.Server.Tests.ServerServiceReference.CancelClientRequestResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).CancelClientRequest(inValue);
            return retVal.CancelClientRequestResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.CancelClientRequestResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.CancelClientRequestAsync(Queue.Services.Server.Tests.ServerServiceReference.CancelClientRequestRequest request) {
            return base.Channel.CancelClientRequestAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.CancelClientRequestResponse> CancelClientRequestAsync(System.Guid clientRequestId) {
            Queue.Services.Server.Tests.ServerServiceReference.CancelClientRequestRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.CancelClientRequestRequest();
            inValue.clientRequestId = clientRequestId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).CancelClientRequestAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.RestoreClientRequestResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.RestoreClientRequest(Queue.Services.Server.Tests.ServerServiceReference.RestoreClientRequestRequest request) {
            return base.Channel.RestoreClientRequest(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequest RestoreClientRequest(System.Guid clientRequestId) {
            Queue.Services.Server.Tests.ServerServiceReference.RestoreClientRequestRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.RestoreClientRequestRequest();
            inValue.clientRequestId = clientRequestId;
            Queue.Services.Server.Tests.ServerServiceReference.RestoreClientRequestResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).RestoreClientRequest(inValue);
            return retVal.RestoreClientRequestResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.RestoreClientRequestResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.RestoreClientRequestAsync(Queue.Services.Server.Tests.ServerServiceReference.RestoreClientRequestRequest request) {
            return base.Channel.RestoreClientRequestAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.RestoreClientRequestResponse> RestoreClientRequestAsync(System.Guid clientRequestId) {
            Queue.Services.Server.Tests.ServerServiceReference.RestoreClientRequestRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.RestoreClientRequestRequest();
            inValue.clientRequestId = clientRequestId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).RestoreClientRequestAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.PostponeClientRequestResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.PostponeClientRequest(Queue.Services.Server.Tests.ServerServiceReference.PostponeClientRequestRequest request) {
            return base.Channel.PostponeClientRequest(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequest PostponeClientRequest(System.Guid clientRequestId, System.TimeSpan postponeTime) {
            Queue.Services.Server.Tests.ServerServiceReference.PostponeClientRequestRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.PostponeClientRequestRequest();
            inValue.clientRequestId = clientRequestId;
            inValue.postponeTime = postponeTime;
            Queue.Services.Server.Tests.ServerServiceReference.PostponeClientRequestResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).PostponeClientRequest(inValue);
            return retVal.PostponeClientRequestResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.PostponeClientRequestResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.PostponeClientRequestAsync(Queue.Services.Server.Tests.ServerServiceReference.PostponeClientRequestRequest request) {
            return base.Channel.PostponeClientRequestAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.PostponeClientRequestResponse> PostponeClientRequestAsync(System.Guid clientRequestId, System.TimeSpan postponeTime) {
            Queue.Services.Server.Tests.ServerServiceReference.PostponeClientRequestRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.PostponeClientRequestRequest();
            inValue.clientRequestId = clientRequestId;
            inValue.postponeTime = postponeTime;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).PostponeClientRequestAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestParametersResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetClientRequestParameters(Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestParametersRequest request) {
            return base.Channel.GetClientRequestParameters(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequestParameter[] GetClientRequestParameters(System.Guid clientRequestId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestParametersRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestParametersRequest();
            inValue.clientRequestId = clientRequestId;
            Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestParametersResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetClientRequestParameters(inValue);
            return retVal.GetClientRequestParametersResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestParametersResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetClientRequestParametersAsync(Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestParametersRequest request) {
            return base.Channel.GetClientRequestParametersAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestParametersResponse> GetClientRequestParametersAsync(System.Guid clientRequestId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestParametersRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestParametersRequest();
            inValue.clientRequestId = clientRequestId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetClientRequestParametersAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestAdditionalServicesResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetClientRequestAdditionalServices(Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestAdditionalServicesRequest request) {
            return base.Channel.GetClientRequestAdditionalServices(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequestAdditionalService[] GetClientRequestAdditionalServices(System.Guid clientRequestId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestAdditionalServicesRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestAdditionalServicesRequest();
            inValue.clientRequestId = clientRequestId;
            Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestAdditionalServicesResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetClientRequestAdditionalServices(inValue);
            return retVal.GetClientRequestAdditionalServicesResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestAdditionalServicesResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetClientRequestAdditionalServicesAsync(Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestAdditionalServicesRequest request) {
            return base.Channel.GetClientRequestAdditionalServicesAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestAdditionalServicesResponse> GetClientRequestAdditionalServicesAsync(System.Guid clientRequestId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestAdditionalServicesRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestAdditionalServicesRequest();
            inValue.clientRequestId = clientRequestId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetClientRequestAdditionalServicesAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestAdditionalServiceResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetClientRequestAdditionalService(Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestAdditionalServiceRequest request) {
            return base.Channel.GetClientRequestAdditionalService(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequestAdditionalService GetClientRequestAdditionalService(System.Guid clientRequestAdditionalServiceId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestAdditionalServiceRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestAdditionalServiceRequest();
            inValue.clientRequestAdditionalServiceId = clientRequestAdditionalServiceId;
            Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestAdditionalServiceResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetClientRequestAdditionalService(inValue);
            return retVal.GetClientRequestAdditionalServiceResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestAdditionalServiceResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetClientRequestAdditionalServiceAsync(Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestAdditionalServiceRequest request) {
            return base.Channel.GetClientRequestAdditionalServiceAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestAdditionalServiceResponse> GetClientRequestAdditionalServiceAsync(System.Guid clientRequestAdditionalServiceId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestAdditionalServiceRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetClientRequestAdditionalServiceRequest();
            inValue.clientRequestAdditionalServiceId = clientRequestAdditionalServiceId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetClientRequestAdditionalServiceAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.EditClientRequestAdditionalServiceResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditClientRequestAdditionalService(Queue.Services.Server.Tests.ServerServiceReference.EditClientRequestAdditionalServiceRequest request) {
            return base.Channel.EditClientRequestAdditionalService(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequestAdditionalService EditClientRequestAdditionalService(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestAdditionalService source) {
            Queue.Services.Server.Tests.ServerServiceReference.EditClientRequestAdditionalServiceRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditClientRequestAdditionalServiceRequest();
            inValue.source = source;
            Queue.Services.Server.Tests.ServerServiceReference.EditClientRequestAdditionalServiceResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditClientRequestAdditionalService(inValue);
            return retVal.EditClientRequestAdditionalServiceResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditClientRequestAdditionalServiceResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditClientRequestAdditionalServiceAsync(Queue.Services.Server.Tests.ServerServiceReference.EditClientRequestAdditionalServiceRequest request) {
            return base.Channel.EditClientRequestAdditionalServiceAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditClientRequestAdditionalServiceResponse> EditClientRequestAdditionalServiceAsync(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestAdditionalService source) {
            Queue.Services.Server.Tests.ServerServiceReference.EditClientRequestAdditionalServiceRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditClientRequestAdditionalServiceRequest();
            inValue.source = source;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditClientRequestAdditionalServiceAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequestAdditionalServiceResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.DeleteClientRequestAdditionalService(Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequestAdditionalServiceRequest request) {
            return base.Channel.DeleteClientRequestAdditionalService(request);
        }
        
        public void DeleteClientRequestAdditionalService(System.Guid clientRequestAdditionalServiceId) {
            Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequestAdditionalServiceRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequestAdditionalServiceRequest();
            inValue.clientRequestAdditionalServiceId = clientRequestAdditionalServiceId;
            Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequestAdditionalServiceResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).DeleteClientRequestAdditionalService(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequestAdditionalServiceResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.DeleteClientRequestAdditionalServiceAsync(Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequestAdditionalServiceRequest request) {
            return base.Channel.DeleteClientRequestAdditionalServiceAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequestAdditionalServiceResponse> DeleteClientRequestAdditionalServiceAsync(System.Guid clientRequestAdditionalServiceId) {
            Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequestAdditionalServiceRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.DeleteClientRequestAdditionalServiceRequest();
            inValue.clientRequestAdditionalServiceId = clientRequestAdditionalServiceId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).DeleteClientRequestAdditionalServiceAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetOperatorClientRequestPlansResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetOperatorClientRequestPlans(Queue.Services.Server.Tests.ServerServiceReference.GetOperatorClientRequestPlansRequest request) {
            return base.Channel.GetOperatorClientRequestPlans(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequestPlan[] GetOperatorClientRequestPlans() {
            Queue.Services.Server.Tests.ServerServiceReference.GetOperatorClientRequestPlansRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetOperatorClientRequestPlansRequest();
            Queue.Services.Server.Tests.ServerServiceReference.GetOperatorClientRequestPlansResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetOperatorClientRequestPlans(inValue);
            return retVal.GetOperatorClientRequestPlansResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetOperatorClientRequestPlansResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetOperatorClientRequestPlansAsync(Queue.Services.Server.Tests.ServerServiceReference.GetOperatorClientRequestPlansRequest request) {
            return base.Channel.GetOperatorClientRequestPlansAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetOperatorClientRequestPlansResponse> GetOperatorClientRequestPlansAsync() {
            Queue.Services.Server.Tests.ServerServiceReference.GetOperatorClientRequestPlansRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetOperatorClientRequestPlansRequest();
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetOperatorClientRequestPlansAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetCurrentClientRequestPlansResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetCurrentClientRequestPlans(Queue.Services.Server.Tests.ServerServiceReference.GetCurrentClientRequestPlansRequest request) {
            return base.Channel.GetCurrentClientRequestPlans(request);
        }
        
        public System.Collections.Generic.Dictionary<Queue.Services.Server.Tests.ServerServiceReference.Operator, Queue.Services.Server.Tests.ServerServiceReference.ClientRequestPlan> GetCurrentClientRequestPlans() {
            Queue.Services.Server.Tests.ServerServiceReference.GetCurrentClientRequestPlansRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetCurrentClientRequestPlansRequest();
            Queue.Services.Server.Tests.ServerServiceReference.GetCurrentClientRequestPlansResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetCurrentClientRequestPlans(inValue);
            return retVal.GetCurrentClientRequestPlansResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetCurrentClientRequestPlansResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetCurrentClientRequestPlansAsync(Queue.Services.Server.Tests.ServerServiceReference.GetCurrentClientRequestPlansRequest request) {
            return base.Channel.GetCurrentClientRequestPlansAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetCurrentClientRequestPlansResponse> GetCurrentClientRequestPlansAsync() {
            Queue.Services.Server.Tests.ServerServiceReference.GetCurrentClientRequestPlansRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetCurrentClientRequestPlansRequest();
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetCurrentClientRequestPlansAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetCurrentClientRequestPlanResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetCurrentClientRequestPlan(Queue.Services.Server.Tests.ServerServiceReference.GetCurrentClientRequestPlanRequest request) {
            return base.Channel.GetCurrentClientRequestPlan(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequestPlan GetCurrentClientRequestPlan() {
            Queue.Services.Server.Tests.ServerServiceReference.GetCurrentClientRequestPlanRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetCurrentClientRequestPlanRequest();
            Queue.Services.Server.Tests.ServerServiceReference.GetCurrentClientRequestPlanResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetCurrentClientRequestPlan(inValue);
            return retVal.GetCurrentClientRequestPlanResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetCurrentClientRequestPlanResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetCurrentClientRequestPlanAsync(Queue.Services.Server.Tests.ServerServiceReference.GetCurrentClientRequestPlanRequest request) {
            return base.Channel.GetCurrentClientRequestPlanAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetCurrentClientRequestPlanResponse> GetCurrentClientRequestPlanAsync() {
            Queue.Services.Server.Tests.ServerServiceReference.GetCurrentClientRequestPlanRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetCurrentClientRequestPlanRequest();
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetCurrentClientRequestPlanAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.EditCurrentClientRequestResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditCurrentClientRequest(Queue.Services.Server.Tests.ServerServiceReference.EditCurrentClientRequestRequest request) {
            return base.Channel.EditCurrentClientRequest(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.ClientRequest EditCurrentClientRequest(Queue.Services.Server.Tests.ServerServiceReference.ClientRequest source) {
            Queue.Services.Server.Tests.ServerServiceReference.EditCurrentClientRequestRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditCurrentClientRequestRequest();
            inValue.source = source;
            Queue.Services.Server.Tests.ServerServiceReference.EditCurrentClientRequestResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditCurrentClientRequest(inValue);
            return retVal.EditCurrentClientRequestResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditCurrentClientRequestResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditCurrentClientRequestAsync(Queue.Services.Server.Tests.ServerServiceReference.EditCurrentClientRequestRequest request) {
            return base.Channel.EditCurrentClientRequestAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditCurrentClientRequestResponse> EditCurrentClientRequestAsync(Queue.Services.Server.Tests.ServerServiceReference.ClientRequest source) {
            Queue.Services.Server.Tests.ServerServiceReference.EditCurrentClientRequestRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditCurrentClientRequestRequest();
            inValue.source = source;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditCurrentClientRequestAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.UpdateCurrentClientRequestResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.UpdateCurrentClientRequest(Queue.Services.Server.Tests.ServerServiceReference.UpdateCurrentClientRequestRequest request) {
            return base.Channel.UpdateCurrentClientRequest(request);
        }
        
        public void UpdateCurrentClientRequest(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestState state) {
            Queue.Services.Server.Tests.ServerServiceReference.UpdateCurrentClientRequestRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.UpdateCurrentClientRequestRequest();
            inValue.state = state;
            Queue.Services.Server.Tests.ServerServiceReference.UpdateCurrentClientRequestResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).UpdateCurrentClientRequest(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.UpdateCurrentClientRequestResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.UpdateCurrentClientRequestAsync(Queue.Services.Server.Tests.ServerServiceReference.UpdateCurrentClientRequestRequest request) {
            return base.Channel.UpdateCurrentClientRequestAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.UpdateCurrentClientRequestResponse> UpdateCurrentClientRequestAsync(Queue.Services.Server.Tests.ServerServiceReference.ClientRequestState state) {
            Queue.Services.Server.Tests.ServerServiceReference.UpdateCurrentClientRequestRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.UpdateCurrentClientRequestRequest();
            inValue.state = state;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).UpdateCurrentClientRequestAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.RedirectToOperatorCurrentClientRequestResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.RedirectToOperatorCurrentClientRequest(Queue.Services.Server.Tests.ServerServiceReference.RedirectToOperatorCurrentClientRequestRequest request) {
            return base.Channel.RedirectToOperatorCurrentClientRequest(request);
        }
        
        public void RedirectToOperatorCurrentClientRequest(System.Guid redirectOperatorId) {
            Queue.Services.Server.Tests.ServerServiceReference.RedirectToOperatorCurrentClientRequestRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.RedirectToOperatorCurrentClientRequestRequest();
            inValue.redirectOperatorId = redirectOperatorId;
            Queue.Services.Server.Tests.ServerServiceReference.RedirectToOperatorCurrentClientRequestResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).RedirectToOperatorCurrentClientRequest(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.RedirectToOperatorCurrentClientRequestResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.RedirectToOperatorCurrentClientRequestAsync(Queue.Services.Server.Tests.ServerServiceReference.RedirectToOperatorCurrentClientRequestRequest request) {
            return base.Channel.RedirectToOperatorCurrentClientRequestAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.RedirectToOperatorCurrentClientRequestResponse> RedirectToOperatorCurrentClientRequestAsync(System.Guid redirectOperatorId) {
            Queue.Services.Server.Tests.ServerServiceReference.RedirectToOperatorCurrentClientRequestRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.RedirectToOperatorCurrentClientRequestRequest();
            inValue.redirectOperatorId = redirectOperatorId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).RedirectToOperatorCurrentClientRequestAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.CallClientByRequestNumberResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.CallClientByRequestNumber(Queue.Services.Server.Tests.ServerServiceReference.CallClientByRequestNumberRequest request) {
            return base.Channel.CallClientByRequestNumber(request);
        }
        
        public void CallClientByRequestNumber(int number) {
            Queue.Services.Server.Tests.ServerServiceReference.CallClientByRequestNumberRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.CallClientByRequestNumberRequest();
            inValue.number = number;
            Queue.Services.Server.Tests.ServerServiceReference.CallClientByRequestNumberResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).CallClientByRequestNumber(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.CallClientByRequestNumberResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.CallClientByRequestNumberAsync(Queue.Services.Server.Tests.ServerServiceReference.CallClientByRequestNumberRequest request) {
            return base.Channel.CallClientByRequestNumberAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.CallClientByRequestNumberResponse> CallClientByRequestNumberAsync(int number) {
            Queue.Services.Server.Tests.ServerServiceReference.CallClientByRequestNumberRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.CallClientByRequestNumberRequest();
            inValue.number = number;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).CallClientByRequestNumberAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.PostponeCurrentClientRequestResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.PostponeCurrentClientRequest(Queue.Services.Server.Tests.ServerServiceReference.PostponeCurrentClientRequestRequest request) {
            return base.Channel.PostponeCurrentClientRequest(request);
        }
        
        public void PostponeCurrentClientRequest(System.TimeSpan postponeTime) {
            Queue.Services.Server.Tests.ServerServiceReference.PostponeCurrentClientRequestRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.PostponeCurrentClientRequestRequest();
            inValue.postponeTime = postponeTime;
            Queue.Services.Server.Tests.ServerServiceReference.PostponeCurrentClientRequestResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).PostponeCurrentClientRequest(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.PostponeCurrentClientRequestResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.PostponeCurrentClientRequestAsync(Queue.Services.Server.Tests.ServerServiceReference.PostponeCurrentClientRequestRequest request) {
            return base.Channel.PostponeCurrentClientRequestAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.PostponeCurrentClientRequestResponse> PostponeCurrentClientRequestAsync(System.TimeSpan postponeTime) {
            Queue.Services.Server.Tests.ServerServiceReference.PostponeCurrentClientRequestRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.PostponeCurrentClientRequestRequest();
            inValue.postponeTime = postponeTime;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).PostponeCurrentClientRequestAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.ReturnCurrentClientRequestResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.ReturnCurrentClientRequest(Queue.Services.Server.Tests.ServerServiceReference.ReturnCurrentClientRequestRequest request) {
            return base.Channel.ReturnCurrentClientRequest(request);
        }
        
        public void ReturnCurrentClientRequest() {
            Queue.Services.Server.Tests.ServerServiceReference.ReturnCurrentClientRequestRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.ReturnCurrentClientRequestRequest();
            Queue.Services.Server.Tests.ServerServiceReference.ReturnCurrentClientRequestResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).ReturnCurrentClientRequest(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.ReturnCurrentClientRequestResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.ReturnCurrentClientRequestAsync(Queue.Services.Server.Tests.ServerServiceReference.ReturnCurrentClientRequestRequest request) {
            return base.Channel.ReturnCurrentClientRequestAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.ReturnCurrentClientRequestResponse> ReturnCurrentClientRequestAsync() {
            Queue.Services.Server.Tests.ServerServiceReference.ReturnCurrentClientRequestRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.ReturnCurrentClientRequestRequest();
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).ReturnCurrentClientRequestAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.CallCurrentClientResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.CallCurrentClient(Queue.Services.Server.Tests.ServerServiceReference.CallCurrentClientRequest request) {
            return base.Channel.CallCurrentClient(request);
        }
        
        public void CallCurrentClient() {
            Queue.Services.Server.Tests.ServerServiceReference.CallCurrentClientRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.CallCurrentClientRequest();
            Queue.Services.Server.Tests.ServerServiceReference.CallCurrentClientResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).CallCurrentClient(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.CallCurrentClientResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.CallCurrentClientAsync(Queue.Services.Server.Tests.ServerServiceReference.CallCurrentClientRequest request) {
            return base.Channel.CallCurrentClientAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.CallCurrentClientResponse> CallCurrentClientAsync() {
            Queue.Services.Server.Tests.ServerServiceReference.CallCurrentClientRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.CallCurrentClientRequest();
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).CallCurrentClientAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetQueuePlan(Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanRequest request) {
            return base.Channel.GetQueuePlan(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.QueuePlan GetQueuePlan(System.DateTime planDate) {
            Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanRequest();
            inValue.planDate = planDate;
            Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetQueuePlan(inValue);
            return retVal.GetQueuePlanResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetQueuePlanAsync(Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanRequest request) {
            return base.Channel.GetQueuePlanAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanResponse> GetQueuePlanAsync(System.DateTime planDate) {
            Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetQueuePlanRequest();
            inValue.planDate = planDate;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetQueuePlanAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetServiceFreeTimeResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetServiceFreeTime(Queue.Services.Server.Tests.ServerServiceReference.GetServiceFreeTimeRequest request) {
            return base.Channel.GetServiceFreeTime(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceFreeTime GetServiceFreeTime(System.Guid serviceId, System.DateTime planDate, Queue.Services.Server.Tests.ServerServiceReference.ClientRequestType queueType) {
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceFreeTimeRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetServiceFreeTimeRequest();
            inValue.serviceId = serviceId;
            inValue.planDate = planDate;
            inValue.queueType = queueType;
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceFreeTimeResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetServiceFreeTime(inValue);
            return retVal.GetServiceFreeTimeResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceFreeTimeResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetServiceFreeTimeAsync(Queue.Services.Server.Tests.ServerServiceReference.GetServiceFreeTimeRequest request) {
            return base.Channel.GetServiceFreeTimeAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceFreeTimeResponse> GetServiceFreeTimeAsync(System.Guid serviceId, System.DateTime planDate, Queue.Services.Server.Tests.ServerServiceReference.ClientRequestType queueType) {
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceFreeTimeRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetServiceFreeTimeRequest();
            inValue.serviceId = serviceId;
            inValue.planDate = planDate;
            inValue.queueType = queueType;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetServiceFreeTimeAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.RefreshTodayQueuePlanResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.RefreshTodayQueuePlan(Queue.Services.Server.Tests.ServerServiceReference.RefreshTodayQueuePlanRequest request) {
            return base.Channel.RefreshTodayQueuePlan(request);
        }
        
        public void RefreshTodayQueuePlan() {
            Queue.Services.Server.Tests.ServerServiceReference.RefreshTodayQueuePlanRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.RefreshTodayQueuePlanRequest();
            Queue.Services.Server.Tests.ServerServiceReference.RefreshTodayQueuePlanResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).RefreshTodayQueuePlan(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.RefreshTodayQueuePlanResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.RefreshTodayQueuePlanAsync(Queue.Services.Server.Tests.ServerServiceReference.RefreshTodayQueuePlanRequest request) {
            return base.Channel.RefreshTodayQueuePlanAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.RefreshTodayQueuePlanResponse> RefreshTodayQueuePlanAsync() {
            Queue.Services.Server.Tests.ServerServiceReference.RefreshTodayQueuePlanRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.RefreshTodayQueuePlanRequest();
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).RefreshTodayQueuePlanAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetRootServiceGroupsResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetRootServiceGroups(Queue.Services.Server.Tests.ServerServiceReference.GetRootServiceGroupsRequest request) {
            return base.Channel.GetRootServiceGroups(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceGroup[] GetRootServiceGroups() {
            Queue.Services.Server.Tests.ServerServiceReference.GetRootServiceGroupsRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetRootServiceGroupsRequest();
            Queue.Services.Server.Tests.ServerServiceReference.GetRootServiceGroupsResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetRootServiceGroups(inValue);
            return retVal.GetRootServiceGroupsResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetRootServiceGroupsResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetRootServiceGroupsAsync(Queue.Services.Server.Tests.ServerServiceReference.GetRootServiceGroupsRequest request) {
            return base.Channel.GetRootServiceGroupsAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetRootServiceGroupsResponse> GetRootServiceGroupsAsync() {
            Queue.Services.Server.Tests.ServerServiceReference.GetRootServiceGroupsRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetRootServiceGroupsRequest();
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetRootServiceGroupsAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetServiceGroupsResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetServiceGroups(Queue.Services.Server.Tests.ServerServiceReference.GetServiceGroupsRequest request) {
            return base.Channel.GetServiceGroups(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceGroup[] GetServiceGroups(System.Guid parentServiceGroupId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceGroupsRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetServiceGroupsRequest();
            inValue.parentServiceGroupId = parentServiceGroupId;
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceGroupsResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetServiceGroups(inValue);
            return retVal.GetServiceGroupsResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceGroupsResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetServiceGroupsAsync(Queue.Services.Server.Tests.ServerServiceReference.GetServiceGroupsRequest request) {
            return base.Channel.GetServiceGroupsAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceGroupsResponse> GetServiceGroupsAsync(System.Guid parentServiceGroupId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceGroupsRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetServiceGroupsRequest();
            inValue.parentServiceGroupId = parentServiceGroupId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetServiceGroupsAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetServiceGroupResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetServiceGroup(Queue.Services.Server.Tests.ServerServiceReference.GetServiceGroupRequest request) {
            return base.Channel.GetServiceGroup(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceGroup GetServiceGroup(System.Guid serviceGroupId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceGroupRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetServiceGroupRequest();
            inValue.serviceGroupId = serviceGroupId;
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceGroupResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetServiceGroup(inValue);
            return retVal.GetServiceGroupResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceGroupResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetServiceGroupAsync(Queue.Services.Server.Tests.ServerServiceReference.GetServiceGroupRequest request) {
            return base.Channel.GetServiceGroupAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceGroupResponse> GetServiceGroupAsync(System.Guid serviceGroupId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceGroupRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetServiceGroupRequest();
            inValue.serviceGroupId = serviceGroupId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetServiceGroupAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.EditServiceGroupResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditServiceGroup(Queue.Services.Server.Tests.ServerServiceReference.EditServiceGroupRequest request) {
            return base.Channel.EditServiceGroup(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.ServiceGroup EditServiceGroup(Queue.Services.Server.Tests.ServerServiceReference.ServiceGroup serviceGroup) {
            Queue.Services.Server.Tests.ServerServiceReference.EditServiceGroupRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditServiceGroupRequest();
            inValue.serviceGroup = serviceGroup;
            Queue.Services.Server.Tests.ServerServiceReference.EditServiceGroupResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditServiceGroup(inValue);
            return retVal.EditServiceGroupResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditServiceGroupResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditServiceGroupAsync(Queue.Services.Server.Tests.ServerServiceReference.EditServiceGroupRequest request) {
            return base.Channel.EditServiceGroupAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditServiceGroupResponse> EditServiceGroupAsync(Queue.Services.Server.Tests.ServerServiceReference.ServiceGroup serviceGroup) {
            Queue.Services.Server.Tests.ServerServiceReference.EditServiceGroupRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditServiceGroupRequest();
            inValue.serviceGroup = serviceGroup;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditServiceGroupAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.MoveServiceGroupResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.MoveServiceGroup(Queue.Services.Server.Tests.ServerServiceReference.MoveServiceGroupRequest request) {
            return base.Channel.MoveServiceGroup(request);
        }
        
        public void MoveServiceGroup(System.Guid sourceGroupId, System.Guid targetGroupId) {
            Queue.Services.Server.Tests.ServerServiceReference.MoveServiceGroupRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.MoveServiceGroupRequest();
            inValue.sourceGroupId = sourceGroupId;
            inValue.targetGroupId = targetGroupId;
            Queue.Services.Server.Tests.ServerServiceReference.MoveServiceGroupResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).MoveServiceGroup(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.MoveServiceGroupResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.MoveServiceGroupAsync(Queue.Services.Server.Tests.ServerServiceReference.MoveServiceGroupRequest request) {
            return base.Channel.MoveServiceGroupAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.MoveServiceGroupResponse> MoveServiceGroupAsync(System.Guid sourceGroupId, System.Guid targetGroupId) {
            Queue.Services.Server.Tests.ServerServiceReference.MoveServiceGroupRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.MoveServiceGroupRequest();
            inValue.sourceGroupId = sourceGroupId;
            inValue.targetGroupId = targetGroupId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).MoveServiceGroupAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.MoveServiceGroupToRootResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.MoveServiceGroupToRoot(Queue.Services.Server.Tests.ServerServiceReference.MoveServiceGroupToRootRequest request) {
            return base.Channel.MoveServiceGroupToRoot(request);
        }
        
        public void MoveServiceGroupToRoot(System.Guid sourceGroupId) {
            Queue.Services.Server.Tests.ServerServiceReference.MoveServiceGroupToRootRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.MoveServiceGroupToRootRequest();
            inValue.sourceGroupId = sourceGroupId;
            Queue.Services.Server.Tests.ServerServiceReference.MoveServiceGroupToRootResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).MoveServiceGroupToRoot(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.MoveServiceGroupToRootResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.MoveServiceGroupToRootAsync(Queue.Services.Server.Tests.ServerServiceReference.MoveServiceGroupToRootRequest request) {
            return base.Channel.MoveServiceGroupToRootAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.MoveServiceGroupToRootResponse> MoveServiceGroupToRootAsync(System.Guid sourceGroupId) {
            Queue.Services.Server.Tests.ServerServiceReference.MoveServiceGroupToRootRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.MoveServiceGroupToRootRequest();
            inValue.sourceGroupId = sourceGroupId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).MoveServiceGroupToRootAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.ServiceGroupUpResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.ServiceGroupUp(Queue.Services.Server.Tests.ServerServiceReference.ServiceGroupUpRequest request) {
            return base.Channel.ServiceGroupUp(request);
        }
        
        public bool ServiceGroupUp(System.Guid serviceGroupId) {
            Queue.Services.Server.Tests.ServerServiceReference.ServiceGroupUpRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.ServiceGroupUpRequest();
            inValue.serviceGroupId = serviceGroupId;
            Queue.Services.Server.Tests.ServerServiceReference.ServiceGroupUpResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).ServiceGroupUp(inValue);
            return retVal.ServiceGroupUpResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.ServiceGroupUpResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.ServiceGroupUpAsync(Queue.Services.Server.Tests.ServerServiceReference.ServiceGroupUpRequest request) {
            return base.Channel.ServiceGroupUpAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.ServiceGroupUpResponse> ServiceGroupUpAsync(System.Guid serviceGroupId) {
            Queue.Services.Server.Tests.ServerServiceReference.ServiceGroupUpRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.ServiceGroupUpRequest();
            inValue.serviceGroupId = serviceGroupId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).ServiceGroupUpAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.ServiceGroupDownResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.ServiceGroupDown(Queue.Services.Server.Tests.ServerServiceReference.ServiceGroupDownRequest request) {
            return base.Channel.ServiceGroupDown(request);
        }
        
        public bool ServiceGroupDown(System.Guid serviceGroupId) {
            Queue.Services.Server.Tests.ServerServiceReference.ServiceGroupDownRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.ServiceGroupDownRequest();
            inValue.serviceGroupId = serviceGroupId;
            Queue.Services.Server.Tests.ServerServiceReference.ServiceGroupDownResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).ServiceGroupDown(inValue);
            return retVal.ServiceGroupDownResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.ServiceGroupDownResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.ServiceGroupDownAsync(Queue.Services.Server.Tests.ServerServiceReference.ServiceGroupDownRequest request) {
            return base.Channel.ServiceGroupDownAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.ServiceGroupDownResponse> ServiceGroupDownAsync(System.Guid serviceGroupId) {
            Queue.Services.Server.Tests.ServerServiceReference.ServiceGroupDownRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.ServiceGroupDownRequest();
            inValue.serviceGroupId = serviceGroupId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).ServiceGroupDownAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceGroupResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.DeleteServiceGroup(Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceGroupRequest request) {
            return base.Channel.DeleteServiceGroup(request);
        }
        
        public void DeleteServiceGroup(System.Guid serviceGroupId) {
            Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceGroupRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceGroupRequest();
            inValue.serviceGroupId = serviceGroupId;
            Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceGroupResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).DeleteServiceGroup(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceGroupResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.DeleteServiceGroupAsync(Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceGroupRequest request) {
            return base.Channel.DeleteServiceGroupAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceGroupResponse> DeleteServiceGroupAsync(System.Guid serviceGroupId) {
            Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceGroupRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.DeleteServiceGroupRequest();
            inValue.serviceGroupId = serviceGroupId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).DeleteServiceGroupAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.OpenUserSessionResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.OpenUserSession(Queue.Services.Server.Tests.ServerServiceReference.OpenUserSessionRequest request) {
            return base.Channel.OpenUserSession(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.User OpenUserSession(System.Guid sessionId) {
            Queue.Services.Server.Tests.ServerServiceReference.OpenUserSessionRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.OpenUserSessionRequest();
            inValue.sessionId = sessionId;
            Queue.Services.Server.Tests.ServerServiceReference.OpenUserSessionResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).OpenUserSession(inValue);
            return retVal.OpenUserSessionResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.OpenUserSessionResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.OpenUserSessionAsync(Queue.Services.Server.Tests.ServerServiceReference.OpenUserSessionRequest request) {
            return base.Channel.OpenUserSessionAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.OpenUserSessionResponse> OpenUserSessionAsync(System.Guid sessionId) {
            Queue.Services.Server.Tests.ServerServiceReference.OpenUserSessionRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.OpenUserSessionRequest();
            inValue.sessionId = sessionId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).OpenUserSessionAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.UserHeartbeatResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.UserHeartbeat(Queue.Services.Server.Tests.ServerServiceReference.UserHeartbeatRequest request) {
            return base.Channel.UserHeartbeat(request);
        }
        
        public void UserHeartbeat() {
            Queue.Services.Server.Tests.ServerServiceReference.UserHeartbeatRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.UserHeartbeatRequest();
            Queue.Services.Server.Tests.ServerServiceReference.UserHeartbeatResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).UserHeartbeat(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.UserHeartbeatResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.UserHeartbeatAsync(Queue.Services.Server.Tests.ServerServiceReference.UserHeartbeatRequest request) {
            return base.Channel.UserHeartbeatAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.UserHeartbeatResponse> UserHeartbeatAsync() {
            Queue.Services.Server.Tests.ServerServiceReference.UserHeartbeatRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.UserHeartbeatRequest();
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).UserHeartbeatAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetUsersResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetUsers(Queue.Services.Server.Tests.ServerServiceReference.GetUsersRequest request) {
            return base.Channel.GetUsers(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.User[] GetUsers() {
            Queue.Services.Server.Tests.ServerServiceReference.GetUsersRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetUsersRequest();
            Queue.Services.Server.Tests.ServerServiceReference.GetUsersResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetUsers(inValue);
            return retVal.GetUsersResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetUsersResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetUsersAsync(Queue.Services.Server.Tests.ServerServiceReference.GetUsersRequest request) {
            return base.Channel.GetUsersAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetUsersResponse> GetUsersAsync() {
            Queue.Services.Server.Tests.ServerServiceReference.GetUsersRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetUsersRequest();
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetUsersAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetUserResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetUser(Queue.Services.Server.Tests.ServerServiceReference.GetUserRequest request) {
            return base.Channel.GetUser(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.User GetUser(System.Guid userId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetUserRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetUserRequest();
            inValue.userId = userId;
            Queue.Services.Server.Tests.ServerServiceReference.GetUserResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetUser(inValue);
            return retVal.GetUserResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetUserResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetUserAsync(Queue.Services.Server.Tests.ServerServiceReference.GetUserRequest request) {
            return base.Channel.GetUserAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetUserResponse> GetUserAsync(System.Guid userId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetUserRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetUserRequest();
            inValue.userId = userId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetUserAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetUserLinksResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetUserLinks(Queue.Services.Server.Tests.ServerServiceReference.GetUserLinksRequest request) {
            return base.Channel.GetUserLinks(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntityLink[] GetUserLinks(Queue.Services.Server.Tests.ServerServiceReference.UserRole userRole) {
            Queue.Services.Server.Tests.ServerServiceReference.GetUserLinksRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetUserLinksRequest();
            inValue.userRole = userRole;
            Queue.Services.Server.Tests.ServerServiceReference.GetUserLinksResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetUserLinks(inValue);
            return retVal.GetUserLinksResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetUserLinksResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetUserLinksAsync(Queue.Services.Server.Tests.ServerServiceReference.GetUserLinksRequest request) {
            return base.Channel.GetUserLinksAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetUserLinksResponse> GetUserLinksAsync(Queue.Services.Server.Tests.ServerServiceReference.UserRole userRole) {
            Queue.Services.Server.Tests.ServerServiceReference.GetUserLinksRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetUserLinksRequest();
            inValue.userRole = userRole;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetUserLinksAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetRedirectOperatorsLinksResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetRedirectOperatorsLinks(Queue.Services.Server.Tests.ServerServiceReference.GetRedirectOperatorsLinksRequest request) {
            return base.Channel.GetRedirectOperatorsLinks(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntityLink[] GetRedirectOperatorsLinks() {
            Queue.Services.Server.Tests.ServerServiceReference.GetRedirectOperatorsLinksRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetRedirectOperatorsLinksRequest();
            Queue.Services.Server.Tests.ServerServiceReference.GetRedirectOperatorsLinksResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetRedirectOperatorsLinks(inValue);
            return retVal.GetRedirectOperatorsLinksResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetRedirectOperatorsLinksResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetRedirectOperatorsLinksAsync(Queue.Services.Server.Tests.ServerServiceReference.GetRedirectOperatorsLinksRequest request) {
            return base.Channel.GetRedirectOperatorsLinksAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetRedirectOperatorsLinksResponse> GetRedirectOperatorsLinksAsync() {
            Queue.Services.Server.Tests.ServerServiceReference.GetRedirectOperatorsLinksRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetRedirectOperatorsLinksRequest();
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetRedirectOperatorsLinksAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.UserLoginResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.UserLogin(Queue.Services.Server.Tests.ServerServiceReference.UserLoginRequest request) {
            return base.Channel.UserLogin(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.User UserLogin(System.Guid userId, string password) {
            Queue.Services.Server.Tests.ServerServiceReference.UserLoginRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.UserLoginRequest();
            inValue.userId = userId;
            inValue.password = password;
            Queue.Services.Server.Tests.ServerServiceReference.UserLoginResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).UserLogin(inValue);
            return retVal.UserLoginResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.UserLoginResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.UserLoginAsync(Queue.Services.Server.Tests.ServerServiceReference.UserLoginRequest request) {
            return base.Channel.UserLoginAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.UserLoginResponse> UserLoginAsync(System.Guid userId, string password) {
            Queue.Services.Server.Tests.ServerServiceReference.UserLoginRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.UserLoginRequest();
            inValue.userId = userId;
            inValue.password = password;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).UserLoginAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.EditAdministratorResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditAdministrator(Queue.Services.Server.Tests.ServerServiceReference.EditAdministratorRequest request) {
            return base.Channel.EditAdministrator(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.Administrator EditAdministrator(Queue.Services.Server.Tests.ServerServiceReference.Administrator administrator) {
            Queue.Services.Server.Tests.ServerServiceReference.EditAdministratorRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditAdministratorRequest();
            inValue.administrator = administrator;
            Queue.Services.Server.Tests.ServerServiceReference.EditAdministratorResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditAdministrator(inValue);
            return retVal.EditAdministratorResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditAdministratorResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditAdministratorAsync(Queue.Services.Server.Tests.ServerServiceReference.EditAdministratorRequest request) {
            return base.Channel.EditAdministratorAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditAdministratorResponse> EditAdministratorAsync(Queue.Services.Server.Tests.ServerServiceReference.Administrator administrator) {
            Queue.Services.Server.Tests.ServerServiceReference.EditAdministratorRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditAdministratorRequest();
            inValue.administrator = administrator;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditAdministratorAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.EditOperatorResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditOperator(Queue.Services.Server.Tests.ServerServiceReference.EditOperatorRequest request) {
            return base.Channel.EditOperator(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.Operator EditOperator(Queue.Services.Server.Tests.ServerServiceReference.Operator user) {
            Queue.Services.Server.Tests.ServerServiceReference.EditOperatorRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditOperatorRequest();
            inValue.user = user;
            Queue.Services.Server.Tests.ServerServiceReference.EditOperatorResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditOperator(inValue);
            return retVal.EditOperatorResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditOperatorResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditOperatorAsync(Queue.Services.Server.Tests.ServerServiceReference.EditOperatorRequest request) {
            return base.Channel.EditOperatorAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditOperatorResponse> EditOperatorAsync(Queue.Services.Server.Tests.ServerServiceReference.Operator user) {
            Queue.Services.Server.Tests.ServerServiceReference.EditOperatorRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditOperatorRequest();
            inValue.user = user;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditOperatorAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.DeleteUserResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.DeleteUser(Queue.Services.Server.Tests.ServerServiceReference.DeleteUserRequest request) {
            return base.Channel.DeleteUser(request);
        }
        
        public void DeleteUser(System.Guid userId) {
            Queue.Services.Server.Tests.ServerServiceReference.DeleteUserRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.DeleteUserRequest();
            inValue.userId = userId;
            Queue.Services.Server.Tests.ServerServiceReference.DeleteUserResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).DeleteUser(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteUserResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.DeleteUserAsync(Queue.Services.Server.Tests.ServerServiceReference.DeleteUserRequest request) {
            return base.Channel.DeleteUserAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteUserResponse> DeleteUserAsync(System.Guid userId) {
            Queue.Services.Server.Tests.ServerServiceReference.DeleteUserRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.DeleteUserRequest();
            inValue.userId = userId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).DeleteUserAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetOperatorInterruptionsResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetOperatorInterruptions(Queue.Services.Server.Tests.ServerServiceReference.GetOperatorInterruptionsRequest request) {
            return base.Channel.GetOperatorInterruptions(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.OperatorInterruption[] GetOperatorInterruptions(Queue.Services.Server.Tests.ServerServiceReference.OperatorInterruptionFilter filter) {
            Queue.Services.Server.Tests.ServerServiceReference.GetOperatorInterruptionsRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetOperatorInterruptionsRequest();
            inValue.filter = filter;
            Queue.Services.Server.Tests.ServerServiceReference.GetOperatorInterruptionsResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetOperatorInterruptions(inValue);
            return retVal.GetOperatorInterruptionsResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetOperatorInterruptionsResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetOperatorInterruptionsAsync(Queue.Services.Server.Tests.ServerServiceReference.GetOperatorInterruptionsRequest request) {
            return base.Channel.GetOperatorInterruptionsAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetOperatorInterruptionsResponse> GetOperatorInterruptionsAsync(Queue.Services.Server.Tests.ServerServiceReference.OperatorInterruptionFilter filter) {
            Queue.Services.Server.Tests.ServerServiceReference.GetOperatorInterruptionsRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetOperatorInterruptionsRequest();
            inValue.filter = filter;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetOperatorInterruptionsAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetOperatorInterruptionResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetOperatorInterruption(Queue.Services.Server.Tests.ServerServiceReference.GetOperatorInterruptionRequest request) {
            return base.Channel.GetOperatorInterruption(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.OperatorInterruption GetOperatorInterruption(System.Guid operatorInterruptionId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetOperatorInterruptionRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetOperatorInterruptionRequest();
            inValue.operatorInterruptionId = operatorInterruptionId;
            Queue.Services.Server.Tests.ServerServiceReference.GetOperatorInterruptionResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetOperatorInterruption(inValue);
            return retVal.GetOperatorInterruptionResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetOperatorInterruptionResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetOperatorInterruptionAsync(Queue.Services.Server.Tests.ServerServiceReference.GetOperatorInterruptionRequest request) {
            return base.Channel.GetOperatorInterruptionAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetOperatorInterruptionResponse> GetOperatorInterruptionAsync(System.Guid operatorInterruptionId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetOperatorInterruptionRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetOperatorInterruptionRequest();
            inValue.operatorInterruptionId = operatorInterruptionId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetOperatorInterruptionAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.EditOperatorInterruptionResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditOperatorInterruption(Queue.Services.Server.Tests.ServerServiceReference.EditOperatorInterruptionRequest request) {
            return base.Channel.EditOperatorInterruption(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.OperatorInterruption EditOperatorInterruption(Queue.Services.Server.Tests.ServerServiceReference.OperatorInterruption source) {
            Queue.Services.Server.Tests.ServerServiceReference.EditOperatorInterruptionRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditOperatorInterruptionRequest();
            inValue.source = source;
            Queue.Services.Server.Tests.ServerServiceReference.EditOperatorInterruptionResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditOperatorInterruption(inValue);
            return retVal.EditOperatorInterruptionResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditOperatorInterruptionResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditOperatorInterruptionAsync(Queue.Services.Server.Tests.ServerServiceReference.EditOperatorInterruptionRequest request) {
            return base.Channel.EditOperatorInterruptionAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditOperatorInterruptionResponse> EditOperatorInterruptionAsync(Queue.Services.Server.Tests.ServerServiceReference.OperatorInterruption source) {
            Queue.Services.Server.Tests.ServerServiceReference.EditOperatorInterruptionRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditOperatorInterruptionRequest();
            inValue.source = source;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditOperatorInterruptionAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.DeleteOperatorInterruptionResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.DeleteOperatorInterruption(Queue.Services.Server.Tests.ServerServiceReference.DeleteOperatorInterruptionRequest request) {
            return base.Channel.DeleteOperatorInterruption(request);
        }
        
        public void DeleteOperatorInterruption(System.Guid operatorInterruptionId) {
            Queue.Services.Server.Tests.ServerServiceReference.DeleteOperatorInterruptionRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.DeleteOperatorInterruptionRequest();
            inValue.operatorInterruptionId = operatorInterruptionId;
            Queue.Services.Server.Tests.ServerServiceReference.DeleteOperatorInterruptionResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).DeleteOperatorInterruption(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteOperatorInterruptionResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.DeleteOperatorInterruptionAsync(Queue.Services.Server.Tests.ServerServiceReference.DeleteOperatorInterruptionRequest request) {
            return base.Channel.DeleteOperatorInterruptionAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteOperatorInterruptionResponse> DeleteOperatorInterruptionAsync(System.Guid operatorInterruptionId) {
            Queue.Services.Server.Tests.ServerServiceReference.DeleteOperatorInterruptionRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.DeleteOperatorInterruptionRequest();
            inValue.operatorInterruptionId = operatorInterruptionId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).DeleteOperatorInterruptionAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.ChangeUserPasswordResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.ChangeUserPassword(Queue.Services.Server.Tests.ServerServiceReference.ChangeUserPasswordRequest request) {
            return base.Channel.ChangeUserPassword(request);
        }
        
        public void ChangeUserPassword(System.Guid userId, string password) {
            Queue.Services.Server.Tests.ServerServiceReference.ChangeUserPasswordRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.ChangeUserPasswordRequest();
            inValue.userId = userId;
            inValue.password = password;
            Queue.Services.Server.Tests.ServerServiceReference.ChangeUserPasswordResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).ChangeUserPassword(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.ChangeUserPasswordResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.ChangeUserPasswordAsync(Queue.Services.Server.Tests.ServerServiceReference.ChangeUserPasswordRequest request) {
            return base.Channel.ChangeUserPasswordAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.ChangeUserPasswordResponse> ChangeUserPasswordAsync(System.Guid userId, string password) {
            Queue.Services.Server.Tests.ServerServiceReference.ChangeUserPasswordRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.ChangeUserPasswordRequest();
            inValue.userId = userId;
            inValue.password = password;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).ChangeUserPasswordAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetOfficesResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetOffices(Queue.Services.Server.Tests.ServerServiceReference.GetOfficesRequest request) {
            return base.Channel.GetOffices(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.Office[] GetOffices() {
            Queue.Services.Server.Tests.ServerServiceReference.GetOfficesRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetOfficesRequest();
            Queue.Services.Server.Tests.ServerServiceReference.GetOfficesResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetOffices(inValue);
            return retVal.GetOfficesResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetOfficesResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetOfficesAsync(Queue.Services.Server.Tests.ServerServiceReference.GetOfficesRequest request) {
            return base.Channel.GetOfficesAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetOfficesResponse> GetOfficesAsync() {
            Queue.Services.Server.Tests.ServerServiceReference.GetOfficesRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetOfficesRequest();
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetOfficesAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetOfficeResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetOffice(Queue.Services.Server.Tests.ServerServiceReference.GetOfficeRequest request) {
            return base.Channel.GetOffice(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.Office GetOffice(System.Guid officeId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetOfficeRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetOfficeRequest();
            inValue.officeId = officeId;
            Queue.Services.Server.Tests.ServerServiceReference.GetOfficeResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetOffice(inValue);
            return retVal.GetOfficeResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetOfficeResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetOfficeAsync(Queue.Services.Server.Tests.ServerServiceReference.GetOfficeRequest request) {
            return base.Channel.GetOfficeAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetOfficeResponse> GetOfficeAsync(System.Guid officeId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetOfficeRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetOfficeRequest();
            inValue.officeId = officeId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetOfficeAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.EditOfficeResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditOffice(Queue.Services.Server.Tests.ServerServiceReference.EditOfficeRequest request) {
            return base.Channel.EditOffice(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.Office EditOffice(Queue.Services.Server.Tests.ServerServiceReference.Office source) {
            Queue.Services.Server.Tests.ServerServiceReference.EditOfficeRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditOfficeRequest();
            inValue.source = source;
            Queue.Services.Server.Tests.ServerServiceReference.EditOfficeResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditOffice(inValue);
            return retVal.EditOfficeResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditOfficeResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditOfficeAsync(Queue.Services.Server.Tests.ServerServiceReference.EditOfficeRequest request) {
            return base.Channel.EditOfficeAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditOfficeResponse> EditOfficeAsync(Queue.Services.Server.Tests.ServerServiceReference.Office source) {
            Queue.Services.Server.Tests.ServerServiceReference.EditOfficeRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditOfficeRequest();
            inValue.source = source;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditOfficeAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.DeleteOfficeResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.DeleteOffice(Queue.Services.Server.Tests.ServerServiceReference.DeleteOfficeRequest request) {
            return base.Channel.DeleteOffice(request);
        }
        
        public void DeleteOffice(System.Guid officeId) {
            Queue.Services.Server.Tests.ServerServiceReference.DeleteOfficeRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.DeleteOfficeRequest();
            inValue.officeId = officeId;
            Queue.Services.Server.Tests.ServerServiceReference.DeleteOfficeResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).DeleteOffice(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteOfficeResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.DeleteOfficeAsync(Queue.Services.Server.Tests.ServerServiceReference.DeleteOfficeRequest request) {
            return base.Channel.DeleteOfficeAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteOfficeResponse> DeleteOfficeAsync(System.Guid officeId) {
            Queue.Services.Server.Tests.ServerServiceReference.DeleteOfficeRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.DeleteOfficeRequest();
            inValue.officeId = officeId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).DeleteOfficeAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServiceLinksResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetAdditionalServiceLinks(Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServiceLinksRequest request) {
            return base.Channel.GetAdditionalServiceLinks(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntityLink[] GetAdditionalServiceLinks() {
            Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServiceLinksRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServiceLinksRequest();
            Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServiceLinksResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetAdditionalServiceLinks(inValue);
            return retVal.GetAdditionalServiceLinksResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServiceLinksResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetAdditionalServiceLinksAsync(Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServiceLinksRequest request) {
            return base.Channel.GetAdditionalServiceLinksAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServiceLinksResponse> GetAdditionalServiceLinksAsync() {
            Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServiceLinksRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServiceLinksRequest();
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetAdditionalServiceLinksAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServicesResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetAdditionalServices(Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServicesRequest request) {
            return base.Channel.GetAdditionalServices(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.AdditionalService[] GetAdditionalServices() {
            Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServicesRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServicesRequest();
            Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServicesResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetAdditionalServices(inValue);
            return retVal.GetAdditionalServicesResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServicesResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetAdditionalServicesAsync(Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServicesRequest request) {
            return base.Channel.GetAdditionalServicesAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServicesResponse> GetAdditionalServicesAsync() {
            Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServicesRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServicesRequest();
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetAdditionalServicesAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServiceResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetAdditionalService(Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServiceRequest request) {
            return base.Channel.GetAdditionalService(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.AdditionalService GetAdditionalService(System.Guid additionalServiceId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServiceRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServiceRequest();
            inValue.additionalServiceId = additionalServiceId;
            Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServiceResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetAdditionalService(inValue);
            return retVal.GetAdditionalServiceResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServiceResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetAdditionalServiceAsync(Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServiceRequest request) {
            return base.Channel.GetAdditionalServiceAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServiceResponse> GetAdditionalServiceAsync(System.Guid additionalServiceId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServiceRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetAdditionalServiceRequest();
            inValue.additionalServiceId = additionalServiceId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetAdditionalServiceAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.EditAdditionalServiceResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditAdditionalService(Queue.Services.Server.Tests.ServerServiceReference.EditAdditionalServiceRequest request) {
            return base.Channel.EditAdditionalService(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.AdditionalService EditAdditionalService(Queue.Services.Server.Tests.ServerServiceReference.AdditionalService source) {
            Queue.Services.Server.Tests.ServerServiceReference.EditAdditionalServiceRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditAdditionalServiceRequest();
            inValue.source = source;
            Queue.Services.Server.Tests.ServerServiceReference.EditAdditionalServiceResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditAdditionalService(inValue);
            return retVal.EditAdditionalServiceResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditAdditionalServiceResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditAdditionalServiceAsync(Queue.Services.Server.Tests.ServerServiceReference.EditAdditionalServiceRequest request) {
            return base.Channel.EditAdditionalServiceAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditAdditionalServiceResponse> EditAdditionalServiceAsync(Queue.Services.Server.Tests.ServerServiceReference.AdditionalService source) {
            Queue.Services.Server.Tests.ServerServiceReference.EditAdditionalServiceRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditAdditionalServiceRequest();
            inValue.source = source;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditAdditionalServiceAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.DeleteAdditionalServiceResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.DeleteAdditionalService(Queue.Services.Server.Tests.ServerServiceReference.DeleteAdditionalServiceRequest request) {
            return base.Channel.DeleteAdditionalService(request);
        }
        
        public void DeleteAdditionalService(System.Guid additionalServiceId) {
            Queue.Services.Server.Tests.ServerServiceReference.DeleteAdditionalServiceRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.DeleteAdditionalServiceRequest();
            inValue.additionalServiceId = additionalServiceId;
            Queue.Services.Server.Tests.ServerServiceReference.DeleteAdditionalServiceResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).DeleteAdditionalService(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteAdditionalServiceResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.DeleteAdditionalServiceAsync(Queue.Services.Server.Tests.ServerServiceReference.DeleteAdditionalServiceRequest request) {
            return base.Channel.DeleteAdditionalServiceAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteAdditionalServiceResponse> DeleteAdditionalServiceAsync(System.Guid additionalServiceId) {
            Queue.Services.Server.Tests.ServerServiceReference.DeleteAdditionalServiceRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.DeleteAdditionalServiceRequest();
            inValue.additionalServiceId = additionalServiceId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).DeleteAdditionalServiceAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetWorkplacesLinksResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetWorkplacesLinks(Queue.Services.Server.Tests.ServerServiceReference.GetWorkplacesLinksRequest request) {
            return base.Channel.GetWorkplacesLinks(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntityLink[] GetWorkplacesLinks() {
            Queue.Services.Server.Tests.ServerServiceReference.GetWorkplacesLinksRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetWorkplacesLinksRequest();
            Queue.Services.Server.Tests.ServerServiceReference.GetWorkplacesLinksResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetWorkplacesLinks(inValue);
            return retVal.GetWorkplacesLinksResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetWorkplacesLinksResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetWorkplacesLinksAsync(Queue.Services.Server.Tests.ServerServiceReference.GetWorkplacesLinksRequest request) {
            return base.Channel.GetWorkplacesLinksAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetWorkplacesLinksResponse> GetWorkplacesLinksAsync() {
            Queue.Services.Server.Tests.ServerServiceReference.GetWorkplacesLinksRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetWorkplacesLinksRequest();
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetWorkplacesLinksAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetWorkplacesResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetWorkplaces(Queue.Services.Server.Tests.ServerServiceReference.GetWorkplacesRequest request) {
            return base.Channel.GetWorkplaces(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.Workplace[] GetWorkplaces() {
            Queue.Services.Server.Tests.ServerServiceReference.GetWorkplacesRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetWorkplacesRequest();
            Queue.Services.Server.Tests.ServerServiceReference.GetWorkplacesResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetWorkplaces(inValue);
            return retVal.GetWorkplacesResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetWorkplacesResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetWorkplacesAsync(Queue.Services.Server.Tests.ServerServiceReference.GetWorkplacesRequest request) {
            return base.Channel.GetWorkplacesAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetWorkplacesResponse> GetWorkplacesAsync() {
            Queue.Services.Server.Tests.ServerServiceReference.GetWorkplacesRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetWorkplacesRequest();
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetWorkplacesAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetWorkplaceResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetWorkplace(Queue.Services.Server.Tests.ServerServiceReference.GetWorkplaceRequest request) {
            return base.Channel.GetWorkplace(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.Workplace GetWorkplace(System.Guid workplaceId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetWorkplaceRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetWorkplaceRequest();
            inValue.workplaceId = workplaceId;
            Queue.Services.Server.Tests.ServerServiceReference.GetWorkplaceResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetWorkplace(inValue);
            return retVal.GetWorkplaceResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetWorkplaceResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetWorkplaceAsync(Queue.Services.Server.Tests.ServerServiceReference.GetWorkplaceRequest request) {
            return base.Channel.GetWorkplaceAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetWorkplaceResponse> GetWorkplaceAsync(System.Guid workplaceId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetWorkplaceRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetWorkplaceRequest();
            inValue.workplaceId = workplaceId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetWorkplaceAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.EditWorkplaceResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditWorkplace(Queue.Services.Server.Tests.ServerServiceReference.EditWorkplaceRequest request) {
            return base.Channel.EditWorkplace(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.Workplace EditWorkplace(Queue.Services.Server.Tests.ServerServiceReference.Workplace workplace) {
            Queue.Services.Server.Tests.ServerServiceReference.EditWorkplaceRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditWorkplaceRequest();
            inValue.workplace = workplace;
            Queue.Services.Server.Tests.ServerServiceReference.EditWorkplaceResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditWorkplace(inValue);
            return retVal.EditWorkplaceResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditWorkplaceResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.EditWorkplaceAsync(Queue.Services.Server.Tests.ServerServiceReference.EditWorkplaceRequest request) {
            return base.Channel.EditWorkplaceAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.EditWorkplaceResponse> EditWorkplaceAsync(Queue.Services.Server.Tests.ServerServiceReference.Workplace workplace) {
            Queue.Services.Server.Tests.ServerServiceReference.EditWorkplaceRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.EditWorkplaceRequest();
            inValue.workplace = workplace;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).EditWorkplaceAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.DeleteWorkplaceResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.DeleteWorkplace(Queue.Services.Server.Tests.ServerServiceReference.DeleteWorkplaceRequest request) {
            return base.Channel.DeleteWorkplace(request);
        }
        
        public void DeleteWorkplace(System.Guid workplaceId) {
            Queue.Services.Server.Tests.ServerServiceReference.DeleteWorkplaceRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.DeleteWorkplaceRequest();
            inValue.workplaceId = workplaceId;
            Queue.Services.Server.Tests.ServerServiceReference.DeleteWorkplaceResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).DeleteWorkplace(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteWorkplaceResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.DeleteWorkplaceAsync(Queue.Services.Server.Tests.ServerServiceReference.DeleteWorkplaceRequest request) {
            return base.Channel.DeleteWorkplaceAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.DeleteWorkplaceResponse> DeleteWorkplaceAsync(System.Guid workplaceId) {
            Queue.Services.Server.Tests.ServerServiceReference.DeleteWorkplaceRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.DeleteWorkplaceRequest();
            inValue.workplaceId = workplaceId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).DeleteWorkplaceAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetWorkplaceOperatorsResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetWorkplaceOperators(Queue.Services.Server.Tests.ServerServiceReference.GetWorkplaceOperatorsRequest request) {
            return base.Channel.GetWorkplaceOperators(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.Operator[] GetWorkplaceOperators(System.Guid workplaceId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetWorkplaceOperatorsRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetWorkplaceOperatorsRequest();
            inValue.workplaceId = workplaceId;
            Queue.Services.Server.Tests.ServerServiceReference.GetWorkplaceOperatorsResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetWorkplaceOperators(inValue);
            return retVal.GetWorkplaceOperatorsResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetWorkplaceOperatorsResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetWorkplaceOperatorsAsync(Queue.Services.Server.Tests.ServerServiceReference.GetWorkplaceOperatorsRequest request) {
            return base.Channel.GetWorkplaceOperatorsAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetWorkplaceOperatorsResponse> GetWorkplaceOperatorsAsync(System.Guid workplaceId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetWorkplaceOperatorsRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetWorkplaceOperatorsRequest();
            inValue.workplaceId = workplaceId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetWorkplaceOperatorsAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetServiceLinksResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetServiceLinks(Queue.Services.Server.Tests.ServerServiceReference.GetServiceLinksRequest request) {
            return base.Channel.GetServiceLinks(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.IdentifiedEntityLink[] GetServiceLinks() {
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceLinksRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetServiceLinksRequest();
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceLinksResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetServiceLinks(inValue);
            return retVal.GetServiceLinksResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceLinksResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetServiceLinksAsync(Queue.Services.Server.Tests.ServerServiceReference.GetServiceLinksRequest request) {
            return base.Channel.GetServiceLinksAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceLinksResponse> GetServiceLinksAsync() {
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceLinksRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetServiceLinksRequest();
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetServiceLinksAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetRootServicesResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetRootServices(Queue.Services.Server.Tests.ServerServiceReference.GetRootServicesRequest request) {
            return base.Channel.GetRootServices(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.Service[] GetRootServices() {
            Queue.Services.Server.Tests.ServerServiceReference.GetRootServicesRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetRootServicesRequest();
            Queue.Services.Server.Tests.ServerServiceReference.GetRootServicesResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetRootServices(inValue);
            return retVal.GetRootServicesResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetRootServicesResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetRootServicesAsync(Queue.Services.Server.Tests.ServerServiceReference.GetRootServicesRequest request) {
            return base.Channel.GetRootServicesAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetRootServicesResponse> GetRootServicesAsync() {
            Queue.Services.Server.Tests.ServerServiceReference.GetRootServicesRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetRootServicesRequest();
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetRootServicesAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetServicesResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetServices(Queue.Services.Server.Tests.ServerServiceReference.GetServicesRequest request) {
            return base.Channel.GetServices(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.Service[] GetServices(System.Guid serviceGroupId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetServicesRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetServicesRequest();
            inValue.serviceGroupId = serviceGroupId;
            Queue.Services.Server.Tests.ServerServiceReference.GetServicesResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetServices(inValue);
            return retVal.GetServicesResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServicesResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetServicesAsync(Queue.Services.Server.Tests.ServerServiceReference.GetServicesRequest request) {
            return base.Channel.GetServicesAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServicesResponse> GetServicesAsync(System.Guid serviceGroupId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetServicesRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetServicesRequest();
            inValue.serviceGroupId = serviceGroupId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetServicesAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.GetServiceResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetService(Queue.Services.Server.Tests.ServerServiceReference.GetServiceRequest request) {
            return base.Channel.GetService(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.Service GetService(System.Guid serviceId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetServiceRequest();
            inValue.serviceId = serviceId;
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetService(inValue);
            return retVal.GetServiceResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.GetServiceAsync(Queue.Services.Server.Tests.ServerServiceReference.GetServiceRequest request) {
            return base.Channel.GetServiceAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.GetServiceResponse> GetServiceAsync(System.Guid serviceId) {
            Queue.Services.Server.Tests.ServerServiceReference.GetServiceRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.GetServiceRequest();
            inValue.serviceId = serviceId;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).GetServiceAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Queue.Services.Server.Tests.ServerServiceReference.FindServicesResponse Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.FindServices(Queue.Services.Server.Tests.ServerServiceReference.FindServicesRequest request) {
            return base.Channel.FindServices(request);
        }
        
        public Queue.Services.Server.Tests.ServerServiceReference.Service[] FindServices(string query, int startIndex, int maxResults) {
            Queue.Services.Server.Tests.ServerServiceReference.FindServicesRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.FindServicesRequest();
            inValue.query = query;
            inValue.startIndex = startIndex;
            inValue.maxResults = maxResults;
            Queue.Services.Server.Tests.ServerServiceReference.FindServicesResponse retVal = ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).FindServices(inValue);
            return retVal.FindServicesResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.FindServicesResponse> Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService.FindServicesAsync(Queue.Services.Server.Tests.ServerServiceReference.FindServicesRequest request) {
            return base.Channel.FindServicesAsync(request);
        }
        
        public System.Threading.Tasks.Task<Queue.Services.Server.Tests.ServerServiceReference.FindServicesResponse> FindServicesAsync(string query, int startIndex, int maxResults) {
            Queue.Services.Server.Tests.ServerServiceReference.FindServicesRequest inValue = new Queue.Services.Server.Tests.ServerServiceReference.FindServicesRequest();
            inValue.query = query;
            inValue.startIndex = startIndex;
            inValue.maxResults = maxResults;
            return ((Queue.Services.Server.Tests.ServerServiceReference.IServerHttpService)(this)).FindServicesAsync(inValue);
        }
    }
}
